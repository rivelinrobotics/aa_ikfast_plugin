/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-05-17 17:19:16.478015
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59;
x0=IKcos(j[0]);
x1=IKcos(j[3]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[0]);
x5=IKsin(j[3]);
x6=IKcos(j[1]);
x7=IKsin(j[2]);
x8=IKsin(j[5]);
x9=IKcos(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((6.0e-8)*x1);
x13=((6.0e-8)*x11);
x14=((0.339797000010288)*x1);
x15=((0.04)*x0);
x16=((0.339797000010288)*x4);
x17=((6.0e-8)*x5);
x18=((0.339797000010288)*x0);
x19=((1.0)*x4);
x20=((1.0)*x5);
x21=((0.34)*x4);
x22=((0.04)*x4);
x23=((0.34)*x0);
x24=((0.345)*x3);
x25=((1.0)*x0);
x26=(x3*x7);
x27=(x2*x6);
x28=(x2*x3);
x29=(x6*x7);
x30=(x5*x8);
x31=(x1*x11);
x32=(x1*x19);
x33=((1.0)*x28);
x34=(x25*x29);
x35=(x19*x29);
x36=(x26+x27);
x37=((((-1.0)*x29))+x33);
x38=(x10*x36);
x39=((((-1.0)*x34))+((x0*x28)));
x40=((((-1.0)*x35))+((x28*x4)));
x41=((((-1.0)*x25*x28))+x34);
x42=((((-1.0)*x19*x28))+x35);
x43=(x1*x39);
x44=(x0*x10*((x26+x27)));
x45=(x25*(((((-1.0)*x26))+(((-1.0)*x27)))));
x46=(x19*(((((-1.0)*x26))+(((-1.0)*x27)))));
x47=(x1*x40);
x48=(x42*x5);
x49=(x11*x46);
x50=(x11*x45);
x51=((((-1.0)*x19*x5))+x43);
x52=(((x0*x5))+x47);
x53=((((-1.0)*x4*x5))+x43);
x54=(x10*x52);
x55=(((x10*(((((-1.0)*x33))+x29))))+((x31*x36)));
x56=(((x11*x37))+((x1*x38)));
x57=(((x11*x52))+((x10*((((x27*x4))+((x26*x4)))))));
x58=(((x10*x51))+x50);
x59=(x49+x54);
eerot[0]=(((x8*(((((-1.0)*x32))+((x41*x5))))))+((x58*x9)));
eerot[1]=(((x9*(((((-1.0)*x20*x41))+x32))))+((x58*x8)));
eerot[2]=(((x11*x51))+x44);
eetrans[0]=((((-1.0)*x15*x29))+((x0*x24))+((x8*(((((-1.0)*x17*x41))+((x12*x4))))))+((x23*x27))+((x23*x26))+((x10*((((x18*x26))+((x18*x27))))))+x15+((j[6]*((((x11*x53))+x44))))+((x9*(((((-6.0e-8)*x10*x53))+(((-6.0e-8)*x50))))))+((x15*x28))+((x11*(((((-1.0)*x16*x5))+((x14*x39)))))));
eerot[3]=(((x8*((((x0*x1))+x48))))+((x59*x9)));
eerot[4]=(((x9*(((((-1.0)*x20*x42))+(((-1.0)*x1*x25))))))+((x59*x8)));
eerot[5]=x57;
eetrans[1]=(((x22*x28))+((x21*x26))+((x21*x27))+((x9*(((((-6.0e-8)*x54))+(((-1.0)*x13*x46))))))+x22+((x10*((((x16*x26))+((x16*x27))))))+(((-1.0)*x22*x29))+((x8*(((((-1.0)*x0*x12))+(((-1.0)*x17*x42))))))+((j[6]*x57))+((x11*((((x18*x5))+((x14*x40))))))+((x24*x4)));
eerot[6]=(((x56*x9))+((x30*(((((-1.0)*x26))+(((-1.0)*x27)))))));
eerot[7]=(((x56*x8))+((x36*x5*x9)));
eerot[8]=x55;
eetrans[2]=((0.33)+(((-0.34)*x28))+(((0.345)*x6))+((x30*(((((6.0e-8)*x26))+(((6.0e-8)*x27))))))+(((0.04)*x26))+(((0.04)*x27))+((x10*(((((-0.339797000010288)*x28))+(((0.339797000010288)*x29))))))+((x31*(((((0.339797000010288)*x27))+(((0.339797000010288)*x26))))))+((j[6]*x55))+(((0.34)*x29))+((x9*(((((-1.0)*x12*x38))+(((-1.0)*x13*x37)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((6.0e-8)*r00))+px+(((-0.082598)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((6.0e-8)*r10))+py+(((-0.082598)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.33)+(((6.0e-8)*r20))+pz+(((-0.082598)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x60=((1.0)*px);
IkReal x61=((1.0)*pz);
IkReal x62=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x62))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x61)));
rxp0_2=((((-1.0)*r10*x60))+((py*r00)));
rxp1_0=((((-1.0)*r21*x62))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x61)));
rxp1_2=((((-1.0)*r11*x60))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x62)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x61)));
rxp2_2=((((-1.0)*r12*x60))+((py*r02)));
{
IkReal j1eval[1];
IkReal x63=cj2*cj2;
CheckValue<IkReal> x99=IKPowWithIntegerCheck(r22,-1);
if(!x99.valid){
continue;
}
IkReal x64=x99.value;
IkReal x65=sj2*sj2;
IkReal x66=((16.0)*cj2);
IkReal x67=((40000.0)*pp);
IkReal x68=((136.0)*sj2);
IkReal x69=(npz*x64);
IkReal x70=((9384.0)*sj2);
IkReal x71=((400.0)*sj2);
IkReal x72=((27200.0)*sj2);
CheckValue<IkReal> x100=IKPowWithIntegerCheck(r22,-2);
if(!x100.valid){
continue;
}
IkReal x73=x100.value;
IkReal x74=((4761.0)*x73);
IkReal x75=(cj2*x73);
IkReal x76=(pz*x73);
IkReal x77=((80000.0)*pz*x69);
IkReal x78=(x70*x73);
IkReal x79=((1104.0)*x75);
IkReal x80=((138.0)*sj2*x73);
IkReal x81=((3400.0)*cj2*x69);
IkReal x82=((1173.0)*x75);
IkReal x83=(x69*x71);
IkReal x84=(x63*x73);
IkReal x85=(x65*x73);
IkReal x86=((40000.0)*pz*x76);
IkReal x87=((136.0)*x85);
IkReal x88=(x71*x76);
IkReal x89=((136.0)*x84);
IkReal x90=((3400.0)*pz*x75);
IkReal x91=((1140.0)*sj2*x75);
IkReal x92=((9513.0)+x77);
IkReal x93=(x67+x86);
IkReal x94=(x83+x90);
IkReal x95=(x80+x87);
IkReal x96=(x74+x79+x78);
IkReal x97=(x89+x82+x91);
IkReal x98=((138.0)+x66+x68+x88+x81);
j1eval[0]=((((8.0)*(IKabs((x98+x95+(((-1.0)*x97))+(((-1.0)*x94)))))))+(((0.5)*(IKabs(((((9512.0)*sj2))+(((-4624.0)*x85))+((x69*x72))+(((-27600.0)*x76))+(((-64.0)*x84))+(((3200.0)*cj2*x69))+x66+x92+(((27600.0)*x69))+(((-1.0)*x93))+(((-1.0)*x96))+(((-1.0)*x72*x76))+(((-1088.0)*sj2*x75))+(((-3200.0)*pz*x75)))))))+(IKabs(((((-9184.0)*x84))+(((3264.0)*sj2*x75))+(((4496.0)*x85))+(((1104.0)*cj2))+x70+x92+x96+(((-1.0)*x93)))))+(((8.0)*(IKabs((x98+x97+(((-1.0)*x94))+(((-1.0)*x95))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j1, j6]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal x101=r22*r22;
IkReal x102=sj2*sj2;
IkReal x103=cj2*cj2;
IkReal x104=((1104.0)*cj2);
IkReal x105=((9384.0)*sj2);
IkReal x106=((1173.0)*cj2);
IkReal x107=((138.0)*sj2);
IkReal x108=((27600.0)*pz);
IkReal x109=(cj2*sj2);
IkReal x110=(npz*r22);
IkReal x111=((27200.0)*sj2);
IkReal x112=((3400.0)*cj2);
IkReal x113=((400.0)*sj2);
IkReal x114=((3200.0)*cj2);
CheckValue<IkReal> x150=IKPowWithIntegerCheck(r22,-2);
if(!x150.valid){
continue;
}
IkReal x115=x150.value;
IkReal x116=((9513.0)*x101);
IkReal x117=((40000.0)*(pz*pz));
IkReal x118=((136.0)*x103);
IkReal x119=((138.0)*x101);
IkReal x120=((1140.0)*x109);
IkReal x121=(pz*x113);
IkReal x122=(pz*x112);
IkReal x123=((136.0)*x102);
IkReal x124=(pz*x114);
IkReal x125=(pz*x111);
IkReal x126=((27600.0)*x110);
IkReal x127=((64.0)*x103);
IkReal x128=((1088.0)*x109);
IkReal x129=((4624.0)*x102);
IkReal x130=(cj2*x101);
IkReal x131=(sj2*x101);
IkReal x132=((0.0004)*x115);
IkReal x133=((2.5e-5)*x115);
IkReal x134=((16.0)*x130);
IkReal x135=((80000.0)*pz*x110);
IkReal x136=((40000.0)*pp*x101);
IkReal x137=((136.0)*x131);
IkReal x138=(x110*x112);
IkReal x139=(x110*x113);
IkReal x140=(x110*x111);
IkReal x141=(x110*x114);
IkReal x142=(x123+x107);
IkReal x143=(x139+x122);
IkReal x144=(x124+x125+x108);
IkReal x145=((-4761.0)+x135+x116);
IkReal x146=(x120+x118+x106);
IkReal x147=(x140+x141+x126);
IkReal x148=(x134+x137+x138+x121+x119);
IkReal x149=(x136+x127+x128+x129+x117+x104+x105);
op[0]=(x133*(((((-1.0)*x144))+(((-1.0)*x149))+x145+x147+x134+(((9512.0)*x131)))));
op[1]=(x132*(((((-1.0)*x143))+(((-1.0)*x146))+x142+x148)));
op[2]=((5.0e-5)*x115*(((4761.0)+(((-9184.0)*x103))+(((-1.0)*x117))+x135+x116+x104+x105+(((-1.0)*x136))+(((4496.0)*x102))+(((3264.0)*x109))+((x101*x105))+((x101*x104)))));
op[3]=(x132*(((((-1.0)*x143))+(((-1.0)*x142))+x146+x148)));
op[4]=(x133*(((((-1.0)*x149))+(((-1.0)*x147))+(((9256.0)*x131))+x144+x145+(((2192.0)*x130)))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x151=((-0.257199000010288)+npz);
if((((0.9513)+(((4.0)*(npz*npz)))+(((0.1104)*sj1))+(((0.9384)*sj2))+(((0.1104)*cj2))+(((0.1088)*sj1*sj2))+(((-0.0128)*cj1*sj2))+(((0.0128)*cj2*sj1))+(((0.1088)*cj1*cj2))+(((-4.0)*pp)))) < -0.00001)
continue;
IkReal x152=((0.5)*(IKsqrt(((0.9513)+(((4.0)*(npz*npz)))+(((0.1104)*sj1))+(((0.9384)*sj2))+(((0.1104)*cj2))+(((0.1088)*sj1*sj2))+(((-0.0128)*cj1*sj2))+(((0.0128)*cj2*sj1))+(((0.1088)*cj1*cj2))+(((-4.0)*pp))))));
j6array[0]=((((-1.0)*x152))+x151);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=(x152+x151);
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
j6valid[0] = true;
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j0eval[3];
IkReal x153=(sj1*sj2);
IkReal x154=(cj2*sj1);
IkReal x155=((1.0)*j6);
IkReal x156=(cj1*sj2);
IkReal x157=(cj1*cj2);
j0eval[0]=((1.0)+(((8.625)*sj1))+(((8.5)*x157))+(((8.5)*x153))+x154+(((-1.0)*x156)));
j0eval[1]=((IKabs((py+(((-0.257199000010288)*r12))+(((-1.0)*r12*x155)))))+(IKabs(((((-1.0)*r02*x155))+(((-0.257199000010288)*r02))+px))));
j0eval[2]=IKsign(((0.04)+(((0.345)*sj1))+(((-0.04)*x156))+(((0.34)*x153))+(((0.34)*x157))+(((0.04)*x154))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x158=r22*r22;
IkReal x159=j6*j6;
IkReal x160=pz*pz;
IkReal x161=(pz*r22);
IkReal x162=((0.514398000020576)*j6);
IkReal x163=(j6*npz);
IkReal x164=((7.77608)*j6);
IkReal x165=((15.1168550416)*x159);
j0eval[0]=((-1.0)+(((-1.0)*x165))+(((-1.0)*x164))+(((7.77608)*npz))+(((-15.1168550416)*pp))+(((-7.77608)*x161))+(((15.1168550416)*x160))+(((30.2337100832)*x163))+x158+((x158*x165))+((x158*x164))+(((-30.2337100832)*j6*x161)));
j0eval[1]=IKsign(((-0.0661513256062921)+(((0.0661513256062921)*x158))+(((-2.0)*j6*x161))+(((-1.0)*x162))+(((-0.514398000020576)*x161))+x160+(((-1.0)*pp))+(((0.514398000020576)*npz))+(((-1.0)*x159))+(((2.0)*x163))+((x158*x159))+((x158*x162))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x166=(cj1*sj2);
IkReal x167=(sj1*sj2);
IkReal x168=((8.5)*r02);
IkReal x169=(cj1*cj2);
IkReal x170=(r02*sj1);
IkReal x171=((33.04834)*px);
IkReal x172=(cj2*sj1);
IkReal x173=((3.88804)*px);
IkReal x174=((3.88804)*j6*r02);
IkReal x175=((33.04834)*j6*r02);
j0eval[0]=((((-1.0)*x174))+(((-8.625)*x170))+((x169*x171))+(((-1.0)*r02))+((x172*x173))+x173+((x166*x174))+(((33.534345)*px*sj1))+((x167*x171))+(((-1.0)*x168*x169))+(((-33.534345)*j6*x170))+(((-1.0)*cj2*x170))+(((-3.88804)*cj2*j6*x170))+(((-1.0)*x169*x175))+((r02*x166))+(((-1.0)*x166*x173))+(((-1.0)*x167*x168))+(((-1.0)*x167*x175)));
j0eval[1]=((1.0)+(((8.625)*sj1))+(((8.5)*x169))+(((8.5)*x167))+x172+(((-1.0)*x166)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x176=r22*r22;
IkReal x177=((914.077225394989)*pp);
IkReal x178=(pz*r22);
CheckValue<IkReal> x182=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*x176))),-1);
if(!x182.valid){
continue;
}
IkReal x179=x182.value;
IkReal x180=((3.88804)*x179);
IkReal x181=((15.1168550416)*x179);
if(((((x176*x177))+(((-1.0)*x177))+(((914.077225394989)*(npz*npz)))+(((-1828.15445078998)*npz*x178))+(((914.077225394989)*(pz*pz))))) < -0.00001)
continue;
IkReal gconst0=(((x178*x181))+(((0.5)*x179*(IKsqrt((((x176*x177))+(((-1.0)*x177))+(((914.077225394989)*(npz*npz)))+(((-1828.15445078998)*npz*x178))+(((914.077225394989)*(pz*pz))))))))+x180+(((-1.0)*x176*x180))+(((-1.0)*npz*x181)));
CheckValue<IkReal> x183=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x183.valid){
continue;
}
CheckValue<IkReal> x184=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x184.valid){
continue;
}
CheckValue<IkReal> x185=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x185.valid){
continue;
}
CheckValue<IkReal> x186=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x186.valid){
continue;
}
CheckValue<IkReal> x187=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x187.valid){
continue;
}
CheckValue<IkReal> x188=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x188.valid){
continue;
}
CheckValue<IkReal> x189=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x189.valid){
continue;
}
CheckValue<IkReal> x190=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x190.valid){
continue;
}
CheckValue<IkReal> x191=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x191.valid){
continue;
}
CheckValue<IkReal> x192=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x192.valid){
continue;
}
CheckValue<IkReal> x193=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x193.valid){
continue;
}
CheckValue<IkReal> x194=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x194.valid){
continue;
}
CheckValue<IkReal> x195=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x195.valid){
continue;
}
CheckValue<IkReal> x196=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x196.valid){
continue;
}
CheckValue<IkReal> x197=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x197.valid){
continue;
}
CheckValue<IkReal> x198=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x198.valid){
continue;
}
CheckValue<IkReal> x199=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x199.valid){
continue;
}
CheckValue<IkReal> x200=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x200.valid){
continue;
}
CheckValue<IkReal> x201=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x201.valid){
continue;
}
CheckValue<IkReal> x202=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x202.valid){
continue;
}
CheckValue<IkReal> x203=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x203.valid){
continue;
}
CheckValue<IkReal> x204=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x204.valid){
continue;
}
CheckValue<IkReal> x205=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x205.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x206=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x206.valid){
continue;
}
CheckValue<IkReal> x207=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x207.valid){
continue;
}
CheckValue<IkReal> x208=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x208.valid){
continue;
}
CheckValue<IkReal> x209=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x209.valid){
continue;
}
CheckValue<IkReal> x210=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x210.valid){
continue;
}
CheckValue<IkReal> x211=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x211.valid){
continue;
}
CheckValue<IkReal> x212=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x212.valid){
continue;
}
CheckValue<IkReal> x213=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x213.valid){
continue;
}
CheckValue<IkReal> x214=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x214.valid){
continue;
}
CheckValue<IkReal> x215=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x215.valid){
continue;
}
CheckValue<IkReal> x216=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x216.valid){
continue;
}
CheckValue<IkReal> x217=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x217.valid){
continue;
}
CheckValue<IkReal> x218=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x218.valid){
continue;
}
CheckValue<IkReal> x219=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x219.valid){
continue;
}
CheckValue<IkReal> x220=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x220.valid){
continue;
}
CheckValue<IkReal> x221=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x221.valid){
continue;
}
CheckValue<IkReal> x222=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x222.valid){
continue;
}
CheckValue<IkReal> x223=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x223.valid){
continue;
}
CheckValue<IkReal> x224=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x224.valid){
continue;
}
CheckValue<IkReal> x225=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x225.valid){
continue;
}
CheckValue<IkReal> x226=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x226.valid){
continue;
}
CheckValue<IkReal> x227=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x227.valid){
continue;
}
CheckValue<IkReal> x228=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x228.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst1=((((((((((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x183.value))))*(IKsin(((3.88804)*(x184.value))))))+(((-1.0)*(IKcos(((3.88804)*(x185.value))))*(IKsin(((15.1168550416)*npz*(x186.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x187.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(x188.value))))*(IKsin(((15.1168550416)*npz*(x189.value))))))+(((-1.0)*(IKcos(((3.88804)*(x190.value))))*(IKcos(((15.1168550416)*npz*(x191.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x192.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x193.value))))))+(((((((((((IKsin(((3.88804)*(x194.value))))*(IKsin(((15.1168550416)*npz*(x195.value))))))+(((IKcos(((3.88804)*(x196.value))))*(IKcos(((15.1168550416)*npz*(x197.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x198.value))))))+(((((((IKcos(((15.1168550416)*npz*(x199.value))))*(IKsin(((3.88804)*(x200.value))))))+(((-1.0)*(IKcos(((3.88804)*(x201.value))))*(IKsin(((15.1168550416)*npz*(x202.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x203.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x204.value))))))))*(IKsin(((0.5)*(x205.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((((((((((IKsin(((3.88804)*(x206.value))))*(IKsin(((15.1168550416)*npz*(x207.value))))))+(((IKcos(((3.88804)*(x208.value))))*(IKcos(((15.1168550416)*npz*(x209.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x210.value))))))+(((((((IKcos(((15.1168550416)*npz*(x211.value))))*(IKsin(((3.88804)*(x212.value))))))+(((-1.0)*(IKcos(((3.88804)*(x213.value))))*(IKsin(((15.1168550416)*npz*(x214.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x215.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x216.value))))))+(((((((((((-1.0)*(IKsin(((3.88804)*(x217.value))))*(IKsin(((15.1168550416)*npz*(x218.value))))))+(((-1.0)*(IKcos(((3.88804)*(x219.value))))*(IKcos(((15.1168550416)*npz*(x220.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x221.value))))))+(((((((IKcos(((15.1168550416)*npz*(x222.value))))*(IKsin(((3.88804)*(x223.value))))))+(((-1.0)*(IKcos(((3.88804)*(x224.value))))*(IKsin(((15.1168550416)*npz*(x225.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x226.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x227.value))))))))*(IKcos(((0.5)*(x228.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
CheckValue<IkReal> x229=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x229.valid){
continue;
}
CheckValue<IkReal> x230=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x230.valid){
continue;
}
CheckValue<IkReal> x231=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x231.valid){
continue;
}
CheckValue<IkReal> x232=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x232.valid){
continue;
}
CheckValue<IkReal> x233=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x233.valid){
continue;
}
CheckValue<IkReal> x234=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x234.valid){
continue;
}
CheckValue<IkReal> x235=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x235.valid){
continue;
}
CheckValue<IkReal> x236=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x236.valid){
continue;
}
CheckValue<IkReal> x237=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x237.valid){
continue;
}
CheckValue<IkReal> x238=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x238.valid){
continue;
}
CheckValue<IkReal> x239=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x239.valid){
continue;
}
CheckValue<IkReal> x240=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x240.valid){
continue;
}
CheckValue<IkReal> x241=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x241.valid){
continue;
}
CheckValue<IkReal> x242=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x242.valid){
continue;
}
CheckValue<IkReal> x243=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x243.valid){
continue;
}
CheckValue<IkReal> x244=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x244.valid){
continue;
}
CheckValue<IkReal> x245=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x245.valid){
continue;
}
CheckValue<IkReal> x246=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x246.valid){
continue;
}
CheckValue<IkReal> x247=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x247.valid){
continue;
}
CheckValue<IkReal> x248=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x248.valid){
continue;
}
CheckValue<IkReal> x249=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x249.valid){
continue;
}
CheckValue<IkReal> x250=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x250.valid){
continue;
}
CheckValue<IkReal> x251=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x251.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x252=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x252.valid){
continue;
}
CheckValue<IkReal> x253=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x253.valid){
continue;
}
CheckValue<IkReal> x254=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x254.valid){
continue;
}
CheckValue<IkReal> x255=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x255.valid){
continue;
}
CheckValue<IkReal> x256=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x256.valid){
continue;
}
CheckValue<IkReal> x257=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x257.valid){
continue;
}
CheckValue<IkReal> x258=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x258.valid){
continue;
}
CheckValue<IkReal> x259=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x259.valid){
continue;
}
CheckValue<IkReal> x260=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x260.valid){
continue;
}
CheckValue<IkReal> x261=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x261.valid){
continue;
}
CheckValue<IkReal> x262=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x262.valid){
continue;
}
CheckValue<IkReal> x263=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x263.valid){
continue;
}
CheckValue<IkReal> x264=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x264.valid){
continue;
}
CheckValue<IkReal> x265=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x265.valid){
continue;
}
CheckValue<IkReal> x266=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x266.valid){
continue;
}
CheckValue<IkReal> x267=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x267.valid){
continue;
}
CheckValue<IkReal> x268=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x268.valid){
continue;
}
CheckValue<IkReal> x269=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x269.valid){
continue;
}
CheckValue<IkReal> x270=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x270.valid){
continue;
}
CheckValue<IkReal> x271=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x271.valid){
continue;
}
CheckValue<IkReal> x272=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x272.valid){
continue;
}
CheckValue<IkReal> x273=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x273.valid){
continue;
}
CheckValue<IkReal> x274=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x274.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst2=((((((((-1.0)*(((((((((IKsin(((3.88804)*(x229.value))))*(IKsin(((15.1168550416)*npz*(x230.value))))))+(((IKcos(((3.88804)*(x231.value))))*(IKcos(((15.1168550416)*npz*(x232.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x233.value))))))+(((((((IKcos(((15.1168550416)*npz*(x234.value))))*(IKsin(((3.88804)*(x235.value))))))+(((-1.0)*(IKcos(((3.88804)*(x236.value))))*(IKsin(((15.1168550416)*npz*(x237.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x238.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x239.value))))))+(((-1.0)*(((((((((-1.0)*(IKsin(((3.88804)*(x240.value))))*(IKsin(((15.1168550416)*npz*(x241.value))))))+(((-1.0)*(IKcos(((3.88804)*(x242.value))))*(IKcos(((15.1168550416)*npz*(x243.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x244.value))))))+(((((((IKcos(((15.1168550416)*npz*(x245.value))))*(IKsin(((3.88804)*(x246.value))))))+(((-1.0)*(IKcos(((3.88804)*(x247.value))))*(IKsin(((15.1168550416)*npz*(x248.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x249.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x250.value))))))))*(IKsin(((0.5)*(x251.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x252.value))))*(IKsin(((3.88804)*(x253.value))))))+(((-1.0)*(IKcos(((3.88804)*(x254.value))))*(IKsin(((15.1168550416)*npz*(x255.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x256.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(x257.value))))*(IKsin(((15.1168550416)*npz*(x258.value))))))+(((-1.0)*(IKcos(((3.88804)*(x259.value))))*(IKcos(((15.1168550416)*npz*(x260.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x261.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x262.value))))))+(((((((((((IKsin(((3.88804)*(x263.value))))*(IKsin(((15.1168550416)*npz*(x264.value))))))+(((IKcos(((3.88804)*(x265.value))))*(IKcos(((15.1168550416)*npz*(x266.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x267.value))))))+(((((((IKcos(((15.1168550416)*npz*(x268.value))))*(IKsin(((3.88804)*(x269.value))))))+(((-1.0)*(IKcos(((3.88804)*(x270.value))))*(IKsin(((15.1168550416)*npz*(x271.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x272.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x273.value))))))))*(IKcos(((0.5)*(x274.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
IkReal x275=r22*r22;
IkReal x276=((914.077225394989)*pp);
IkReal x277=(pz*r22);
IkReal x289=r22;
IkReal x278=x289*x289;
IkReal x279=((228.519306348747)*x278);
CheckValue<IkReal> x290=IKPowWithIntegerCheck(((228.519306348747)+((x275*x279))+(((-228.519306348747)*x275))+(((-1.0)*x279))),-1);
if(!x290.valid){
continue;
}
IkReal x280=x290.value;
IkReal x281=((58.7749370759425)*x280);
IkReal x282=((228.519306348747)*x280);
IkReal x283=(npz*x280);
IkReal x284=(x275*x281);
IkReal x285=(x278*x280);
if(((((x275*x276))+(((914.077225394989)*(npz*npz)))+(((-1828.15445078998)*npz*x277))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x276)))) < -0.00001)
continue;
IkReal x286=IKsqrt((((x275*x276))+(((914.077225394989)*(npz*npz)))+(((-1828.15445078998)*npz*x277))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x276))));
IkReal x287=(x278*x281);
IkReal x288=((7.5584275208)*x280*x286);
CheckValue<IkReal> x291=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x291.valid){
continue;
}
CheckValue<IkReal> x292=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x292.valid){
continue;
}
CheckValue<IkReal> x293=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x293.valid){
continue;
}
CheckValue<IkReal> x294=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x294.valid){
continue;
}
CheckValue<IkReal> x295=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x295.valid){
continue;
}
CheckValue<IkReal> x296=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x296.valid){
continue;
}
CheckValue<IkReal> x297=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x297.valid){
continue;
}
CheckValue<IkReal> x298=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x298.valid){
continue;
}
CheckValue<IkReal> x299=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x299.valid){
continue;
}
CheckValue<IkReal> x300=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x300.valid){
continue;
}
CheckValue<IkReal> x301=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x301.valid){
continue;
}
CheckValue<IkReal> x302=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x302.valid){
continue;
}
CheckValue<IkReal> x303=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x303.valid){
continue;
}
CheckValue<IkReal> x304=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x304.valid){
continue;
}
CheckValue<IkReal> x305=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x305.valid){
continue;
}
CheckValue<IkReal> x306=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x306.valid){
continue;
}
CheckValue<IkReal> x307=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x307.valid){
continue;
}
CheckValue<IkReal> x308=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x308.valid){
continue;
}
CheckValue<IkReal> x309=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x309.valid){
continue;
}
CheckValue<IkReal> x310=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x310.valid){
continue;
}
CheckValue<IkReal> x311=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x311.valid){
continue;
}
CheckValue<IkReal> x312=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x312.valid){
continue;
}
CheckValue<IkReal> x313=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x313.valid){
continue;
}
CheckValue<IkReal> x314=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x314.valid){
continue;
}
CheckValue<IkReal> x315=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x315.valid){
continue;
}
CheckValue<IkReal> x316=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x316.valid){
continue;
}
CheckValue<IkReal> x317=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x317.valid){
continue;
}
CheckValue<IkReal> x318=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x318.valid){
continue;
}
CheckValue<IkReal> x319=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x319.valid){
continue;
}
CheckValue<IkReal> x320=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x320.valid){
continue;
}
CheckValue<IkReal> x321=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x321.valid){
continue;
}
CheckValue<IkReal> x322=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x322.valid){
continue;
}
CheckValue<IkReal> x323=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x323.valid){
continue;
}
CheckValue<IkReal> x324=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x324.valid){
continue;
}
CheckValue<IkReal> x325=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x325.valid){
continue;
}
CheckValue<IkReal> x326=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x326.valid){
continue;
}
CheckValue<IkReal> x327=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x327.valid){
continue;
}
CheckValue<IkReal> x328=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x328.valid){
continue;
}
CheckValue<IkReal> x329=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x329.valid){
continue;
}
CheckValue<IkReal> x330=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x330.valid){
continue;
}
CheckValue<IkReal> x331=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x331.valid){
continue;
}
CheckValue<IkReal> x332=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x332.valid){
continue;
}
CheckValue<IkReal> x333=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*x278))+(((-228.519306348747)*x275))+(((228.519306348747)*x275*x278))),-1);
if(!x333.valid){
continue;
}
CheckValue<IkReal> x334=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x275)))+(((-228.519306348747)*(x278)))+(((228.519306348747)*(x275)*(x278)))),-1);
if(!x334.valid){
continue;
}
if((((((-1.0)*x287*(x277)*(x282)))+(((-1.0)*x278*x284*(x287)))+(((-1.0)*npz*x282*(j6)))+(((-1.0)*x278*x284*(x284)))+(((-1.0)*x277*x279*(x291.value)*(x278)*(x284)))+(((-1.0)*x281*(npz)*(x282)))+(((-1.0)*x284*(x278)*(x284)))+(((-1.0)*x277*x282*(x284)))+(((-1.0)*npz*x282*(x277)*(x282)))+(((-1.0)*x284*(x288)))+((x288*(x288)))+(((-1.0)*x284*(x277)*(x282)))+((x277*x279*(x292.value)*(x287)))+((npz*x282*(x284)))+((x287*(x284)))+(((-7.5584275208)*x285*x286*(x293.value)*(npz)*(x279)))+(((-1.0)*x277*x282*(x294.value)*(x277)*(x279)))+((x278*x284*(x295.value)*(npz)*(x279)))+((npz*x279*(x296.value)*(x281)))+((x277*x282*(x277)*(x282)))+(((-7.5584275208)*x277*x282*(x285)*(x286)))+(((-1.0)*npz*x279*(x297.value)*(x284)))+((x287*(x298.value)*(x277)*(x279)))+(((7.5584275208)*x277*x279*(x299.value)*(x285)*(x286)))+(((-1.0)*x277*x279*(x300.value)*(x301.value)*(npz)*(x279)))+((j6*(x288)))+((x277*x282*(x278)*(x284)))+((x278*x284*(x288)))+((x277*x282*(x302.value)*(npz)*(x279)))+(((-1.0)*x277*x282*(x287)))+(((7.5584275208)*x285*x286*(x287)))+((npz*x282*(npz)*(x282)))+(((-7.5584275208)*x278*x284*(x285)*(x286)))+((x288*(x303.value)*(npz)*(x279)))+(((-1.0)*x284*(x304.value)*(npz)*(x279)))+((j6*(x305.value)*(npz)*(x279)))+((x288*(x278)*(x284)))+((x278*x284*(x277)*(x282)))+(((-1.0)*j6*(x284)))+(((57.1298265871868)*x285*x286*(x285)*(x286)))+(((7.5584275208)*x285*x286*(x306.value)*(x277)*(x279)))+((npz*x282*(x287)))+((x278*x284*(x278)*(x284)))+(((-1.0)*x281*(x307.value)*(x277)*(x279)))+((x284*(x308.value)*(x277)*(x279)))+((x281*(x277)*(x282)))+(((-7.5584275208)*j6*(x285)*(x286)))+((x288*(x277)*(x282)))+((x287*(x287)))+((j6*(x277)*(x282)))+((x281*(x288)))+(((-1.0)*npz*x282*(x288)))+((npz*x279*(x309.value)*(x277)*(x282)))+(((-1.0)*x284*(x281)))+((x281*(x310.value)*(npz)*(x279)))+((j6*(x278)*(x284)))+(((-7.5584275208)*x285*x286*(x277)*(x282)))+(((-7.5584275208)*x285*x286*(x278)*(x284)))+(((-1.0)*x287*(j6)))+(((-1.0)*npz*x279*(x311.value)*(x287)))+((j6*(j6)))+((j6*(x281)))+(((-1.0)*x277*x279*(x312.value)*(x281)))+(((-1.0)*x277*x279*(x313.value)*(j6)))+(((-1.0)*x288*(x314.value)*(x277)*(x279)))+(((-1.0)*npz*x282*(x278)*(x284)))+((x288*(j6)))+((npz*x279*(x315.value)*(x288)))+((x281*(j6)))+(((7.5584275208)*x285*x286*(x284)))+((x277*x279*(x316.value)*(npz)*(x282)))+(((-1.0)*x287*(x288)))+((x284*(x284)))+(((-1.0)*x287*(x281)))+((npz*x282*(x317.value)*(x277)*(x279)))+(((-1.0)*x288*(npz)*(x282)))+((x278*x284*(x281)))+((x281*(x278)*(x284)))+((x277*x282*(x281)))+(((-1.0)*j6*(x318.value)*(x277)*(x279)))+(((-1.0)*x287*(x278)*(x284)))+((x278*x284*(j6)))+(((-1.0)*x288*(x284)))+(((-7.5584275208)*x288*(x285)*(x286)))+(((-1.0)*x278*x284*(x319.value)*(x277)*(x279)))+(((-1.0)*x281*(x287)))+(((-1.0)*j6*(x287)))+(((-1.0)*x284*(j6)))+(((7.5584275208)*x287*(x285)*(x286)))+(((-7.5584275208)*x285*x286*(x288)))+((x284*(x287)))+(((-1.0)*j6*(npz)*(x282)))+(((-1.0)*x278*x284*(npz)*(x282)))+(((-1.0)*npz*x282*(x281)))+(((-1.0)*npz*x282*(x320.value)*(npz)*(x279)))+(((-1.0)*x288*(x287)))+(((-1.0)*x281*(x284)))+(((-7.5584275208)*x281*(x285)*(x286)))+(((-1.0)*x277*x279*(x321.value)*(x277)*(x282)))+(((-1.0)*x277*x279*(x322.value)*(x288)))+(((-1.0)*x287*(x323.value)*(npz)*(x279)))+(((7.5584275208)*npz*x282*(x285)*(x286)))+(((-7.5584275208)*x285*x286*(j6)))+(((7.5584275208)*x284*(x285)*(x286)))+((npz*x279*(x324.value)*(j6)))+((x277*x279*(x325.value)*(x326.value)*(x277)*(x279)))+((x277*x282*(j6)))+(((-7.5584275208)*npz*x279*(x327.value)*(x285)*(x286)))+((npz*x279*(x328.value)*(x329.value)*(npz)*(x279)))+(((-1.0)*x277*x282*(npz)*(x282)))+((x287*(npz)*(x282)))+((x284*(npz)*(x282)))+(((-1.0)*npz*x279*(x330.value)*(npz)*(x282)))+((x277*x279*(x331.value)*(x284)))+((npz*x279*(x332.value)*(x278)*(x284)))+((x281*(x281)))+(((-7.5584275208)*x285*x286*(x281)))+(((-1.0)*npz*x279*(x333.value)*(x334.value)*(x277)*(x279)))+((x288*(x281)))+((x277*x282*(x288)))+(((7.5584275208)*x285*x286*(npz)*(x282))))) < -0.00001)
continue;
evalcond[0]=IKsqrt(((((-1.0)*x287*(x277)*(x282)))+(((-1.0)*x278*x284*(x287)))+(((-1.0)*npz*x282*(j6)))+(((-1.0)*x278*x284*(x284)))+(((-1.0)*x277*x279*(x291.value)*(x278)*(x284)))+(((-1.0)*x281*(npz)*(x282)))+(((-1.0)*x284*(x278)*(x284)))+(((-1.0)*x277*x282*(x284)))+(((-1.0)*npz*x282*(x277)*(x282)))+(((-1.0)*x284*(x288)))+((x288*(x288)))+(((-1.0)*x284*(x277)*(x282)))+((x277*x279*(x292.value)*(x287)))+((npz*x282*(x284)))+((x287*(x284)))+(((-7.5584275208)*x285*x286*(x293.value)*(npz)*(x279)))+(((-1.0)*x277*x282*(x294.value)*(x277)*(x279)))+((x278*x284*(x295.value)*(npz)*(x279)))+((npz*x279*(x296.value)*(x281)))+((x277*x282*(x277)*(x282)))+(((-7.5584275208)*x277*x282*(x285)*(x286)))+(((-1.0)*npz*x279*(x297.value)*(x284)))+((x287*(x298.value)*(x277)*(x279)))+(((7.5584275208)*x277*x279*(x299.value)*(x285)*(x286)))+(((-1.0)*x277*x279*(x300.value)*(x301.value)*(npz)*(x279)))+((j6*(x288)))+((x277*x282*(x278)*(x284)))+((x278*x284*(x288)))+((x277*x282*(x302.value)*(npz)*(x279)))+(((-1.0)*x277*x282*(x287)))+(((7.5584275208)*x285*x286*(x287)))+((npz*x282*(npz)*(x282)))+(((-7.5584275208)*x278*x284*(x285)*(x286)))+((x288*(x303.value)*(npz)*(x279)))+(((-1.0)*x284*(x304.value)*(npz)*(x279)))+((j6*(x305.value)*(npz)*(x279)))+((x288*(x278)*(x284)))+((x278*x284*(x277)*(x282)))+(((-1.0)*j6*(x284)))+(((57.1298265871868)*x285*x286*(x285)*(x286)))+(((7.5584275208)*x285*x286*(x306.value)*(x277)*(x279)))+((npz*x282*(x287)))+((x278*x284*(x278)*(x284)))+(((-1.0)*x281*(x307.value)*(x277)*(x279)))+((x284*(x308.value)*(x277)*(x279)))+((x281*(x277)*(x282)))+(((-7.5584275208)*j6*(x285)*(x286)))+((x288*(x277)*(x282)))+((x287*(x287)))+((j6*(x277)*(x282)))+((x281*(x288)))+(((-1.0)*npz*x282*(x288)))+((npz*x279*(x309.value)*(x277)*(x282)))+(((-1.0)*x284*(x281)))+((x281*(x310.value)*(npz)*(x279)))+((j6*(x278)*(x284)))+(((-7.5584275208)*x285*x286*(x277)*(x282)))+(((-7.5584275208)*x285*x286*(x278)*(x284)))+(((-1.0)*x287*(j6)))+(((-1.0)*npz*x279*(x311.value)*(x287)))+((j6*(j6)))+((j6*(x281)))+(((-1.0)*x277*x279*(x312.value)*(x281)))+(((-1.0)*x277*x279*(x313.value)*(j6)))+(((-1.0)*x288*(x314.value)*(x277)*(x279)))+(((-1.0)*npz*x282*(x278)*(x284)))+((x288*(j6)))+((npz*x279*(x315.value)*(x288)))+((x281*(j6)))+(((7.5584275208)*x285*x286*(x284)))+((x277*x279*(x316.value)*(npz)*(x282)))+(((-1.0)*x287*(x288)))+((x284*(x284)))+(((-1.0)*x287*(x281)))+((npz*x282*(x317.value)*(x277)*(x279)))+(((-1.0)*x288*(npz)*(x282)))+((x278*x284*(x281)))+((x281*(x278)*(x284)))+((x277*x282*(x281)))+(((-1.0)*j6*(x318.value)*(x277)*(x279)))+(((-1.0)*x287*(x278)*(x284)))+((x278*x284*(j6)))+(((-1.0)*x288*(x284)))+(((-7.5584275208)*x288*(x285)*(x286)))+(((-1.0)*x278*x284*(x319.value)*(x277)*(x279)))+(((-1.0)*x281*(x287)))+(((-1.0)*j6*(x287)))+(((-1.0)*x284*(j6)))+(((7.5584275208)*x287*(x285)*(x286)))+(((-7.5584275208)*x285*x286*(x288)))+((x284*(x287)))+(((-1.0)*j6*(npz)*(x282)))+(((-1.0)*x278*x284*(npz)*(x282)))+(((-1.0)*npz*x282*(x281)))+(((-1.0)*npz*x282*(x320.value)*(npz)*(x279)))+(((-1.0)*x288*(x287)))+(((-1.0)*x281*(x284)))+(((-7.5584275208)*x281*(x285)*(x286)))+(((-1.0)*x277*x279*(x321.value)*(x277)*(x282)))+(((-1.0)*x277*x279*(x322.value)*(x288)))+(((-1.0)*x287*(x323.value)*(npz)*(x279)))+(((7.5584275208)*npz*x282*(x285)*(x286)))+(((-7.5584275208)*x285*x286*(j6)))+(((7.5584275208)*x284*(x285)*(x286)))+((npz*x279*(x324.value)*(j6)))+((x277*x279*(x325.value)*(x326.value)*(x277)*(x279)))+((x277*x282*(j6)))+(((-7.5584275208)*npz*x279*(x327.value)*(x285)*(x286)))+((npz*x279*(x328.value)*(x329.value)*(npz)*(x279)))+(((-1.0)*x277*x282*(npz)*(x282)))+((x287*(npz)*(x282)))+((x284*(npz)*(x282)))+(((-1.0)*npz*x279*(x330.value)*(npz)*(x282)))+((x277*x279*(x331.value)*(x284)))+((npz*x279*(x332.value)*(x278)*(x284)))+((x281*(x281)))+(((-7.5584275208)*x285*x286*(x281)))+(((-1.0)*npz*x279*(x333.value)*(x334.value)*(x277)*(x279)))+((x288*(x281)))+((x277*x282*(x288)))+(((7.5584275208)*x285*x286*(npz)*(x282)))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x335=r22*r22;
IkReal x336=((914.077225394989)*pp);
IkReal x337=(pz*r22);
IkReal x338=x179;
IkReal x339=((3.88804)*x338);
IkReal x340=((15.11685504)*x338);
IkReal x341=((15.1168550416)*x338);
IkReal x342=(x335*x339);
if(((((x335*x336))+(((-1828.15445078998)*npz*x337))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x336)))) < -0.00001)
continue;
IkReal x343=((0.5)*x338*(IKsqrt((((x335*x336))+(((-1828.15445078998)*npz*x337))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x336))))));
IkReal x344=(x339+x343);
sj6=gconst1;
cj6=gconst2;
j6=((((-1.0)*npz*x340))+((x337*x340))+x344+(((-1.0)*x342)));
IkReal gconst0=((((-1.0)*npz*x341))+((x337*x341))+x344+(((-1.0)*x342)));
CheckValue<IkReal> x345=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x345.valid){
continue;
}
CheckValue<IkReal> x346=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x346.valid){
continue;
}
CheckValue<IkReal> x347=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x347.valid){
continue;
}
CheckValue<IkReal> x348=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x348.valid){
continue;
}
CheckValue<IkReal> x349=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x349.valid){
continue;
}
CheckValue<IkReal> x350=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x350.valid){
continue;
}
CheckValue<IkReal> x351=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x351.valid){
continue;
}
CheckValue<IkReal> x352=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x352.valid){
continue;
}
CheckValue<IkReal> x353=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x353.valid){
continue;
}
CheckValue<IkReal> x354=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x354.valid){
continue;
}
CheckValue<IkReal> x355=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x355.valid){
continue;
}
CheckValue<IkReal> x356=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x356.valid){
continue;
}
CheckValue<IkReal> x357=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x357.valid){
continue;
}
CheckValue<IkReal> x358=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x358.valid){
continue;
}
CheckValue<IkReal> x359=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x359.valid){
continue;
}
CheckValue<IkReal> x360=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x360.valid){
continue;
}
CheckValue<IkReal> x361=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x361.valid){
continue;
}
CheckValue<IkReal> x362=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x362.valid){
continue;
}
CheckValue<IkReal> x363=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x363.valid){
continue;
}
CheckValue<IkReal> x364=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x364.valid){
continue;
}
CheckValue<IkReal> x365=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x365.valid){
continue;
}
CheckValue<IkReal> x366=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x366.valid){
continue;
}
CheckValue<IkReal> x367=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x367.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x368=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x368.valid){
continue;
}
CheckValue<IkReal> x369=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x369.valid){
continue;
}
CheckValue<IkReal> x370=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x370.valid){
continue;
}
CheckValue<IkReal> x371=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x371.valid){
continue;
}
CheckValue<IkReal> x372=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x372.valid){
continue;
}
CheckValue<IkReal> x373=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x373.valid){
continue;
}
CheckValue<IkReal> x374=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x374.valid){
continue;
}
CheckValue<IkReal> x375=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x375.valid){
continue;
}
CheckValue<IkReal> x376=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x376.valid){
continue;
}
CheckValue<IkReal> x377=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x377.valid){
continue;
}
CheckValue<IkReal> x378=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x378.valid){
continue;
}
CheckValue<IkReal> x379=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x379.valid){
continue;
}
CheckValue<IkReal> x380=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x380.valid){
continue;
}
CheckValue<IkReal> x381=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x381.valid){
continue;
}
CheckValue<IkReal> x382=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x382.valid){
continue;
}
CheckValue<IkReal> x383=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x383.valid){
continue;
}
CheckValue<IkReal> x384=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x384.valid){
continue;
}
CheckValue<IkReal> x385=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x385.valid){
continue;
}
CheckValue<IkReal> x386=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x386.valid){
continue;
}
CheckValue<IkReal> x387=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x387.valid){
continue;
}
CheckValue<IkReal> x388=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x388.valid){
continue;
}
CheckValue<IkReal> x389=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x389.valid){
continue;
}
CheckValue<IkReal> x390=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x390.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst1=((((((((((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x345.value))))*(IKsin(((3.88804)*(x346.value))))))+(((-1.0)*(IKcos(((3.88804)*(x347.value))))*(IKsin(((15.1168550416)*npz*(x348.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x349.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(x350.value))))*(IKsin(((15.1168550416)*npz*(x351.value))))))+(((-1.0)*(IKcos(((3.88804)*(x352.value))))*(IKcos(((15.1168550416)*npz*(x353.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x354.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x355.value))))))+(((((((((((IKsin(((3.88804)*(x356.value))))*(IKsin(((15.1168550416)*npz*(x357.value))))))+(((IKcos(((3.88804)*(x358.value))))*(IKcos(((15.1168550416)*npz*(x359.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x360.value))))))+(((((((IKcos(((15.1168550416)*npz*(x361.value))))*(IKsin(((3.88804)*(x362.value))))))+(((-1.0)*(IKcos(((3.88804)*(x363.value))))*(IKsin(((15.1168550416)*npz*(x364.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x365.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x366.value))))))))*(IKsin(((0.5)*(x367.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((((((((((IKsin(((3.88804)*(x368.value))))*(IKsin(((15.1168550416)*npz*(x369.value))))))+(((IKcos(((3.88804)*(x370.value))))*(IKcos(((15.1168550416)*npz*(x371.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x372.value))))))+(((((((IKcos(((15.1168550416)*npz*(x373.value))))*(IKsin(((3.88804)*(x374.value))))))+(((-1.0)*(IKcos(((3.88804)*(x375.value))))*(IKsin(((15.1168550416)*npz*(x376.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x377.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x378.value))))))+(((((((((((-1.0)*(IKsin(((3.88804)*(x379.value))))*(IKsin(((15.1168550416)*npz*(x380.value))))))+(((-1.0)*(IKcos(((3.88804)*(x381.value))))*(IKcos(((15.1168550416)*npz*(x382.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x383.value))))))+(((((((IKcos(((15.1168550416)*npz*(x384.value))))*(IKsin(((3.88804)*(x385.value))))))+(((-1.0)*(IKcos(((3.88804)*(x386.value))))*(IKsin(((15.1168550416)*npz*(x387.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x388.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x389.value))))))))*(IKcos(((0.5)*(x390.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
CheckValue<IkReal> x391=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x391.valid){
continue;
}
CheckValue<IkReal> x392=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x392.valid){
continue;
}
CheckValue<IkReal> x393=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x393.valid){
continue;
}
CheckValue<IkReal> x394=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x394.valid){
continue;
}
CheckValue<IkReal> x395=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x395.valid){
continue;
}
CheckValue<IkReal> x396=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x396.valid){
continue;
}
CheckValue<IkReal> x397=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x397.valid){
continue;
}
CheckValue<IkReal> x398=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x398.valid){
continue;
}
CheckValue<IkReal> x399=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x399.valid){
continue;
}
CheckValue<IkReal> x400=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x400.valid){
continue;
}
CheckValue<IkReal> x401=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x401.valid){
continue;
}
CheckValue<IkReal> x402=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x402.valid){
continue;
}
CheckValue<IkReal> x403=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x403.valid){
continue;
}
CheckValue<IkReal> x404=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x404.valid){
continue;
}
CheckValue<IkReal> x405=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x405.valid){
continue;
}
CheckValue<IkReal> x406=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x406.valid){
continue;
}
CheckValue<IkReal> x407=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x407.valid){
continue;
}
CheckValue<IkReal> x408=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x408.valid){
continue;
}
CheckValue<IkReal> x409=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x409.valid){
continue;
}
CheckValue<IkReal> x410=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x410.valid){
continue;
}
CheckValue<IkReal> x411=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x411.valid){
continue;
}
CheckValue<IkReal> x412=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x412.valid){
continue;
}
CheckValue<IkReal> x413=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x413.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x414=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x414.valid){
continue;
}
CheckValue<IkReal> x415=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x415.valid){
continue;
}
CheckValue<IkReal> x416=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x416.valid){
continue;
}
CheckValue<IkReal> x417=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x417.valid){
continue;
}
CheckValue<IkReal> x418=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x418.valid){
continue;
}
CheckValue<IkReal> x419=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x419.valid){
continue;
}
CheckValue<IkReal> x420=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x420.valid){
continue;
}
CheckValue<IkReal> x421=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x421.valid){
continue;
}
CheckValue<IkReal> x422=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x422.valid){
continue;
}
CheckValue<IkReal> x423=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x423.valid){
continue;
}
CheckValue<IkReal> x424=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x424.valid){
continue;
}
CheckValue<IkReal> x425=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x425.valid){
continue;
}
CheckValue<IkReal> x426=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x426.valid){
continue;
}
CheckValue<IkReal> x427=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x427.valid){
continue;
}
CheckValue<IkReal> x428=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x428.valid){
continue;
}
CheckValue<IkReal> x429=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x429.valid){
continue;
}
CheckValue<IkReal> x430=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x430.valid){
continue;
}
CheckValue<IkReal> x431=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x431.valid){
continue;
}
CheckValue<IkReal> x432=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x432.valid){
continue;
}
CheckValue<IkReal> x433=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x433.valid){
continue;
}
CheckValue<IkReal> x434=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x434.valid){
continue;
}
CheckValue<IkReal> x435=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x435.valid){
continue;
}
CheckValue<IkReal> x436=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x436.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst2=((((((((-1.0)*(((((((((IKsin(((3.88804)*(x391.value))))*(IKsin(((15.1168550416)*npz*(x392.value))))))+(((IKcos(((3.88804)*(x393.value))))*(IKcos(((15.1168550416)*npz*(x394.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x395.value))))))+(((((((IKcos(((15.1168550416)*npz*(x396.value))))*(IKsin(((3.88804)*(x397.value))))))+(((-1.0)*(IKcos(((3.88804)*(x398.value))))*(IKsin(((15.1168550416)*npz*(x399.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x400.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x401.value))))))+(((-1.0)*(((((((((-1.0)*(IKsin(((3.88804)*(x402.value))))*(IKsin(((15.1168550416)*npz*(x403.value))))))+(((-1.0)*(IKcos(((3.88804)*(x404.value))))*(IKcos(((15.1168550416)*npz*(x405.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x406.value))))))+(((((((IKcos(((15.1168550416)*npz*(x407.value))))*(IKsin(((3.88804)*(x408.value))))))+(((-1.0)*(IKcos(((3.88804)*(x409.value))))*(IKsin(((15.1168550416)*npz*(x410.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x411.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x412.value))))))))*(IKsin(((0.5)*(x413.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x414.value))))*(IKsin(((3.88804)*(x415.value))))))+(((-1.0)*(IKcos(((3.88804)*(x416.value))))*(IKsin(((15.1168550416)*npz*(x417.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x418.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(x419.value))))*(IKsin(((15.1168550416)*npz*(x420.value))))))+(((-1.0)*(IKcos(((3.88804)*(x421.value))))*(IKcos(((15.1168550416)*npz*(x422.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x423.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x424.value))))))+(((((((((((IKsin(((3.88804)*(x425.value))))*(IKsin(((15.1168550416)*npz*(x426.value))))))+(((IKcos(((3.88804)*(x427.value))))*(IKcos(((15.1168550416)*npz*(x428.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x429.value))))))+(((((((IKcos(((15.1168550416)*npz*(x430.value))))*(IKsin(((3.88804)*(x431.value))))))+(((-1.0)*(IKcos(((3.88804)*(x432.value))))*(IKsin(((15.1168550416)*npz*(x433.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x434.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x435.value))))))))*(IKcos(((0.5)*(x436.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
IkReal x437=(cj2*sj1);
IkReal x438=(cj1*cj2);
IkReal x439=(cj1*sj2);
IkReal x440=(sj1*sj2);
j0eval[0]=((1.0)+(((-1.0)*x439))+(((8.625)*sj1))+x437+(((8.5)*x440))+(((8.5)*x438)));
j0eval[1]=((-1.0)+(r22*r22));
j0eval[2]=IKsign(((0.04)+(((0.34)*x440))+(((0.345)*sj1))+(((-0.04)*x439))+(((0.04)*x437))+(((0.34)*x438))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x441=r22*r22;
IkReal x442=((914.077225394989)*pp);
IkReal x443=(pz*r22);
IkReal x444=x179;
IkReal x445=((3.88804)*x444);
IkReal x446=((15.11685504)*x444);
IkReal x447=((15.1168550416)*x444);
IkReal x448=(x441*x445);
if((((((-1.0)*x442))+(((-1828.15445078998)*npz*x443))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+((x441*x442)))) < -0.00001)
continue;
IkReal x449=((0.5)*x444*(IKsqrt(((((-1.0)*x442))+(((-1828.15445078998)*npz*x443))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+((x441*x442))))));
IkReal x450=(x449+x445);
sj6=gconst1;
cj6=gconst2;
j6=((((-1.0)*x448))+(((-1.0)*npz*x446))+x450+((x443*x446)));
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal gconst0=((((-1.0)*x448))+(((-1.0)*npz*x447))+x450+((x443*x447)));
CheckValue<IkReal> x451=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x451.valid){
continue;
}
CheckValue<IkReal> x452=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x452.valid){
continue;
}
CheckValue<IkReal> x453=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x453.valid){
continue;
}
CheckValue<IkReal> x454=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x454.valid){
continue;
}
CheckValue<IkReal> x455=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x455.valid){
continue;
}
CheckValue<IkReal> x456=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x456.valid){
continue;
}
CheckValue<IkReal> x457=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x457.valid){
continue;
}
CheckValue<IkReal> x458=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x458.valid){
continue;
}
CheckValue<IkReal> x459=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x459.valid){
continue;
}
CheckValue<IkReal> x460=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x460.valid){
continue;
}
CheckValue<IkReal> x461=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x461.valid){
continue;
}
CheckValue<IkReal> x462=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x462.valid){
continue;
}
CheckValue<IkReal> x463=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x463.valid){
continue;
}
CheckValue<IkReal> x464=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x464.valid){
continue;
}
CheckValue<IkReal> x465=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x465.valid){
continue;
}
CheckValue<IkReal> x466=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x466.valid){
continue;
}
CheckValue<IkReal> x467=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x467.valid){
continue;
}
CheckValue<IkReal> x468=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x468.valid){
continue;
}
CheckValue<IkReal> x469=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x469.valid){
continue;
}
CheckValue<IkReal> x470=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x470.valid){
continue;
}
CheckValue<IkReal> x471=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x471.valid){
continue;
}
CheckValue<IkReal> x472=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x472.valid){
continue;
}
CheckValue<IkReal> x473=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x473.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x474=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x474.valid){
continue;
}
CheckValue<IkReal> x475=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x475.valid){
continue;
}
CheckValue<IkReal> x476=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x476.valid){
continue;
}
CheckValue<IkReal> x477=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x477.valid){
continue;
}
CheckValue<IkReal> x478=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x478.valid){
continue;
}
CheckValue<IkReal> x479=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x479.valid){
continue;
}
CheckValue<IkReal> x480=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x480.valid){
continue;
}
CheckValue<IkReal> x481=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x481.valid){
continue;
}
CheckValue<IkReal> x482=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x482.valid){
continue;
}
CheckValue<IkReal> x483=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x483.valid){
continue;
}
CheckValue<IkReal> x484=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x484.valid){
continue;
}
CheckValue<IkReal> x485=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x485.valid){
continue;
}
CheckValue<IkReal> x486=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x486.valid){
continue;
}
CheckValue<IkReal> x487=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x487.valid){
continue;
}
CheckValue<IkReal> x488=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x488.valid){
continue;
}
CheckValue<IkReal> x489=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x489.valid){
continue;
}
CheckValue<IkReal> x490=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x490.valid){
continue;
}
CheckValue<IkReal> x491=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x491.valid){
continue;
}
CheckValue<IkReal> x492=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x492.valid){
continue;
}
CheckValue<IkReal> x493=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x493.valid){
continue;
}
CheckValue<IkReal> x494=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x494.valid){
continue;
}
CheckValue<IkReal> x495=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x495.valid){
continue;
}
CheckValue<IkReal> x496=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x496.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst1=((((((((((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x451.value))))*(IKsin(((3.88804)*(x452.value))))))+(((-1.0)*(IKcos(((3.88804)*(x453.value))))*(IKsin(((15.1168550416)*npz*(x454.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x455.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(x456.value))))*(IKsin(((15.1168550416)*npz*(x457.value))))))+(((-1.0)*(IKcos(((3.88804)*(x458.value))))*(IKcos(((15.1168550416)*npz*(x459.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x460.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x461.value))))))+(((((((((((IKsin(((3.88804)*(x462.value))))*(IKsin(((15.1168550416)*npz*(x463.value))))))+(((IKcos(((3.88804)*(x464.value))))*(IKcos(((15.1168550416)*npz*(x465.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x466.value))))))+(((((((IKcos(((15.1168550416)*npz*(x467.value))))*(IKsin(((3.88804)*(x468.value))))))+(((-1.0)*(IKcos(((3.88804)*(x469.value))))*(IKsin(((15.1168550416)*npz*(x470.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x471.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x472.value))))))))*(IKsin(((0.5)*(x473.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((((((((((IKsin(((3.88804)*(x474.value))))*(IKsin(((15.1168550416)*npz*(x475.value))))))+(((IKcos(((3.88804)*(x476.value))))*(IKcos(((15.1168550416)*npz*(x477.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x478.value))))))+(((((((IKcos(((15.1168550416)*npz*(x479.value))))*(IKsin(((3.88804)*(x480.value))))))+(((-1.0)*(IKcos(((3.88804)*(x481.value))))*(IKsin(((15.1168550416)*npz*(x482.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x483.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x484.value))))))+(((((((((((-1.0)*(IKsin(((3.88804)*(x485.value))))*(IKsin(((15.1168550416)*npz*(x486.value))))))+(((-1.0)*(IKcos(((3.88804)*(x487.value))))*(IKcos(((15.1168550416)*npz*(x488.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x489.value))))))+(((((((IKcos(((15.1168550416)*npz*(x490.value))))*(IKsin(((3.88804)*(x491.value))))))+(((-1.0)*(IKcos(((3.88804)*(x492.value))))*(IKsin(((15.1168550416)*npz*(x493.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x494.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x495.value))))))))*(IKcos(((0.5)*(x496.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
CheckValue<IkReal> x497=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x497.valid){
continue;
}
CheckValue<IkReal> x498=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x498.valid){
continue;
}
CheckValue<IkReal> x499=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x499.valid){
continue;
}
CheckValue<IkReal> x500=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x500.valid){
continue;
}
CheckValue<IkReal> x501=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x501.valid){
continue;
}
CheckValue<IkReal> x502=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x502.valid){
continue;
}
CheckValue<IkReal> x503=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x503.valid){
continue;
}
CheckValue<IkReal> x504=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x504.valid){
continue;
}
CheckValue<IkReal> x505=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x505.valid){
continue;
}
CheckValue<IkReal> x506=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x506.valid){
continue;
}
CheckValue<IkReal> x507=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x507.valid){
continue;
}
CheckValue<IkReal> x508=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x508.valid){
continue;
}
CheckValue<IkReal> x509=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x509.valid){
continue;
}
CheckValue<IkReal> x510=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x510.valid){
continue;
}
CheckValue<IkReal> x511=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x511.valid){
continue;
}
CheckValue<IkReal> x512=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x512.valid){
continue;
}
CheckValue<IkReal> x513=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x513.valid){
continue;
}
CheckValue<IkReal> x514=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x514.valid){
continue;
}
CheckValue<IkReal> x515=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x515.valid){
continue;
}
CheckValue<IkReal> x516=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x516.valid){
continue;
}
CheckValue<IkReal> x517=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x517.valid){
continue;
}
CheckValue<IkReal> x518=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x518.valid){
continue;
}
CheckValue<IkReal> x519=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x519.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x520=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x520.valid){
continue;
}
CheckValue<IkReal> x521=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x521.valid){
continue;
}
CheckValue<IkReal> x522=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x522.valid){
continue;
}
CheckValue<IkReal> x523=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x523.valid){
continue;
}
CheckValue<IkReal> x524=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x524.valid){
continue;
}
CheckValue<IkReal> x525=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x525.valid){
continue;
}
CheckValue<IkReal> x526=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x526.valid){
continue;
}
CheckValue<IkReal> x527=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x527.valid){
continue;
}
CheckValue<IkReal> x528=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x528.valid){
continue;
}
CheckValue<IkReal> x529=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x529.valid){
continue;
}
CheckValue<IkReal> x530=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x530.valid){
continue;
}
CheckValue<IkReal> x531=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x531.valid){
continue;
}
CheckValue<IkReal> x532=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x532.valid){
continue;
}
CheckValue<IkReal> x533=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x533.valid){
continue;
}
CheckValue<IkReal> x534=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x534.valid){
continue;
}
CheckValue<IkReal> x535=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x535.valid){
continue;
}
CheckValue<IkReal> x536=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x536.valid){
continue;
}
CheckValue<IkReal> x537=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x537.valid){
continue;
}
CheckValue<IkReal> x538=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x538.valid){
continue;
}
CheckValue<IkReal> x539=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x539.valid){
continue;
}
CheckValue<IkReal> x540=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x540.valid){
continue;
}
CheckValue<IkReal> x541=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x541.valid){
continue;
}
CheckValue<IkReal> x542=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x542.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst2=((((((((-1.0)*(((((((((IKsin(((3.88804)*(x497.value))))*(IKsin(((15.1168550416)*npz*(x498.value))))))+(((IKcos(((3.88804)*(x499.value))))*(IKcos(((15.1168550416)*npz*(x500.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x501.value))))))+(((((((IKcos(((15.1168550416)*npz*(x502.value))))*(IKsin(((3.88804)*(x503.value))))))+(((-1.0)*(IKcos(((3.88804)*(x504.value))))*(IKsin(((15.1168550416)*npz*(x505.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x506.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x507.value))))))+(((-1.0)*(((((((((-1.0)*(IKsin(((3.88804)*(x508.value))))*(IKsin(((15.1168550416)*npz*(x509.value))))))+(((-1.0)*(IKcos(((3.88804)*(x510.value))))*(IKcos(((15.1168550416)*npz*(x511.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x512.value))))))+(((((((IKcos(((15.1168550416)*npz*(x513.value))))*(IKsin(((3.88804)*(x514.value))))))+(((-1.0)*(IKcos(((3.88804)*(x515.value))))*(IKsin(((15.1168550416)*npz*(x516.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x517.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x518.value))))))))*(IKsin(((0.5)*(x519.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x520.value))))*(IKsin(((3.88804)*(x521.value))))))+(((-1.0)*(IKcos(((3.88804)*(x522.value))))*(IKsin(((15.1168550416)*npz*(x523.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x524.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(x525.value))))*(IKsin(((15.1168550416)*npz*(x526.value))))))+(((-1.0)*(IKcos(((3.88804)*(x527.value))))*(IKcos(((15.1168550416)*npz*(x528.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x529.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x530.value))))))+(((((((((((IKsin(((3.88804)*(x531.value))))*(IKsin(((15.1168550416)*npz*(x532.value))))))+(((IKcos(((3.88804)*(x533.value))))*(IKcos(((15.1168550416)*npz*(x534.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x535.value))))))+(((((((IKcos(((15.1168550416)*npz*(x536.value))))*(IKsin(((3.88804)*(x537.value))))))+(((-1.0)*(IKcos(((3.88804)*(x538.value))))*(IKsin(((15.1168550416)*npz*(x539.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x540.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x541.value))))))))*(IKcos(((0.5)*(x542.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
IkReal x543=r22*r22;
j0eval[0]=((1.0)+(x543*x543)+(((-2.0)*x543)));
j0eval[1]=((-1.0)+x543);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x545=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x545.valid){
continue;
}
CheckValue<IkReal> x546=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x546.valid){
continue;
}
CheckValue<IkReal> x547=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x547.valid){
continue;
}
CheckValue<IkReal> x548=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x548.valid){
continue;
}
CheckValue<IkReal> x549=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x549.valid){
continue;
}
CheckValue<IkReal> x550=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x550.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x551=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x551.valid){
continue;
}
CheckValue<IkReal> x552=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x552.valid){
continue;
}
CheckValue<IkReal> x553=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x553.valid){
continue;
}
CheckValue<IkReal> x554=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x554.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x555=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x555.valid){
continue;
}
CheckValue<IkReal> x556=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x556.valid){
continue;
}
CheckValue<IkReal> x557=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x557.valid){
continue;
}
CheckValue<IkReal> x558=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x558.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x559=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x559.valid){
continue;
}
CheckValue<IkReal> x560=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x560.valid){
continue;
}
CheckValue<IkReal> x561=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x561.valid){
continue;
}
CheckValue<IkReal> x562=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x562.valid){
continue;
}
CheckValue<IkReal> x563=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x563.valid){
continue;
}
CheckValue<IkReal> x564=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x564.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x565=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x565.valid){
continue;
}
CheckValue<IkReal> x566=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x566.valid){
continue;
}
CheckValue<IkReal> x567=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x567.valid){
continue;
}
CheckValue<IkReal> x568=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x568.valid){
continue;
}
CheckValue<IkReal> x569=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x569.valid){
continue;
}
CheckValue<IkReal> x570=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x570.valid){
continue;
}
CheckValue<IkReal> x571=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x571.valid){
continue;
}
CheckValue<IkReal> x572=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x572.valid){
continue;
}
CheckValue<IkReal> x573=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x574.valid){
continue;
}
CheckValue<IkReal> x575=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x575.valid){
continue;
}
CheckValue<IkReal> x576=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x576.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x577=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x577.valid){
continue;
}
CheckValue<IkReal> x578=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x578.valid){
continue;
}
CheckValue<IkReal> x579=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x579.valid){
continue;
}
CheckValue<IkReal> x580=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x580.valid){
continue;
}
CheckValue<IkReal> x581=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x581.valid){
continue;
}
CheckValue<IkReal> x582=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x582.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x583=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x583.valid){
continue;
}
CheckValue<IkReal> x584=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x584.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x585=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x585.valid){
continue;
}
CheckValue<IkReal> x586=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x586.valid){
continue;
}
CheckValue<IkReal> x587=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x587.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x588=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x588.valid){
continue;
}
CheckValue<IkReal> x589=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x589.valid){
continue;
}
CheckValue<IkReal> x590=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x590.valid){
continue;
}
CheckValue<IkReal> x591=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x591.valid){
continue;
}
CheckValue<IkReal> x592=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x592.valid){
continue;
}
CheckValue<IkReal> x593=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x593.valid){
continue;
}
CheckValue<IkReal> x594=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x594.valid){
continue;
}
CheckValue<IkReal> x595=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x595.valid){
continue;
}
CheckValue<IkReal> x596=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x596.valid){
continue;
}
CheckValue<IkReal> x597=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x597.valid){
continue;
}
CheckValue<IkReal> x598=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x598.valid){
continue;
}
CheckValue<IkReal> x599=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x599.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x600=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x600.valid){
continue;
}
CheckValue<IkReal> x601=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x601.valid){
continue;
}
CheckValue<IkReal> x602=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x602.valid){
continue;
}
CheckValue<IkReal> x603=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x603.valid){
continue;
}
CheckValue<IkReal> x604=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x604.valid){
continue;
}
CheckValue<IkReal> x605=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x605.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x606=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x606.valid){
continue;
}
CheckValue<IkReal> x607=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x607.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x608=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x608.valid){
continue;
}
CheckValue<IkReal> x609=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x609.valid){
continue;
}
CheckValue<IkReal> x610=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x610.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x611=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x611.valid){
continue;
}
CheckValue<IkReal> x612=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x612.valid){
continue;
}
CheckValue<IkReal> x613=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x613.valid){
continue;
}
CheckValue<IkReal> x614=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x614.valid){
continue;
}
CheckValue<IkReal> x615=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x615.valid){
continue;
}
CheckValue<IkReal> x616=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x616.valid){
continue;
}
CheckValue<IkReal> x617=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x617.valid){
continue;
}
CheckValue<IkReal> x618=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x618.valid){
continue;
}
CheckValue<IkReal> x619=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x619.valid){
continue;
}
CheckValue<IkReal> x620=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x620.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x621=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x621.valid){
continue;
}
CheckValue<IkReal> x622=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x622.valid){
continue;
}
CheckValue<IkReal> x623=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x623.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x624=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x624.valid){
continue;
}
CheckValue<IkReal> x625=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x625.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x626=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x626.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x627=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x627.valid){
continue;
}
CheckValue<IkReal> x628=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x628.valid){
continue;
}
CheckValue<IkReal> x629=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x629.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x630=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x630.valid){
continue;
}
CheckValue<IkReal> x631=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x631.valid){
continue;
}
CheckValue<IkReal> x632=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x632.valid){
continue;
}
CheckValue<IkReal> x633=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x633.valid){
continue;
}
CheckValue<IkReal> x634=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x634.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x635=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x635.valid){
continue;
}
CheckValue<IkReal> x636=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x636.valid){
continue;
}
CheckValue<IkReal> x637=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x637.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x638=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x638.valid){
continue;
}
CheckValue<IkReal> x639=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x639.valid){
continue;
}
CheckValue<IkReal> x640=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x640.valid){
continue;
}
CheckValue<IkReal> x641=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x641.valid){
continue;
}
CheckValue<IkReal> x642=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x642.valid){
continue;
}
CheckValue<IkReal> x643=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x643.valid){
continue;
}
CheckValue<IkReal> x644=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x644.valid){
continue;
}
CheckValue<IkReal> x645=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x645.valid){
continue;
}
CheckValue<IkReal> x646=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x646.valid){
continue;
}
CheckValue<IkReal> x647=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x647.valid){
continue;
}
CheckValue<IkReal> x648=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x648.valid){
continue;
}
CheckValue<IkReal> x649=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x649.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x650=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x650.valid){
continue;
}
CheckValue<IkReal> x651=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x651.valid){
continue;
}
CheckValue<IkReal> x652=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x652.valid){
continue;
}
CheckValue<IkReal> x653=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x653.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x654=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x654.valid){
continue;
}
CheckValue<IkReal> x655=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x655.valid){
continue;
}
CheckValue<IkReal> x656=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x656.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x657=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x657.valid){
continue;
}
CheckValue<IkReal> x658=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x658.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x659=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x659.valid){
continue;
}
CheckValue<IkReal> x660=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x660.valid){
continue;
}
CheckValue<IkReal> x661=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x661.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x662=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x662.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x663=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x663.valid){
continue;
}
CheckValue<IkReal> x664=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x664.valid){
continue;
}
CheckValue<IkReal> x665=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x665.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x666=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x666.valid){
continue;
}
CheckValue<IkReal> x667=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x667.valid){
continue;
}
CheckValue<IkReal> x668=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x668.valid){
continue;
}
CheckValue<IkReal> x669=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x669.valid){
continue;
}
CheckValue<IkReal> x670=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x670.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x671=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x671.valid){
continue;
}
CheckValue<IkReal> x672=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x672.valid){
continue;
}
CheckValue<IkReal> x673=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x673.valid){
continue;
}
CheckValue<IkReal> x674=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x674.valid){
continue;
}
CheckValue<IkReal> x675=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x675.valid){
continue;
}
CheckValue<IkReal> x676=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x676.valid){
continue;
}
CheckValue<IkReal> x677=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x677.valid){
continue;
}
CheckValue<IkReal> x678=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x678.valid){
continue;
}
CheckValue<IkReal> x679=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x679.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x680=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x680.valid){
continue;
}
CheckValue<IkReal> x681=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x681.valid){
continue;
}
CheckValue<IkReal> x682=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x682.valid){
continue;
}
CheckValue<IkReal> x683=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x683.valid){
continue;
}
CheckValue<IkReal> x684=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x684.valid){
continue;
}
CheckValue<IkReal> x685=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x685.valid){
continue;
}
CheckValue<IkReal> x686=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x686.valid){
continue;
}
CheckValue<IkReal> x687=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x687.valid){
continue;
}
CheckValue<IkReal> x688=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x688.valid){
continue;
}
CheckValue<IkReal> x689=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x689.valid){
continue;
}
CheckValue<IkReal> x690=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x690.valid){
continue;
}
CheckValue<IkReal> x691=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x691.valid){
continue;
}
CheckValue<IkReal> x692=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x692.valid){
continue;
}
CheckValue<IkReal> x693=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x693.valid){
continue;
}
CheckValue<IkReal> x694=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x694.valid){
continue;
}
CheckValue<IkReal> x695=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x695.valid){
continue;
}
CheckValue<IkReal> x696=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x696.valid){
continue;
}
CheckValue<IkReal> x697=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x697.valid){
continue;
}
CheckValue<IkReal> x698=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x698.valid){
continue;
}
CheckValue<IkReal> x699=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x699.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x700=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x700.valid){
continue;
}
CheckValue<IkReal> x701=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x701.valid){
continue;
}
CheckValue<IkReal> x702=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x702.valid){
continue;
}
CheckValue<IkReal> x703=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x703.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x704=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x704.valid){
continue;
}
CheckValue<IkReal> x705=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x705.valid){
continue;
}
CheckValue<IkReal> x706=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x706.valid){
continue;
}
CheckValue<IkReal> x707=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x707.valid){
continue;
}
CheckValue<IkReal> x708=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x708.valid){
continue;
}
CheckValue<IkReal> x709=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x709.valid){
continue;
}
CheckValue<IkReal> x710=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x710.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x711=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x711.valid){
continue;
}
CheckValue<IkReal> x712=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x712.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x713=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x713.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x714=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x714.valid){
continue;
}
CheckValue<IkReal> x715=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x715.valid){
continue;
}
CheckValue<IkReal> x716=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x716.valid){
continue;
}
CheckValue<IkReal> x717=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x717.valid){
continue;
}
CheckValue<IkReal> x718=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x718.valid){
continue;
}
CheckValue<IkReal> x719=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x719.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x720=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x720.valid){
continue;
}
CheckValue<IkReal> x721=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x721.valid){
continue;
}
CheckValue<IkReal> x722=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x722.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x723=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x723.valid){
continue;
}
CheckValue<IkReal> x724=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x724.valid){
continue;
}
CheckValue<IkReal> x725=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x725.valid){
continue;
}
CheckValue<IkReal> x726=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x726.valid){
continue;
}
CheckValue<IkReal> x727=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x727.valid){
continue;
}
CheckValue<IkReal> x728=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x728.valid){
continue;
}
CheckValue<IkReal> x729=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x729.valid){
continue;
}
CheckValue<IkReal> x730=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x730.valid){
continue;
}
CheckValue<IkReal> x731=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x731.valid){
continue;
}
CheckValue<IkReal> x732=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x732.valid){
continue;
}
CheckValue<IkReal> x733=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x733.valid){
continue;
}
CheckValue<IkReal> x734=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x734.valid){
continue;
}
CheckValue<IkReal> x735=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x735.valid){
continue;
}
CheckValue<IkReal> x736=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x736.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x737=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x737.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x738=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x738.valid){
continue;
}
CheckValue<IkReal> x739=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x739.valid){
continue;
}
CheckValue<IkReal> x740=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x740.valid){
continue;
}
CheckValue<IkReal> x741=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x741.valid){
continue;
}
CheckValue<IkReal> x742=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x742.valid){
continue;
}
CheckValue<IkReal> x743=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x743.valid){
continue;
}
CheckValue<IkReal> x744=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x744.valid){
continue;
}
CheckValue<IkReal> x745=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x745.valid){
continue;
}
CheckValue<IkReal> x746=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x746.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x747=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x747.valid){
continue;
}
CheckValue<IkReal> x748=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x748.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x749=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x749.valid){
continue;
}
CheckValue<IkReal> x750=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x750.valid){
continue;
}
CheckValue<IkReal> x751=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x751.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x752=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x752.valid){
continue;
}
CheckValue<IkReal> x753=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x753.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x754=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x754.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x755=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x755.valid){
continue;
}
CheckValue<IkReal> x756=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x756.valid){
continue;
}
CheckValue<IkReal> x757=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x757.valid){
continue;
}
CheckValue<IkReal> x758=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x758.valid){
continue;
}
CheckValue<IkReal> x759=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x759.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x760=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x760.valid){
continue;
}
CheckValue<IkReal> x761=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x761.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x762=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x762.valid){
continue;
}
CheckValue<IkReal> x763=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x763.valid){
continue;
}
CheckValue<IkReal> x764=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x764.valid){
continue;
}
CheckValue<IkReal> x765=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x765.valid){
continue;
}
CheckValue<IkReal> x766=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x766.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x767=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x767.valid){
continue;
}
CheckValue<IkReal> x768=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x768.valid){
continue;
}
CheckValue<IkReal> x769=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x769.valid){
continue;
}
CheckValue<IkReal> x770=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x770.valid){
continue;
}
CheckValue<IkReal> x771=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x771.valid){
continue;
}
CheckValue<IkReal> x772=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x772.valid){
continue;
}
CheckValue<IkReal> x773=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x773.valid){
continue;
}
CheckValue<IkReal> x774=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x774.valid){
continue;
}
CheckValue<IkReal> x775=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x775.valid){
continue;
}
CheckValue<IkReal> x776=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x776.valid){
continue;
}
CheckValue<IkReal> x777=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x777.valid){
continue;
}
CheckValue<IkReal> x778=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x778.valid){
continue;
}
CheckValue<IkReal> x779=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x779.valid){
continue;
}
CheckValue<IkReal> x780=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x780.valid){
continue;
}
CheckValue<IkReal> x781=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x781.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x782=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x782.valid){
continue;
}
CheckValue<IkReal> x783=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x783.valid){
continue;
}
CheckValue<IkReal> x784=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x784.valid){
continue;
}
CheckValue<IkReal> x785=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x785.valid){
continue;
}
CheckValue<IkReal> x786=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x786.valid){
continue;
}
CheckValue<IkReal> x787=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x787.valid){
continue;
}
CheckValue<IkReal> x788=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x788.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x789=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x789.valid){
continue;
}
CheckValue<IkReal> x790=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x790.valid){
continue;
}
CheckValue<IkReal> x791=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x791.valid){
continue;
}
CheckValue<IkReal> x792=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x792.valid){
continue;
}
CheckValue<IkReal> x793=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x793.valid){
continue;
}
CheckValue<IkReal> x794=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x794.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x795=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x795.valid){
continue;
}
CheckValue<IkReal> x796=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x796.valid){
continue;
}
CheckValue<IkReal> x797=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x797.valid){
continue;
}
CheckValue<IkReal> x798=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x798.valid){
continue;
}
CheckValue<IkReal> x799=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x799.valid){
continue;
}
CheckValue<IkReal> x800=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x800.valid){
continue;
}
CheckValue<IkReal> x801=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x801.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x802=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x802.valid){
continue;
}
CheckValue<IkReal> x803=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x803.valid){
continue;
}
CheckValue<IkReal> x804=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x804.valid){
continue;
}
CheckValue<IkReal> x805=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x805.valid){
continue;
}
CheckValue<IkReal> x806=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x806.valid){
continue;
}
CheckValue<IkReal> x807=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x807.valid){
continue;
}
CheckValue<IkReal> x808=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x808.valid){
continue;
}
CheckValue<IkReal> x809=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x809.valid){
continue;
}
CheckValue<IkReal> x810=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x810.valid){
continue;
}
CheckValue<IkReal> x811=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x811.valid){
continue;
}
CheckValue<IkReal> x812=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x812.valid){
continue;
}
CheckValue<IkReal> x813=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x813.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x814=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x814.valid){
continue;
}
CheckValue<IkReal> x815=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x815.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x816=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x816.valid){
continue;
}
CheckValue<IkReal> x817=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x817.valid){
continue;
}
CheckValue<IkReal> x818=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x818.valid){
continue;
}
CheckValue<IkReal> x819=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x819.valid){
continue;
}
CheckValue<IkReal> x820=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x820.valid){
continue;
}
CheckValue<IkReal> x821=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x821.valid){
continue;
}
CheckValue<IkReal> x822=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x822.valid){
continue;
}
CheckValue<IkReal> x823=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x823.valid){
continue;
}
CheckValue<IkReal> x824=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x824.valid){
continue;
}
CheckValue<IkReal> x825=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x825.valid){
continue;
}
CheckValue<IkReal> x826=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x826.valid){
continue;
}
CheckValue<IkReal> x827=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x827.valid){
continue;
}
CheckValue<IkReal> x828=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x828.valid){
continue;
}
CheckValue<IkReal> x829=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x829.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x830=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x830.valid){
continue;
}
CheckValue<IkReal> x831=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x831.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x832=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x832.valid){
continue;
}
CheckValue<IkReal> x833=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x833.valid){
continue;
}
CheckValue<IkReal> x834=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x834.valid){
continue;
}
CheckValue<IkReal> x835=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x835.valid){
continue;
}
CheckValue<IkReal> x836=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x836.valid){
continue;
}
CheckValue<IkReal> x837=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x837.valid){
continue;
}
CheckValue<IkReal> x838=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x838.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x839=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x839.valid){
continue;
}
CheckValue<IkReal> x840=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x840.valid){
continue;
}
CheckValue<IkReal> x841=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x841.valid){
continue;
}
CheckValue<IkReal> x842=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x842.valid){
continue;
}
CheckValue<IkReal> x843=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x843.valid){
continue;
}
CheckValue<IkReal> x844=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x844.valid){
continue;
}
CheckValue<IkReal> x845=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x845.valid){
continue;
}
CheckValue<IkReal> x846=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x846.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x847=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x847.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x848=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x848.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x849=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x849.valid){
continue;
}
CheckValue<IkReal> x850=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x850.valid){
continue;
}
CheckValue<IkReal> x851=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x851.valid){
continue;
}
CheckValue<IkReal> x852=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x852.valid){
continue;
}
CheckValue<IkReal> x853=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x853.valid){
continue;
}
CheckValue<IkReal> x854=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x854.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x544 = IKatan2WithCheck(IkReal(((((13817.9729109302)*r12*(npz*npz*npz)*(x545.value)*(x546.value)))+(((-2665.47661156855)*r12*(pz*pz)*(x547.value)*(x548.value)))+(((-457.038612624934)*r12*(npz*npz)*(x549.value)*(x550.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((30.23371008)*py*(npz*npz)*(x551.value)))+(((228.519306300373)*py*(pz*pz)*(r22*r22)*(x552.value)))+(((-114.259653174374)*r12*(pz*pz)*(x553.value)*(x554.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((10363.4796837461)*npz*pp*r12*(r22*r22)*(x555.value)*(x556.value)))+(((457.038612600747)*npz*r12*(pz*pz)*(r22*r22)*(x557.value)))+(((3.0)*r12*(r22*r22)*(x558.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((5330.95322257286)*r12*(npz*npz)*(r22*r22)*(x559.value)*(x560.value)))+(((-176.324811190502)*r12*(pz*pz)*(r22*r22)*(x561.value)))+(((10661.9064451457)*npz*pz*r12*r22*(x562.value)*(x563.value)))+(((3.88804)*py*(x564.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.103670145984534)*r12))+(((235.099748278886)*r12*(npz*npz)*(r22*r22)*(x565.value)))+(((58.7749370759425)*r12*(r22*r22*r22*r22*r22*r22)*(x566.value)*(x567.value)))+(((31090.4390490445)*npz*r12*(pz*pz)*(r22*r22)*(x568.value)*(x569.value)))+(((2665.47661100431)*r12*(pz*pz)*(r22*r22*r22*r22)*(x570.value)*(x571.value)))+(((-1.05276856896914)*r12*(r22*r22)*(x572.value)))+(((-41453.9187327906)*pz*r12*r22*(npz*npz)*(x573.value)*(x574.value)))+(((-342.77895945056)*r12*(pz*pz)*(r22*r22)*(x575.value)*(x576.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612697495)*npz*pp*r12*(r22*r22)*(x577.value)))+(((-3.88804)*pp*r12*(x578.value)))+(((-4.0)*npz*r12*(r22*r22)*(x579.value)))+(((1.05276856896914)*r12*(x580.value)))+(((-228.519306348747)*pp*py*(x581.value)))+(((0.514398000020576)*npz*r12*(x582.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-114.259653174374)*pp*r12*(r22*r22)*(x583.value)*(x584.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((3.88804)*pp*r12*(r22*r22)*(x585.value)))+(((-22.6752825624)*r12*(r22*r22*r22*r22)*(x586.value)*(x587.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-10661.9064451457)*npz*pz*r12*(r22*r22*r22)*(x588.value)*(x589.value)))+(((-0.403073674393708)*py))+(((176.324811227827)*r12*(r22*r22)*(x590.value)*(x591.value)))+(((-176.324811227827)*r12*(r22*r22*r22*r22)*(x592.value)*(x593.value)))+(((-117.549874139443)*npz*py*(x594.value)))+(((-30.23371008)*npz*py*pz*r22*(x595.value)))+(((-10363.4796837461)*r12*r22*(pz*pz*pz)*(x596.value)*(x597.value)))+(((-176.324811209165)*npz*r12*(r22*r22)*(x598.value)*(x599.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.257199000010288)*pp*r12))+(((120.9348403232)*npz*r12*(x600.value)))+(((-15.5521599983539)*r12*(npz*npz)*(x601.value)))+(((90.70113024)*pz*r12*(r22*r22*r22)*(x602.value)))+(((-5330.9532231371)*pp*r12*(r22*r22)*(x603.value)*(x604.value)))+(((-30.23371008)*r12*(npz*npz)*(x605.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((114.259653174374)*pp*r12*(x606.value)*(x607.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((30.2337100832)*npz*r12*(r22*r22*r22*r22)*(x608.value)))+(((914.077225249868)*npz*pz*r12*r22*(x609.value)*(x610.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-1371.11583794736)*npz*r12*(r22*r22)*(x611.value)*(x612.value)))+(((7.77607999917696)*py*pz*r22*(x613.value)))+(((0.132302651212584)*npz*r12))+(((-2.0)*py*(r22*r22)*(x614.value)))+(((-176.324811227827)*r12*(pz*pz)*(x615.value)))+(((15.5521599983539)*npz*pz*r12*r22*(x616.value)))+(((-587.749370697216)*r12*(npz*npz)*(x617.value)))+(((228.519306348747)*pp*py*(r22*r22)*(x618.value)))+(((176.324811209165)*npz*r12*(x619.value)*(x620.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((228.519306348747)*py*(pz*pz)*(x621.value)))+(((-22.6752825624)*r12*(x622.value)*(x623.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.0932063064615264)*npz*r12*(x624.value)))+(((0.135385511590562)*r12*(x625.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-3.88804)*py*(r22*r22)*(x626.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612697495)*npz*r12*(pz*pz)*(x627.value)))+(((-90.70113024)*pz*r12*r22*(x628.value)))+(((15.11685504)*py*pz*r22*(x629.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((23.32824)*r12*(r22*r22)*(x630.value)))+(((-11.66412)*r12*(r22*r22*r22*r22)*(x631.value)))+(((914.077225298242)*r12*(npz*npz*npz)*(x632.value)))+(((176.324811209165)*pz*r12*(r22*r22*r22)*(x633.value)*(x634.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((10363.4796837461)*pp*pz*r12*r22*(x635.value)*(x636.value)))+(((-7.77608)*npz*r12*(r22*r22)*(x637.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811227827)*pp*r12*(r22*r22)*(x638.value)))+(((-685.557918973681)*pz*r12*r22*(x639.value)*(x640.value)))+(((176.324811227827)*pp*r12*(x641.value)))+(((-10363.4796837461)*pp*pz*r12*(r22*r22*r22)*(x642.value)*(x643.value)))+(((-3454.4932271841)*r12*(pz*pz*pz)*(r22*r22*r22)*(x644.value)*(x645.value)))+(((1371.11583794736)*pz*r12*(r22*r22*r22)*(x646.value)*(x647.value)))+(((7.77608)*npz*py*(r22*r22)*(x648.value)))+(((-11.6641199987654)*pz*r12*r22*(x649.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-11.66412)*r12*(x650.value)))+(((-10363.4796837461)*npz*pp*r12*(x651.value)*(x652.value)))+(((0.257199000010288)*py*(x653.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((117.549874139443)*py*pz*r22*(x654.value)))+(((-176.324811209165)*pz*r12*r22*(x655.value)*(x656.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((45.3505651248)*r12*(r22*r22)*(x657.value)*(x658.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((5.64239395899188e-7)*r12*(pz*pz)*(r22*r22)*(x659.value)*(x660.value)))+(((30.23371008)*npz*pz*r12*r22*(x661.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.5)*pp*r12*(x662.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((15.1168550416)*py*(r22*r22*r22*r22)*(x663.value)))+(((-30.2337100832)*py*(r22*r22)*(x664.value)))+(((-0.514398000020576)*npz*py))+(((-1.0)*npz*py*(x665.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((2665.47661156855)*pp*r12*(r22*r22*r22*r22)*(x666.value)*(x667.value)))+(((-5330.95322257286)*r12*(npz*npz)*(x668.value)*(x669.value)))+(((-15.11685504)*npz*py*(x670.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((685.557918973681)*npz*r12*(x671.value)*(x672.value)))+(((2665.47661156855)*pp*r12*(x673.value)*(x674.value)))+(((-15.11685504)*pp*pz*r12*r22*(x675.value)))+(((-457.038612697495)*npz*pp*r12*(x676.value)))+(((2.0)*py*(x677.value)))+(((-235.099748278886)*npz*pz*r12*(r22*r22*r22)*(x678.value)))+(((-3.0)*r12*(x679.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-117.549874139443)*py*pz*(r22*r22*r22)*(x680.value)))+(((117.549874139443)*npz*py*(r22*r22)*(x681.value)))+(((-1828.15445059648)*pz*r12*r22*(npz*npz)*(x682.value)))+(((-151.1685504064)*npz*r12*(r22*r22)*(x683.value)))+(((15.11685504)*npz*pp*r12*(x684.value)))+(((-15.552159999177)*npz*py*(x685.value)))+(((-914.077225298242)*npz*py*pz*r22*(x686.value)))+(((457.038612649121)*py*(npz*npz)*(x687.value)))+(((10363.4796837461)*npz*r12*(pz*pz)*(x688.value)*(x689.value)))+(((4.09320630646153)*pz*r12*r22*(x690.value)))+(((-685.557918973681)*pz*r12*(r22*r22*r22*r22*r22)*(x691.value)*(x692.value)))+(((15.1168550416)*py*(x693.value)))+(((685.557918973681)*npz*r12*(r22*r22*r22*r22)*(x694.value)*(x695.value)))+((pp*py))+(((-58.7749370759425)*r12*(x696.value)*(x697.value)))+(((940.398993115546)*npz*pz*r12*r22*(x698.value)))+(((19.4401999987654)*npz*r12*(x699.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))),IkReal(((((-90.70113024)*pz*r02*r22*(x700.value)))+(((-0.0932063064615264)*npz*r02*(x701.value)))+(((1.05276856896914)*r02*(x702.value)))+(((-3.88804)*px*(r22*r22)*(x703.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.103670145984534)*r02))+(((228.519306348747)*pp*px*(r22*r22)*(x704.value)))+(((-10363.4796837461)*r02*r22*(pz*pz*pz)*(x705.value)*(x706.value)))+(((23.32824)*r02*(r22*r22)*(x707.value)))+(((15.1168550416)*px*(x708.value)))+(((-30.2337100832)*px*(r22*r22)*(x709.value)))+(((-0.5)*pp*r02*(x710.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-114.259653174374)*pp*r02*(r22*r22)*(x711.value)*(x712.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.257199000010288)*pp*r02))+(((19.4401999987654)*npz*r02*(x713.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((15.5521599983539)*npz*pz*r02*r22*(x714.value)))+(((-235.099748278886)*npz*pz*r02*(r22*r22*r22)*(x715.value)))+(((-685.557918973681)*pz*r02*(r22*r22*r22*r22*r22)*(x716.value)*(x717.value)))+(((15.1168550416)*px*(r22*r22*r22*r22)*(x718.value)))+(((-3.0)*r02*(x719.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.403073674393708)*px))+(((10661.9064451457)*npz*pz*r02*r22*(x720.value)*(x721.value)))+(((-1.0)*npz*px*(x722.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-117.549874139443)*px*pz*(r22*r22*r22)*(x723.value)))+(((-3454.4932271841)*r02*(pz*pz*pz)*(r22*r22*r22)*(x724.value)*(x725.value)))+(((10363.4796837461)*npz*r02*(pz*pz)*(x726.value)*(x727.value)))+(((457.038612649121)*px*(npz*npz)*(x728.value)))+(((2665.47661156855)*pp*r02*(r22*r22*r22*r22)*(x729.value)*(x730.value)))+(((-5330.9532231371)*pp*r02*(r22*r22)*(x731.value)*(x732.value)))+(((0.132302651212584)*npz*r02))+(((7.77607999917696)*px*pz*r22*(x733.value)))+(((117.549874139443)*npz*px*(r22*r22)*(x734.value)))+(((176.324811209165)*pz*r02*(r22*r22*r22)*(x735.value)*(x736.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.257199000010288)*px*(x737.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((90.70113024)*pz*r02*(r22*r22*r22)*(x738.value)))+(((1371.11583794736)*pz*r02*(r22*r22*r22)*(x739.value)*(x740.value)))+(((-58.7749370759425)*r02*(x741.value)*(x742.value)))+(((235.099748278886)*r02*(npz*npz)*(r22*r22)*(x743.value)))+(((-10661.9064451457)*npz*pz*r02*(r22*r22*r22)*(x744.value)*(x745.value)))+(((0.135385511590562)*r02*(x746.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((914.077225249868)*npz*pz*r02*r22*(x747.value)*(x748.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((15.11685504)*npz*pp*r02*(x749.value)))+(((-15.11685504)*pp*pz*r02*r22*(x750.value)))+(((-11.6641199987654)*pz*r02*r22*(x751.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((120.9348403232)*npz*r02*(x752.value)))+(((-15.11685504)*npz*px*(x753.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-30.23371008)*r02*(npz*npz)*(x754.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612697495)*npz*pp*r02*(r22*r22)*(x755.value)))+(((-3.88804)*pp*r02*(x756.value)))+(((-117.549874139443)*npz*px*(x757.value)))+(((45.3505651248)*r02*(r22*r22)*(x758.value)*(x759.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-114.259653174374)*r02*(pz*pz)*(x760.value)*(x761.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((914.077225298242)*r02*(npz*npz*npz)*(x762.value)))+(((-15.5521599983539)*r02*(npz*npz)*(x763.value)))+(((-587.749370697216)*r02*(npz*npz)*(x764.value)))+(((-342.77895945056)*r02*(pz*pz)*(r22*r22)*(x765.value)*(x766.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((30.23371008)*px*(npz*npz)*(x767.value)))+(((2.0)*px*(x768.value)))+(((457.038612600747)*npz*r02*(pz*pz)*(r22*r22)*(x769.value)))+(((176.324811227827)*pp*r02*(x770.value)))+(((176.324811227827)*r02*(r22*r22)*(x771.value)*(x772.value)))+(((-4.0)*npz*r02*(r22*r22)*(x773.value)))+(((-457.038612697495)*npz*pp*r02*(x774.value)))+(((-10363.4796837461)*npz*pp*r02*(x775.value)*(x776.value)))+(((685.557918973681)*npz*r02*(r22*r22*r22*r22)*(x777.value)*(x778.value)))+(((940.398993115546)*npz*pz*r02*r22*(x779.value)))+(((176.324811209165)*npz*r02*(x780.value)*(x781.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((4.09320630646153)*pz*r02*r22*(x782.value)))+(((13817.9729109302)*r02*(npz*npz*npz)*(x783.value)*(x784.value)))+(((-176.324811190502)*r02*(pz*pz)*(r22*r22)*(x785.value)))+(((228.519306348747)*px*(pz*pz)*(x786.value)))+(((-22.6752825624)*r02*(x787.value)*(x788.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-685.557918973681)*pz*r02*r22*(x789.value)*(x790.value)))+(((-2665.47661156855)*r02*(pz*pz)*(x791.value)*(x792.value)))+(((114.259653174374)*pp*r02*(x793.value)*(x794.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((7.77608)*npz*px*(r22*r22)*(x795.value)))+(((-10363.4796837461)*pp*pz*r02*(r22*r22*r22)*(x796.value)*(x797.value)))+(((117.549874139443)*px*pz*r22*(x798.value)))+(((2665.47661100431)*r02*(pz*pz)*(r22*r22*r22*r22)*(x799.value)*(x800.value)))+(((15.11685504)*px*pz*r22*(x801.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-914.077225298242)*npz*px*pz*r22*(x802.value)))+(((-1371.11583794736)*npz*r02*(r22*r22)*(x803.value)*(x804.value)))+(((-30.23371008)*npz*px*pz*r22*(x805.value)))+(((-0.514398000020576)*npz*px))+(((10363.4796837461)*npz*pp*r02*(r22*r22)*(x806.value)*(x807.value)))+(((-41453.9187327906)*pz*r02*r22*(npz*npz)*(x808.value)*(x809.value)))+(((-11.66412)*r02*(x810.value)))+(((3.88804)*pp*r02*(r22*r22)*(x811.value)))+(((-22.6752825624)*r02*(r22*r22*r22*r22)*(x812.value)*(x813.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-457.038612624934)*r02*(npz*npz)*(x814.value)*(x815.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((2665.47661156855)*pp*r02*(x816.value)*(x817.value)))+(((-176.324811227827)*pp*r02*(r22*r22)*(x818.value)))+(((-1828.15445059648)*pz*r02*r22*(npz*npz)*(x819.value)))+(((-2.0)*px*(r22*r22)*(x820.value)))+(((5.64239395899188e-7)*r02*(pz*pz)*(r22*r22)*(x821.value)*(x822.value)))+(((-11.66412)*r02*(r22*r22*r22*r22)*(x823.value)))+(((-151.1685504064)*npz*r02*(r22*r22)*(x824.value)))+(((-5330.95322257286)*r02*(npz*npz)*(x825.value)*(x826.value)))+(((-176.324811227827)*r02*(r22*r22*r22*r22)*(x827.value)*(x828.value)))+(((0.514398000020576)*npz*r02*(x829.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811209165)*pz*r02*r22*(x830.value)*(x831.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((10363.4796837461)*pp*pz*r02*r22*(x832.value)*(x833.value)))+(((-15.552159999177)*npz*px*(x834.value)))+(((-1.05276856896914)*r02*(r22*r22)*(x835.value)))+(((30.2337100832)*npz*r02*(r22*r22*r22*r22)*(x836.value)))+(((-176.324811209165)*npz*r02*(r22*r22)*(x837.value)*(x838.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811227827)*r02*(pz*pz)*(x839.value)))+(((-228.519306348747)*pp*px*(x840.value)))+(((685.557918973681)*npz*r02*(x841.value)*(x842.value)))+(((457.038612697495)*npz*r02*(pz*pz)*(x843.value)))+(((31090.4390490445)*npz*r02*(pz*pz)*(r22*r22)*(x844.value)*(x845.value)))+(((30.23371008)*npz*pz*r02*r22*(x846.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+((pp*px))+(((3.88804)*px*(x847.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-7.77608)*npz*r02*(r22*r22)*(x848.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((58.7749370759425)*r02*(r22*r22*r22*r22*r22*r22)*(x849.value)*(x850.value)))+(((228.519306300373)*px*(pz*pz)*(r22*r22)*(x851.value)))+(((5330.95322257286)*r02*(npz*npz)*(r22*r22)*(x852.value)*(x853.value)))+(((3.0)*r02*(r22*r22)*(x854.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x544.valid){
continue;
}
CheckValue<IkReal> x856=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x856.valid){
continue;
}
CheckValue<IkReal> x857=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x857.valid){
continue;
}
CheckValue<IkReal> x858=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x858.valid){
continue;
}
CheckValue<IkReal> x859=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x859.valid){
continue;
}
CheckValue<IkReal> x860=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x860.valid){
continue;
}
CheckValue<IkReal> x861=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x861.valid){
continue;
}
CheckValue<IkReal> x862=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x862.valid){
continue;
}
CheckValue<IkReal> x863=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x863.valid){
continue;
}
CheckValue<IkReal> x864=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x864.valid){
continue;
}
CheckValue<IkReal> x865=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x865.valid){
continue;
}
CheckValue<IkReal> x866=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x866.valid){
continue;
}
CheckValue<IkReal> x867=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x867.valid){
continue;
}
CheckValue<IkReal> x868=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x868.valid){
continue;
}
CheckValue<IkReal> x869=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x869.valid){
continue;
}
CheckValue<IkReal> x870=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x870.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x871=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x871.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x872=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x872.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x873=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x873.valid){
continue;
}
CheckValue<IkReal> x874=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x874.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x875=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x875.valid){
continue;
}
CheckValue<IkReal> x876=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x876.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x877=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x877.valid){
continue;
}
CheckValue<IkReal> x878=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x878.valid){
continue;
}
CheckValue<IkReal> x879=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x879.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x880=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x880.valid){
continue;
}
CheckValue<IkReal> x881=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x881.valid){
continue;
}
CheckValue<IkReal> x882=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x882.valid){
continue;
}
CheckValue<IkReal> x883=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x883.valid){
continue;
}
CheckValue<IkReal> x884=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x884.valid){
continue;
}
CheckValue<IkReal> x885=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x885.valid){
continue;
}
CheckValue<IkReal> x886=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x886.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x887=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x887.valid){
continue;
}
CheckValue<IkReal> x888=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x888.valid){
continue;
}
CheckValue<IkReal> x889=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x889.valid){
continue;
}
CheckValue<IkReal> x890=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x890.valid){
continue;
}
CheckValue<IkReal> x891=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x891.valid){
continue;
}
CheckValue<IkReal> x892=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x892.valid){
continue;
}
CheckValue<IkReal> x893=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x893.valid){
continue;
}
CheckValue<IkReal> x894=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x894.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x895=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x895.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x896=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x896.valid){
continue;
}
CheckValue<IkReal> x897=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x897.valid){
continue;
}
CheckValue<IkReal> x898=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x898.valid){
continue;
}
CheckValue<IkReal> x899=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x899.valid){
continue;
}
CheckValue<IkReal> x900=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x900.valid){
continue;
}
CheckValue<IkReal> x901=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x901.valid){
continue;
}
CheckValue<IkReal> x902=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x902.valid){
continue;
}
CheckValue<IkReal> x903=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x903.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x904=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x904.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x905=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x905.valid){
continue;
}
CheckValue<IkReal> x906=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x906.valid){
continue;
}
CheckValue<IkReal> x907=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x907.valid){
continue;
}
CheckValue<IkReal> x908=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x908.valid){
continue;
}
CheckValue<IkReal> x909=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x909.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x855=IKPowWithIntegerCheck(IKsign(((((1.209348403328)*(r12*r12)*(x856.value)))+(((18.2815445040299)*(pz*pz)*(r02*r02)*(r22*r22)*(x857.value)))+(((18.2815445078998)*pp*(r02*r02)*(r22*r22)*(x858.value)))+(((-2.418696806656)*(r12*r12)*(r22*r22)*(x859.value)))+(((18.2815445078998)*(pz*pz)*(r12*r12)*(x860.value)))+(((-0.16)*(r12*r12)*(r22*r22)*(x861.value)))+(((-2.4186968064)*py*pz*r12*r22*(x862.value)))+(((-18.2815445078998)*pp*(r12*r12)*(x863.value)))+(((0.16)*(r12*r12)*(x864.value)))+(((1.209348403328)*(r12*r12)*(r22*r22*r22*r22)*(x865.value)))+(((0.08)*(py*py)))+(((1.209348403328)*(r02*r02)*(x866.value)))+(((-0.6220864)*py*r12*(x867.value)))+(((0.6220864)*px*r02*(r22*r22)*(x868.value)))+(((0.622086399934157)*pz*r22*(r02*r02)*(x869.value)))+(((-1.2093484032)*npz*(r12*r12)*(x870.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.020575920000823)*(r02*r02)*(x871.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.3110432)*(r02*r02)*(r22*r22)*(x872.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-9.40398993115546)*npz*(r12*r12)*(x873.value)))+(((0.3110432)*(r12*r12)*(x874.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.6220864)*py*r12*(r22*r22)*(x875.value)))+(((-0.08)*py*r12*(x876.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.622086399934157)*pz*r22*(r12*r12)*(x877.value)))+(((-0.6220864)*px*r02*(x878.value)))+(((0.3110432)*(r02*r02)*(x879.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-9.40398993115546)*npz*(r02*r02)*(x880.value)))+(((0.00529210604850337)*(r02*r02)))+(((2.4186968064)*npz*px*r02*(x881.value)))+(((-0.0411518400016461)*py*r12))+(((-0.16)*(r02*r02)*(r22*r22)*(x882.value)))+(((-73.1261780238593)*npz*pz*r22*(r02*r02)*(x883.value)))+(((-9.40398993115546)*pz*(r12*r12)*(r22*r22*r22)*(x884.value)))+(((0.00529210604850337)*(r12*r12)))+(((18.2815445078998)*pp*(r12*r12)*(r22*r22)*(x885.value)))+(((-1.2093484032)*npz*(r02*r02)*(x886.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((9.40398993115546)*pz*r22*(r02*r02)*(x887.value)))+(((9.40398993115546)*npz*(r12*r12)*(r22*r22)*(x888.value)))+(((0.08)*(px*px)))+(((-73.1261780238593)*npz*pz*r22*(r12*r12)*(x889.value)))+(((-0.622086399934157)*npz*(r12*r12)*(x890.value)))+(((-0.622086399934157)*npz*(r02*r02)*(x891.value)))+(((18.2815445040299)*(pz*pz)*(r12*r12)*(r22*r22)*(x892.value)))+(((-18.2815445078998)*pp*(r02*r02)*(x893.value)))+(((1.2093484032)*pz*r22*(r02*r02)*(x894.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.3110432)*(r12*r12)*(r22*r22)*(x895.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((9.40398993115546)*pz*r22*(r12*r12)*(x896.value)))+(((18.2815445078998)*(pz*pz)*(r02*r02)*(x897.value)))+(((36.5630890119297)*(npz*npz)*(r02*r02)*(x898.value)))+(((36.5630890119297)*(npz*npz)*(r12*r12)*(x899.value)))+(((9.40398993115546)*npz*(r02*r02)*(r22*r22)*(x900.value)))+(((2.4186968064)*npz*py*r12*(x901.value)))+(((-2.418696806656)*(r02*r02)*(r22*r22)*(x902.value)))+(((0.020575920000823)*(r12*r12)*(x903.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.0411518400016461)*px*r02))+(((1.2093484032)*pz*r22*(r12*r12)*(x904.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.16)*(r02*r02)*(x905.value)))+(((1.209348403328)*(r02*r02)*(r22*r22*r22*r22)*(x906.value)))+(((-2.4186968064)*px*pz*r02*r22*(x907.value)))+(((-9.40398993115546)*pz*(r02*r02)*(r22*r22*r22)*(x908.value)))+(((-0.08)*px*r02*(x909.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))),-1);
if(!x855.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x544.value)+(((1.5707963267949)*(x855.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x910=IKsin(j0);
IkReal x911=IKcos(j0);
IkReal x912=r22*r22;
IkReal x913=((15.11685504)*npz);
IkReal x914=((914.077225394989)*pp);
IkReal x915=((1.0)*x911);
IkReal x916=((15.11685504)*pz*r22);
IkReal x917=((0.257199000010288)*x910);
IkReal x918=((3.88804)*x912);
IkReal x919=((0.257199000010288)*x911);
IkReal x920=((3.88804)*x910);
IkReal x921=((3.88804)*x911);
IkReal x922=x179;
IkReal x923=(r12*x922);
IkReal x924=(r02*x922);
if((((((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((-1.0)*x914))+(((914.077225394989)*(pz*pz)))+((x912*x914)))) < -0.00001)
continue;
IkReal x925=IKsqrt(((((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((-1.0)*x914))+(((914.077225394989)*(pz*pz)))+((x912*x914))));
IkReal x926=((0.5)*x911*x925);
IkReal x927=((0.5)*x910*x925);
evalcond[0]=((((-1.0)*x911*x913*x923))+(((-1.0)*x911*x918*x923))+((x910*x918*x924))+((r12*x919))+((px*x910))+(((-1.0)*x924*x927))+(((-1.0)*x920*x924))+(((-1.0)*py*x915))+((x921*x923))+(((-1.0)*r02*x917))+((x923*x926))+((x911*x916*x923))+(((-1.0)*x910*x916*x924))+((x910*x913*x924)));
evalcond[1]=((((-1.0)*x911*x913*x924))+(((-1.0)*x911*x918*x924))+((x920*x923))+((x924*x926))+(((-1.0)*px*x915))+((r12*x917))+((r02*x919))+((x921*x924))+(((-1.0)*x910*x918*x923))+((x910*x916*x923))+(((-1.0)*x910*x913*x923))+((x923*x927))+((x911*x916*x924))+(((-1.0)*py*x910)));
CheckValue<IkReal> x928=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x928.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x929=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x929.valid){
continue;
}
CheckValue<IkReal> x930=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x930.valid){
continue;
}
CheckValue<IkReal> x931=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x931.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x932=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x932.valid){
continue;
}
CheckValue<IkReal> x933=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x933.valid){
continue;
}
CheckValue<IkReal> x934=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x934.valid){
continue;
}
CheckValue<IkReal> x935=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x935.valid){
continue;
}
CheckValue<IkReal> x936=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x936.valid){
continue;
}
CheckValue<IkReal> x937=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x937.valid){
continue;
}
CheckValue<IkReal> x938=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x938.valid){
continue;
}
CheckValue<IkReal> x939=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x939.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x940=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x940.valid){
continue;
}
CheckValue<IkReal> x941=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x941.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x942=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x942.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x943=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x943.valid){
continue;
}
CheckValue<IkReal> x944=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x944.valid){
continue;
}
CheckValue<IkReal> x945=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x945.valid){
continue;
}
CheckValue<IkReal> x946=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x946.valid){
continue;
}
CheckValue<IkReal> x947=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x948.valid){
continue;
}
CheckValue<IkReal> x949=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x949.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x950=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x950.valid){
continue;
}
CheckValue<IkReal> x951=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x951.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x952=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x952.valid){
continue;
}
CheckValue<IkReal> x953=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x953.valid){
continue;
}
CheckValue<IkReal> x954=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x954.valid){
continue;
}
CheckValue<IkReal> x955=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x955.valid){
continue;
}
CheckValue<IkReal> x956=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x956.valid){
continue;
}
CheckValue<IkReal> x957=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x957.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x958=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x958.valid){
continue;
}
CheckValue<IkReal> x959=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x959.valid){
continue;
}
CheckValue<IkReal> x960=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x960.valid){
continue;
}
CheckValue<IkReal> x961=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x961.valid){
continue;
}
CheckValue<IkReal> x962=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x962.valid){
continue;
}
CheckValue<IkReal> x963=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x963.valid){
continue;
}
evalcond[2]=((0.403073674393708)+((npz*(x928.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.3110432)*r02*(x929.value)*(IKcos(j0))))+(((-30.23371008)*(npz*npz)*(x930.value)))+(((15.11685504)*npz*(x931.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-15.1168550416)*(x932.value)))+(((-228.519306300373)*(pz*pz)*(r22*r22)*(x933.value)))+(((30.2337100832)*(r22*r22)*(x934.value)))+(((15.552159999177)*npz*(x935.value)))+(((-1.2093484032)*pz*r02*r22*(x936.value)*(IKcos(j0))))+(((-0.3110432)*r12*(x937.value)*(IKsin(j0))))+(((-228.519306348747)*pp*(r22*r22)*(x938.value)))+(((-0.04)*r02*(x939.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKcos(j0))))+(((-0.020575920000823)*r12*(IKsin(j0))))+(((-2.0)*(x940.value)))+(((-15.11685504)*pz*r22*(x941.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-3.88804)*(x942.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((2.0)*(r22*r22)*(x943.value)))+(((1.2093484032)*npz*r02*(x944.value)*(IKcos(j0))))+(((0.3110432)*r02*(r22*r22)*(x945.value)*(IKcos(j0))))+(((-117.549874139443)*npz*(r22*r22)*(x946.value)))+(((0.3110432)*r12*(r22*r22)*(x947.value)*(IKsin(j0))))+(((228.519306348747)*pp*(x948.value)))+(((-1.0)*pp))+(((3.88804)*(r22*r22)*(x949.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.514398000020576)*npz))+(((-7.77608)*npz*(r22*r22)*(x950.value)))+(((-0.04)*r12*(x951.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKsin(j0))))+(((-0.020575920000823)*r02*(IKcos(j0))))+(((-15.1168550416)*(r22*r22*r22*r22)*(x952.value)))+(((1.2093484032)*npz*r12*(x953.value)*(IKsin(j0))))+(((117.549874139443)*npz*(x954.value)))+(((-457.038612649121)*(npz*npz)*(x955.value)))+(((-1.2093484032)*pz*r12*r22*(x956.value)*(IKsin(j0))))+(((-0.257199000010288)*(x957.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-228.519306348747)*(pz*pz)*(x958.value)))+(((-117.549874139443)*pz*r22*(x959.value)))+(((-7.77607999917696)*pz*r22*(x960.value)))+(((30.23371008)*npz*pz*r22*(x961.value)))+(((117.549874139443)*pz*(r22*r22*r22)*(x962.value)))+(((0.08)*px*(IKcos(j0))))+(((0.08)*py*(IKsin(j0))))+(((914.077225298242)*npz*pz*r22*(x963.value))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x2371=r22*r22;
IkReal x2372=((914.077225394989)*pp);
IkReal x2373=(pz*r22);
IkReal x2374=x179;
IkReal x2375=((3.88804)*x2374);
IkReal x2376=((15.11685504)*x2374);
IkReal x2377=((15.1168550416)*x2374);
IkReal x2378=(x2371*x2375);
if(((((x2371*x2372))+(((914.077225394989)*(npz*npz)))+(((-1.0)*x2372))+(((914.077225394989)*(pz*pz)))+(((-1828.15445078998)*npz*x2373)))) < -0.00001)
continue;
IkReal x2379=((0.5)*x2374*(IKsqrt((((x2371*x2372))+(((914.077225394989)*(npz*npz)))+(((-1.0)*x2372))+(((914.077225394989)*(pz*pz)))+(((-1828.15445078998)*npz*x2373))))));
IkReal x2380=(x2379+x2375);
sj6=gconst1;
cj6=gconst2;
j6=(((x2373*x2376))+x2380+(((-1.0)*npz*x2376))+(((-1.0)*x2378)));
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal gconst0=(((x2373*x2377))+x2380+(((-1.0)*npz*x2377))+(((-1.0)*x2378)));
CheckValue<IkReal> x2381=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2381.valid){
continue;
}
CheckValue<IkReal> x2382=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2382.valid){
continue;
}
CheckValue<IkReal> x2383=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2383.valid){
continue;
}
CheckValue<IkReal> x2384=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2384.valid){
continue;
}
CheckValue<IkReal> x2385=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2385.valid){
continue;
}
CheckValue<IkReal> x2386=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2386.valid){
continue;
}
CheckValue<IkReal> x2387=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2387.valid){
continue;
}
CheckValue<IkReal> x2388=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2388.valid){
continue;
}
CheckValue<IkReal> x2389=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2389.valid){
continue;
}
CheckValue<IkReal> x2390=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2390.valid){
continue;
}
CheckValue<IkReal> x2391=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2391.valid){
continue;
}
CheckValue<IkReal> x2392=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2392.valid){
continue;
}
CheckValue<IkReal> x2393=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2393.valid){
continue;
}
CheckValue<IkReal> x2394=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2394.valid){
continue;
}
CheckValue<IkReal> x2395=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2395.valid){
continue;
}
CheckValue<IkReal> x2396=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2396.valid){
continue;
}
CheckValue<IkReal> x2397=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2397.valid){
continue;
}
CheckValue<IkReal> x2398=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2398.valid){
continue;
}
CheckValue<IkReal> x2399=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2399.valid){
continue;
}
CheckValue<IkReal> x2400=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2400.valid){
continue;
}
CheckValue<IkReal> x2401=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2401.valid){
continue;
}
CheckValue<IkReal> x2402=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2402.valid){
continue;
}
CheckValue<IkReal> x2403=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2403.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2404=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2404.valid){
continue;
}
CheckValue<IkReal> x2405=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2405.valid){
continue;
}
CheckValue<IkReal> x2406=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2406.valid){
continue;
}
CheckValue<IkReal> x2407=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2407.valid){
continue;
}
CheckValue<IkReal> x2408=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2408.valid){
continue;
}
CheckValue<IkReal> x2409=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2409.valid){
continue;
}
CheckValue<IkReal> x2410=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2410.valid){
continue;
}
CheckValue<IkReal> x2411=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2411.valid){
continue;
}
CheckValue<IkReal> x2412=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2412.valid){
continue;
}
CheckValue<IkReal> x2413=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2413.valid){
continue;
}
CheckValue<IkReal> x2414=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2414.valid){
continue;
}
CheckValue<IkReal> x2415=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2415.valid){
continue;
}
CheckValue<IkReal> x2416=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2416.valid){
continue;
}
CheckValue<IkReal> x2417=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2417.valid){
continue;
}
CheckValue<IkReal> x2418=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2418.valid){
continue;
}
CheckValue<IkReal> x2419=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2419.valid){
continue;
}
CheckValue<IkReal> x2420=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2420.valid){
continue;
}
CheckValue<IkReal> x2421=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2421.valid){
continue;
}
CheckValue<IkReal> x2422=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2422.valid){
continue;
}
CheckValue<IkReal> x2423=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2423.valid){
continue;
}
CheckValue<IkReal> x2424=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2424.valid){
continue;
}
CheckValue<IkReal> x2425=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2425.valid){
continue;
}
CheckValue<IkReal> x2426=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2426.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst1=((((((((((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x2381.value))))*(IKsin(((3.88804)*(x2382.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2383.value))))*(IKsin(((15.1168550416)*npz*(x2384.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x2385.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(x2386.value))))*(IKsin(((15.1168550416)*npz*(x2387.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2388.value))))*(IKcos(((15.1168550416)*npz*(x2389.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x2390.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x2391.value))))))+(((((((((((IKsin(((3.88804)*(x2392.value))))*(IKsin(((15.1168550416)*npz*(x2393.value))))))+(((IKcos(((3.88804)*(x2394.value))))*(IKcos(((15.1168550416)*npz*(x2395.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x2396.value))))))+(((((((IKcos(((15.1168550416)*npz*(x2397.value))))*(IKsin(((3.88804)*(x2398.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2399.value))))*(IKsin(((15.1168550416)*npz*(x2400.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x2401.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x2402.value))))))))*(IKsin(((0.5)*(x2403.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((((((((((IKsin(((3.88804)*(x2404.value))))*(IKsin(((15.1168550416)*npz*(x2405.value))))))+(((IKcos(((3.88804)*(x2406.value))))*(IKcos(((15.1168550416)*npz*(x2407.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x2408.value))))))+(((((((IKcos(((15.1168550416)*npz*(x2409.value))))*(IKsin(((3.88804)*(x2410.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2411.value))))*(IKsin(((15.1168550416)*npz*(x2412.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x2413.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x2414.value))))))+(((((((((((-1.0)*(IKsin(((3.88804)*(x2415.value))))*(IKsin(((15.1168550416)*npz*(x2416.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2417.value))))*(IKcos(((15.1168550416)*npz*(x2418.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x2419.value))))))+(((((((IKcos(((15.1168550416)*npz*(x2420.value))))*(IKsin(((3.88804)*(x2421.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2422.value))))*(IKsin(((15.1168550416)*npz*(x2423.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x2424.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x2425.value))))))))*(IKcos(((0.5)*(x2426.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
CheckValue<IkReal> x2427=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2427.valid){
continue;
}
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2428.valid){
continue;
}
CheckValue<IkReal> x2429=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2429.valid){
continue;
}
CheckValue<IkReal> x2430=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2430.valid){
continue;
}
CheckValue<IkReal> x2431=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2431.valid){
continue;
}
CheckValue<IkReal> x2432=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2432.valid){
continue;
}
CheckValue<IkReal> x2433=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2433.valid){
continue;
}
CheckValue<IkReal> x2434=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2434.valid){
continue;
}
CheckValue<IkReal> x2435=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2435.valid){
continue;
}
CheckValue<IkReal> x2436=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2436.valid){
continue;
}
CheckValue<IkReal> x2437=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2437.valid){
continue;
}
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2438.valid){
continue;
}
CheckValue<IkReal> x2439=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2439.valid){
continue;
}
CheckValue<IkReal> x2440=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2440.valid){
continue;
}
CheckValue<IkReal> x2441=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2441.valid){
continue;
}
CheckValue<IkReal> x2442=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2442.valid){
continue;
}
CheckValue<IkReal> x2443=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2443.valid){
continue;
}
CheckValue<IkReal> x2444=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2444.valid){
continue;
}
CheckValue<IkReal> x2445=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2445.valid){
continue;
}
CheckValue<IkReal> x2446=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2446.valid){
continue;
}
CheckValue<IkReal> x2447=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2447.valid){
continue;
}
CheckValue<IkReal> x2448=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2448.valid){
continue;
}
CheckValue<IkReal> x2449=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2449.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2450=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2450.valid){
continue;
}
CheckValue<IkReal> x2451=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2451.valid){
continue;
}
CheckValue<IkReal> x2452=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2452.valid){
continue;
}
CheckValue<IkReal> x2453=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2453.valid){
continue;
}
CheckValue<IkReal> x2454=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2454.valid){
continue;
}
CheckValue<IkReal> x2455=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2455.valid){
continue;
}
CheckValue<IkReal> x2456=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2456.valid){
continue;
}
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2457.valid){
continue;
}
CheckValue<IkReal> x2458=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2458.valid){
continue;
}
CheckValue<IkReal> x2459=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2459.valid){
continue;
}
CheckValue<IkReal> x2460=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2460.valid){
continue;
}
CheckValue<IkReal> x2461=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2461.valid){
continue;
}
CheckValue<IkReal> x2462=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2462.valid){
continue;
}
CheckValue<IkReal> x2463=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2463.valid){
continue;
}
CheckValue<IkReal> x2464=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2464.valid){
continue;
}
CheckValue<IkReal> x2465=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2465.valid){
continue;
}
CheckValue<IkReal> x2466=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2466.valid){
continue;
}
CheckValue<IkReal> x2467=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2467.valid){
continue;
}
CheckValue<IkReal> x2468=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2468.valid){
continue;
}
CheckValue<IkReal> x2469=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2469.valid){
continue;
}
CheckValue<IkReal> x2470=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2470.valid){
continue;
}
CheckValue<IkReal> x2471=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2471.valid){
continue;
}
CheckValue<IkReal> x2472=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2472.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst2=((((((((-1.0)*(((((((((IKsin(((3.88804)*(x2427.value))))*(IKsin(((15.1168550416)*npz*(x2428.value))))))+(((IKcos(((3.88804)*(x2429.value))))*(IKcos(((15.1168550416)*npz*(x2430.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x2431.value))))))+(((((((IKcos(((15.1168550416)*npz*(x2432.value))))*(IKsin(((3.88804)*(x2433.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2434.value))))*(IKsin(((15.1168550416)*npz*(x2435.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x2436.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x2437.value))))))+(((-1.0)*(((((((((-1.0)*(IKsin(((3.88804)*(x2438.value))))*(IKsin(((15.1168550416)*npz*(x2439.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2440.value))))*(IKcos(((15.1168550416)*npz*(x2441.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x2442.value))))))+(((((((IKcos(((15.1168550416)*npz*(x2443.value))))*(IKsin(((3.88804)*(x2444.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2445.value))))*(IKsin(((15.1168550416)*npz*(x2446.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x2447.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x2448.value))))))))*(IKsin(((0.5)*(x2449.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x2450.value))))*(IKsin(((3.88804)*(x2451.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2452.value))))*(IKsin(((15.1168550416)*npz*(x2453.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x2454.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(x2455.value))))*(IKsin(((15.1168550416)*npz*(x2456.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2457.value))))*(IKcos(((15.1168550416)*npz*(x2458.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x2459.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x2460.value))))))+(((((((((((IKsin(((3.88804)*(x2461.value))))*(IKsin(((15.1168550416)*npz*(x2462.value))))))+(((IKcos(((3.88804)*(x2463.value))))*(IKcos(((15.1168550416)*npz*(x2464.value))))))))*(IKcos(((3.88804)*(r22*r22)*(x2465.value))))))+(((((((IKcos(((15.1168550416)*npz*(x2466.value))))*(IKsin(((3.88804)*(x2467.value))))))+(((-1.0)*(IKcos(((3.88804)*(x2468.value))))*(IKsin(((15.1168550416)*npz*(x2469.value))))))))*(IKsin(((3.88804)*(r22*r22)*(x2470.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x2471.value))))))))*(IKcos(((0.5)*(x2472.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
IkReal x2473=r22*r22;
j0eval[0]=((1.0)+(x2473*x2473)+(((-2.0)*x2473)));
j0eval[1]=((-1.0)+x2473);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2475=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2475.valid){
continue;
}
CheckValue<IkReal> x2476=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2476.valid){
continue;
}
CheckValue<IkReal> x2477=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2477.valid){
continue;
}
CheckValue<IkReal> x2478=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2478.valid){
continue;
}
CheckValue<IkReal> x2479=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2479.valid){
continue;
}
CheckValue<IkReal> x2480=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2480.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2481=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2481.valid){
continue;
}
CheckValue<IkReal> x2482=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2482.valid){
continue;
}
CheckValue<IkReal> x2483=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2483.valid){
continue;
}
CheckValue<IkReal> x2484=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2484.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2485=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2485.valid){
continue;
}
CheckValue<IkReal> x2486=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2486.valid){
continue;
}
CheckValue<IkReal> x2487=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2487.valid){
continue;
}
CheckValue<IkReal> x2488=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2488.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2489=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2489.valid){
continue;
}
CheckValue<IkReal> x2490=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2490.valid){
continue;
}
CheckValue<IkReal> x2491=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2491.valid){
continue;
}
CheckValue<IkReal> x2492=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2492.valid){
continue;
}
CheckValue<IkReal> x2493=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2493.valid){
continue;
}
CheckValue<IkReal> x2494=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2494.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2495=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2495.valid){
continue;
}
CheckValue<IkReal> x2496=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2496.valid){
continue;
}
CheckValue<IkReal> x2497=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2497.valid){
continue;
}
CheckValue<IkReal> x2498=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2498.valid){
continue;
}
CheckValue<IkReal> x2499=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2499.valid){
continue;
}
CheckValue<IkReal> x2500=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2500.valid){
continue;
}
CheckValue<IkReal> x2501=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2501.valid){
continue;
}
CheckValue<IkReal> x2502=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2502.valid){
continue;
}
CheckValue<IkReal> x2503=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2503.valid){
continue;
}
CheckValue<IkReal> x2504=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2504.valid){
continue;
}
CheckValue<IkReal> x2505=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2505.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2506=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2506.valid){
continue;
}
CheckValue<IkReal> x2507=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2507.valid){
continue;
}
CheckValue<IkReal> x2508=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2508.valid){
continue;
}
CheckValue<IkReal> x2509=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2509.valid){
continue;
}
CheckValue<IkReal> x2510=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2510.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2511=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2511.valid){
continue;
}
CheckValue<IkReal> x2512=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2512.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2513=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2513.valid){
continue;
}
CheckValue<IkReal> x2514=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2514.valid){
continue;
}
CheckValue<IkReal> x2515=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2515.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2516=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2516.valid){
continue;
}
CheckValue<IkReal> x2517=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2517.valid){
continue;
}
CheckValue<IkReal> x2518=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2518.valid){
continue;
}
CheckValue<IkReal> x2519=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2519.valid){
continue;
}
CheckValue<IkReal> x2520=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2520.valid){
continue;
}
CheckValue<IkReal> x2521=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2521.valid){
continue;
}
CheckValue<IkReal> x2522=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2522.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2523=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2523.valid){
continue;
}
CheckValue<IkReal> x2524=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2524.valid){
continue;
}
CheckValue<IkReal> x2525=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2525.valid){
continue;
}
CheckValue<IkReal> x2526=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2526.valid){
continue;
}
CheckValue<IkReal> x2527=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2527.valid){
continue;
}
CheckValue<IkReal> x2528=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2528.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2529=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2529.valid){
continue;
}
CheckValue<IkReal> x2530=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2530.valid){
continue;
}
CheckValue<IkReal> x2531=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2531.valid){
continue;
}
CheckValue<IkReal> x2532=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2532.valid){
continue;
}
CheckValue<IkReal> x2533=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2533.valid){
continue;
}
CheckValue<IkReal> x2534=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2534.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2535=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2535.valid){
continue;
}
CheckValue<IkReal> x2536=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2536.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2537=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2537.valid){
continue;
}
CheckValue<IkReal> x2538=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2538.valid){
continue;
}
CheckValue<IkReal> x2539=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2539.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2540=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2540.valid){
continue;
}
CheckValue<IkReal> x2541=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2541.valid){
continue;
}
CheckValue<IkReal> x2542=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2542.valid){
continue;
}
CheckValue<IkReal> x2543=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2543.valid){
continue;
}
CheckValue<IkReal> x2544=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2544.valid){
continue;
}
CheckValue<IkReal> x2545=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2545.valid){
continue;
}
CheckValue<IkReal> x2546=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2546.valid){
continue;
}
CheckValue<IkReal> x2547=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2547.valid){
continue;
}
CheckValue<IkReal> x2548=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2548.valid){
continue;
}
CheckValue<IkReal> x2549=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2549.valid){
continue;
}
CheckValue<IkReal> x2550=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2550.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2551=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2551.valid){
continue;
}
CheckValue<IkReal> x2552=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2552.valid){
continue;
}
CheckValue<IkReal> x2553=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2553.valid){
continue;
}
CheckValue<IkReal> x2554=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2554.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2555.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2556=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2556.valid){
continue;
}
CheckValue<IkReal> x2557=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2557.valid){
continue;
}
CheckValue<IkReal> x2558=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2558.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2559=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2559.valid){
continue;
}
CheckValue<IkReal> x2560=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2560.valid){
continue;
}
CheckValue<IkReal> x2561=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2561.valid){
continue;
}
CheckValue<IkReal> x2562=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2562.valid){
continue;
}
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2563.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2564=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2564.valid){
continue;
}
CheckValue<IkReal> x2565=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2565.valid){
continue;
}
CheckValue<IkReal> x2566=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2566.valid){
continue;
}
CheckValue<IkReal> x2567=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2567.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2568=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2568.valid){
continue;
}
CheckValue<IkReal> x2569=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2569.valid){
continue;
}
CheckValue<IkReal> x2570=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2570.valid){
continue;
}
CheckValue<IkReal> x2571=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2571.valid){
continue;
}
CheckValue<IkReal> x2572=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2572.valid){
continue;
}
CheckValue<IkReal> x2573=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2573.valid){
continue;
}
CheckValue<IkReal> x2574=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2574.valid){
continue;
}
CheckValue<IkReal> x2575=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2575.valid){
continue;
}
CheckValue<IkReal> x2576=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2576.valid){
continue;
}
CheckValue<IkReal> x2577=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2577.valid){
continue;
}
CheckValue<IkReal> x2578=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2578.valid){
continue;
}
CheckValue<IkReal> x2579=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2579.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2580=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2580.valid){
continue;
}
CheckValue<IkReal> x2581=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2581.valid){
continue;
}
CheckValue<IkReal> x2582=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2582.valid){
continue;
}
CheckValue<IkReal> x2583=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2583.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2584=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2584.valid){
continue;
}
CheckValue<IkReal> x2585=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2585.valid){
continue;
}
CheckValue<IkReal> x2586=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2586.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2587=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2587.valid){
continue;
}
CheckValue<IkReal> x2588=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2588.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2589=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2589.valid){
continue;
}
CheckValue<IkReal> x2590=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2590.valid){
continue;
}
CheckValue<IkReal> x2591=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2591.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2592=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2592.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2593=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2593.valid){
continue;
}
CheckValue<IkReal> x2594=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2594.valid){
continue;
}
CheckValue<IkReal> x2595=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2595.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2596=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2596.valid){
continue;
}
CheckValue<IkReal> x2597=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2597.valid){
continue;
}
CheckValue<IkReal> x2598=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2598.valid){
continue;
}
CheckValue<IkReal> x2599=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2599.valid){
continue;
}
CheckValue<IkReal> x2600=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2600.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2601=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2601.valid){
continue;
}
CheckValue<IkReal> x2602=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2602.valid){
continue;
}
CheckValue<IkReal> x2603=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2603.valid){
continue;
}
CheckValue<IkReal> x2604=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2604.valid){
continue;
}
CheckValue<IkReal> x2605=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2605.valid){
continue;
}
CheckValue<IkReal> x2606=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2606.valid){
continue;
}
CheckValue<IkReal> x2607=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2607.valid){
continue;
}
CheckValue<IkReal> x2608=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2608.valid){
continue;
}
CheckValue<IkReal> x2609=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2609.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2610=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2610.valid){
continue;
}
CheckValue<IkReal> x2611=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2611.valid){
continue;
}
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2612.valid){
continue;
}
CheckValue<IkReal> x2613=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2613.valid){
continue;
}
CheckValue<IkReal> x2614=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2614.valid){
continue;
}
CheckValue<IkReal> x2615=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2615.valid){
continue;
}
CheckValue<IkReal> x2616=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2616.valid){
continue;
}
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2617.valid){
continue;
}
CheckValue<IkReal> x2618=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2618.valid){
continue;
}
CheckValue<IkReal> x2619=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2619.valid){
continue;
}
CheckValue<IkReal> x2620=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2620.valid){
continue;
}
CheckValue<IkReal> x2621=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2621.valid){
continue;
}
CheckValue<IkReal> x2622=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2622.valid){
continue;
}
CheckValue<IkReal> x2623=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2623.valid){
continue;
}
CheckValue<IkReal> x2624=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2624.valid){
continue;
}
CheckValue<IkReal> x2625=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2625.valid){
continue;
}
CheckValue<IkReal> x2626=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2626.valid){
continue;
}
CheckValue<IkReal> x2627=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2627.valid){
continue;
}
CheckValue<IkReal> x2628=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2628.valid){
continue;
}
CheckValue<IkReal> x2629=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2629.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2630=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2630.valid){
continue;
}
CheckValue<IkReal> x2631=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2631.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2632=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2632.valid){
continue;
}
CheckValue<IkReal> x2633=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2633.valid){
continue;
}
CheckValue<IkReal> x2634=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2634.valid){
continue;
}
CheckValue<IkReal> x2635=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2635.valid){
continue;
}
CheckValue<IkReal> x2636=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2636.valid){
continue;
}
CheckValue<IkReal> x2637=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2637.valid){
continue;
}
CheckValue<IkReal> x2638=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2638.valid){
continue;
}
CheckValue<IkReal> x2639=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2639.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2640=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2640.valid){
continue;
}
CheckValue<IkReal> x2641=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2641.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2642=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2642.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2643=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2643.valid){
continue;
}
CheckValue<IkReal> x2644=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2644.valid){
continue;
}
CheckValue<IkReal> x2645=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2645.valid){
continue;
}
CheckValue<IkReal> x2646=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2646.valid){
continue;
}
CheckValue<IkReal> x2647=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2647.valid){
continue;
}
CheckValue<IkReal> x2648=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2648.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2649=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2649.valid){
continue;
}
CheckValue<IkReal> x2650=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2650.valid){
continue;
}
CheckValue<IkReal> x2651=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2651.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2652=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2652.valid){
continue;
}
CheckValue<IkReal> x2653=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2653.valid){
continue;
}
CheckValue<IkReal> x2654=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2654.valid){
continue;
}
CheckValue<IkReal> x2655=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2655.valid){
continue;
}
CheckValue<IkReal> x2656=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2656.valid){
continue;
}
CheckValue<IkReal> x2657=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2657.valid){
continue;
}
CheckValue<IkReal> x2658=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2658.valid){
continue;
}
CheckValue<IkReal> x2659=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2659.valid){
continue;
}
CheckValue<IkReal> x2660=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2660.valid){
continue;
}
CheckValue<IkReal> x2661=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2661.valid){
continue;
}
CheckValue<IkReal> x2662=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2662.valid){
continue;
}
CheckValue<IkReal> x2663=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2663.valid){
continue;
}
CheckValue<IkReal> x2664=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2664.valid){
continue;
}
CheckValue<IkReal> x2665=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2665.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2666=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2666.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2667=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2667.valid){
continue;
}
CheckValue<IkReal> x2668=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2668.valid){
continue;
}
CheckValue<IkReal> x2669=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2669.valid){
continue;
}
CheckValue<IkReal> x2670=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2670.valid){
continue;
}
CheckValue<IkReal> x2671=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2671.valid){
continue;
}
CheckValue<IkReal> x2672=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2672.valid){
continue;
}
CheckValue<IkReal> x2673=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2673.valid){
continue;
}
CheckValue<IkReal> x2674=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2674.valid){
continue;
}
CheckValue<IkReal> x2675=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2675.valid){
continue;
}
CheckValue<IkReal> x2676=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2676.valid){
continue;
}
CheckValue<IkReal> x2677=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2677.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2678=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2678.valid){
continue;
}
CheckValue<IkReal> x2679=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2679.valid){
continue;
}
CheckValue<IkReal> x2680=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2680.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2681=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2681.valid){
continue;
}
CheckValue<IkReal> x2682=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2682.valid){
continue;
}
CheckValue<IkReal> x2683=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2683.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2684=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2684.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2685=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2685.valid){
continue;
}
CheckValue<IkReal> x2686=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2686.valid){
continue;
}
CheckValue<IkReal> x2687=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2687.valid){
continue;
}
CheckValue<IkReal> x2688=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2688.valid){
continue;
}
CheckValue<IkReal> x2689=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2689.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2690=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2690.valid){
continue;
}
CheckValue<IkReal> x2691=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2691.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2692=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2692.valid){
continue;
}
CheckValue<IkReal> x2693=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2693.valid){
continue;
}
CheckValue<IkReal> x2694=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2694.valid){
continue;
}
CheckValue<IkReal> x2695=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2695.valid){
continue;
}
CheckValue<IkReal> x2696=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2696.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2697=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2697.valid){
continue;
}
CheckValue<IkReal> x2698=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2698.valid){
continue;
}
CheckValue<IkReal> x2699=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2699.valid){
continue;
}
CheckValue<IkReal> x2700=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2700.valid){
continue;
}
CheckValue<IkReal> x2701=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2701.valid){
continue;
}
CheckValue<IkReal> x2702=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2702.valid){
continue;
}
CheckValue<IkReal> x2703=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2703.valid){
continue;
}
CheckValue<IkReal> x2704=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2704.valid){
continue;
}
CheckValue<IkReal> x2705=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2705.valid){
continue;
}
CheckValue<IkReal> x2706=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2706.valid){
continue;
}
CheckValue<IkReal> x2707=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2707.valid){
continue;
}
CheckValue<IkReal> x2708=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2708.valid){
continue;
}
CheckValue<IkReal> x2709=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2709.valid){
continue;
}
CheckValue<IkReal> x2710=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2710.valid){
continue;
}
CheckValue<IkReal> x2711=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2711.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2712=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2712.valid){
continue;
}
CheckValue<IkReal> x2713=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2713.valid){
continue;
}
CheckValue<IkReal> x2714=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2714.valid){
continue;
}
CheckValue<IkReal> x2715=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2715.valid){
continue;
}
CheckValue<IkReal> x2716=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2716.valid){
continue;
}
CheckValue<IkReal> x2717=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2717.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2718=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2718.valid){
continue;
}
CheckValue<IkReal> x2719=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2719.valid){
continue;
}
CheckValue<IkReal> x2720=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2720.valid){
continue;
}
CheckValue<IkReal> x2721=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2721.valid){
continue;
}
CheckValue<IkReal> x2722=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2722.valid){
continue;
}
CheckValue<IkReal> x2723=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2723.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2724=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2724.valid){
continue;
}
CheckValue<IkReal> x2725=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2725.valid){
continue;
}
CheckValue<IkReal> x2726=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2726.valid){
continue;
}
CheckValue<IkReal> x2727=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2727.valid){
continue;
}
CheckValue<IkReal> x2728=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2728.valid){
continue;
}
CheckValue<IkReal> x2729=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2729.valid){
continue;
}
CheckValue<IkReal> x2730=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2730.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2731=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2731.valid){
continue;
}
CheckValue<IkReal> x2732=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2732.valid){
continue;
}
CheckValue<IkReal> x2733=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2733.valid){
continue;
}
CheckValue<IkReal> x2734=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2734.valid){
continue;
}
CheckValue<IkReal> x2735=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2735.valid){
continue;
}
CheckValue<IkReal> x2736=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2736.valid){
continue;
}
CheckValue<IkReal> x2737=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2737.valid){
continue;
}
CheckValue<IkReal> x2738=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2738.valid){
continue;
}
CheckValue<IkReal> x2739=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2739.valid){
continue;
}
CheckValue<IkReal> x2740=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2740.valid){
continue;
}
CheckValue<IkReal> x2741=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2741.valid){
continue;
}
CheckValue<IkReal> x2742=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2742.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2743=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2743.valid){
continue;
}
CheckValue<IkReal> x2744=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2744.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2745=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2745.valid){
continue;
}
CheckValue<IkReal> x2746=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2746.valid){
continue;
}
CheckValue<IkReal> x2747=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2747.valid){
continue;
}
CheckValue<IkReal> x2748=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2748.valid){
continue;
}
CheckValue<IkReal> x2749=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2749.valid){
continue;
}
CheckValue<IkReal> x2750=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2750.valid){
continue;
}
CheckValue<IkReal> x2751=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2751.valid){
continue;
}
CheckValue<IkReal> x2752=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2752.valid){
continue;
}
CheckValue<IkReal> x2753=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2753.valid){
continue;
}
CheckValue<IkReal> x2754=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2754.valid){
continue;
}
CheckValue<IkReal> x2755=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2755.valid){
continue;
}
CheckValue<IkReal> x2756=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2756.valid){
continue;
}
CheckValue<IkReal> x2757=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2757.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2758=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2758.valid){
continue;
}
CheckValue<IkReal> x2759=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2759.valid){
continue;
}
CheckValue<IkReal> x2760=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2760.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2761=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2761.valid){
continue;
}
CheckValue<IkReal> x2762=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2762.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2763=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2763.valid){
continue;
}
CheckValue<IkReal> x2764=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2764.valid){
continue;
}
CheckValue<IkReal> x2765=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2765.valid){
continue;
}
CheckValue<IkReal> x2766=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2766.valid){
continue;
}
CheckValue<IkReal> x2767=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2767.valid){
continue;
}
CheckValue<IkReal> x2768=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2768.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2769=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2769.valid){
continue;
}
CheckValue<IkReal> x2770=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2770.valid){
continue;
}
CheckValue<IkReal> x2771=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2771.valid){
continue;
}
CheckValue<IkReal> x2772=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2772.valid){
continue;
}
CheckValue<IkReal> x2773=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2773.valid){
continue;
}
CheckValue<IkReal> x2774=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2774.valid){
continue;
}
CheckValue<IkReal> x2775=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2775.valid){
continue;
}
CheckValue<IkReal> x2776=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2776.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2777=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2777.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2778=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2778.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2779=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2779.valid){
continue;
}
CheckValue<IkReal> x2780=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2780.valid){
continue;
}
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2781.valid){
continue;
}
CheckValue<IkReal> x2782=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2782.valid){
continue;
}
CheckValue<IkReal> x2783=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2783.valid){
continue;
}
CheckValue<IkReal> x2784=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2784.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2474 = IKatan2WithCheck(IkReal(((((13817.9729109302)*r12*(npz*npz*npz)*(x2475.value)*(x2476.value)))+(((-2665.47661156855)*r12*(pz*pz)*(x2477.value)*(x2478.value)))+(((-457.038612624934)*r12*(npz*npz)*(x2479.value)*(x2480.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((30.23371008)*py*(npz*npz)*(x2481.value)))+(((228.519306300373)*py*(pz*pz)*(r22*r22)*(x2482.value)))+(((-114.259653174374)*r12*(pz*pz)*(x2483.value)*(x2484.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((10363.4796837461)*npz*pp*r12*(r22*r22)*(x2485.value)*(x2486.value)))+(((457.038612600747)*npz*r12*(pz*pz)*(r22*r22)*(x2487.value)))+(((3.0)*r12*(r22*r22)*(x2488.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((5330.95322257286)*r12*(npz*npz)*(r22*r22)*(x2489.value)*(x2490.value)))+(((-176.324811190502)*r12*(pz*pz)*(r22*r22)*(x2491.value)))+(((10661.9064451457)*npz*pz*r12*r22*(x2492.value)*(x2493.value)))+(((3.88804)*py*(x2494.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((235.099748278886)*r12*(npz*npz)*(r22*r22)*(x2495.value)))+(((58.7749370759425)*r12*(r22*r22*r22*r22*r22*r22)*(x2496.value)*(x2497.value)))+(((31090.4390490445)*npz*r12*(pz*pz)*(r22*r22)*(x2498.value)*(x2499.value)))+(((2665.47661100431)*r12*(pz*pz)*(r22*r22*r22*r22)*(x2500.value)*(x2501.value)))+(((-41453.9187327906)*pz*r12*r22*(npz*npz)*(x2502.value)*(x2503.value)))+(((-342.77895945056)*r12*(pz*pz)*(r22*r22)*(x2504.value)*(x2505.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612697495)*npz*pp*r12*(r22*r22)*(x2506.value)))+(((-3.88804)*pp*r12*(x2507.value)))+(((-4.0)*npz*r12*(r22*r22)*(x2508.value)))+(((-228.519306348747)*pp*py*(x2509.value)))+(((0.514398000020576)*npz*r12*(x2510.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-114.259653174374)*pp*r12*(r22*r22)*(x2511.value)*(x2512.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((3.88804)*pp*r12*(r22*r22)*(x2513.value)))+(((-22.6752825624)*r12*(r22*r22*r22*r22)*(x2514.value)*(x2515.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-10661.9064451457)*npz*pz*r12*(r22*r22*r22)*(x2516.value)*(x2517.value)))+(((176.324811227827)*r12*(r22*r22)*(x2518.value)*(x2519.value)))+(((-176.324811227827)*r12*(r22*r22*r22*r22)*(x2520.value)*(x2521.value)))+(((-0.0992144884094382)*r12*(x2522.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-117.549874139443)*npz*py*(x2523.value)))+(((-30.23371008)*npz*py*pz*r22*(x2524.value)))+(((-10363.4796837461)*r12*r22*(pz*pz*pz)*(x2525.value)*(x2526.value)))+(((-176.324811209165)*npz*r12*(r22*r22)*(x2527.value)*(x2528.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.257199000010288)*pp*r12))+(((120.9348403232)*npz*r12*(x2529.value)))+(((-15.5521599983539)*r12*(npz*npz)*(x2530.value)))+(((90.70113024)*pz*r12*(r22*r22*r22)*(x2531.value)))+(((0.0661263256062921)*py))+(((-5330.9532231371)*pp*r12*(r22*r22)*(x2532.value)*(x2533.value)))+(((-30.23371008)*r12*(npz*npz)*(x2534.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((114.259653174374)*pp*r12*(x2535.value)*(x2536.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((30.2337100832)*npz*r12*(r22*r22*r22*r22)*(x2537.value)))+(((914.077225249868)*npz*pz*r12*r22*(x2538.value)*(x2539.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-1371.11583794736)*npz*r12*(r22*r22)*(x2540.value)*(x2541.value)))+(((7.77607999917696)*py*pz*r22*(x2542.value)))+(((0.132302651212584)*npz*r12))+(((-2.0)*py*(r22*r22)*(x2543.value)))+(((-176.324811227827)*r12*(pz*pz)*(x2544.value)))+(((15.5521599983539)*npz*pz*r12*r22*(x2545.value)))+(((-587.749370697216)*r12*(npz*npz)*(x2546.value)))+(((228.519306348747)*pp*py*(r22*r22)*(x2547.value)))+(((6.99962207830647)*npz*r12*(x2548.value)))+(((176.324811209165)*npz*r12*(x2549.value)*(x2550.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-2.99962207830647)*pz*r12*r22*(x2551.value)))+(((228.519306348747)*py*(pz*pz)*(x2552.value)))+(((-22.6752825624)*r12*(x2553.value)*(x2554.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-3.88804)*py*(r22*r22)*(x2555.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612697495)*npz*r12*(pz*pz)*(x2556.value)))+(((-90.70113024)*pz*r12*r22*(x2557.value)))+(((15.11685504)*py*pz*r22*(x2558.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((23.32824)*r12*(r22*r22)*(x2559.value)))+(((-11.66412)*r12*(r22*r22*r22*r22)*(x2560.value)))+(((914.077225298242)*r12*(npz*npz*npz)*(x2561.value)))+(((-0.017007624820293)*r12))+(((176.324811209165)*pz*r12*(r22*r22*r22)*(x2562.value)*(x2563.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.771499799030864)*r12*(r22*r22)*(x2564.value)))+(((10363.4796837461)*pp*pz*r12*r22*(x2565.value)*(x2566.value)))+(((-7.77608)*npz*r12*(r22*r22)*(x2567.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811227827)*pp*r12*(r22*r22)*(x2568.value)))+(((-685.557918973681)*pz*r12*r22*(x2569.value)*(x2570.value)))+(((176.324811227827)*pp*r12*(x2571.value)))+(((-10363.4796837461)*pp*pz*r12*(r22*r22*r22)*(x2572.value)*(x2573.value)))+(((-3454.4932271841)*r12*(pz*pz*pz)*(r22*r22*r22)*(x2574.value)*(x2575.value)))+(((1371.11583794736)*pz*r12*(r22*r22*r22)*(x2576.value)*(x2577.value)))+(((7.77608)*npz*py*(r22*r22)*(x2578.value)))+(((-11.6641199987654)*pz*r12*r22*(x2579.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-11.66412)*r12*(x2580.value)))+(((-10363.4796837461)*npz*pp*r12*(x2581.value)*(x2582.value)))+(((0.257199000010288)*py*(x2583.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((117.549874139443)*py*pz*r22*(x2584.value)))+(((-176.324811209165)*pz*r12*r22*(x2585.value)*(x2586.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((45.3505651248)*r12*(r22*r22)*(x2587.value)*(x2588.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((5.64239395899188e-7)*r12*(pz*pz)*(r22*r22)*(x2589.value)*(x2590.value)))+(((30.23371008)*npz*pz*r12*r22*(x2591.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.5)*pp*r12*(x2592.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((15.1168550416)*py*(r22*r22*r22*r22)*(x2593.value)))+(((-30.2337100832)*py*(r22*r22)*(x2594.value)))+(((-0.514398000020576)*npz*py))+(((-1.0)*npz*py*(x2595.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((2665.47661156855)*pp*r12*(r22*r22*r22*r22)*(x2596.value)*(x2597.value)))+(((-5330.95322257286)*r12*(npz*npz)*(x2598.value)*(x2599.value)))+(((-15.11685504)*npz*py*(x2600.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((685.557918973681)*npz*r12*(x2601.value)*(x2602.value)))+(((2665.47661156855)*pp*r12*(x2603.value)*(x2604.value)))+(((-15.11685504)*pp*pz*r12*r22*(x2605.value)))+(((-457.038612697495)*npz*pp*r12*(x2606.value)))+(((2.0)*py*(x2607.value)))+(((-235.099748278886)*npz*pz*r12*(r22*r22*r22)*(x2608.value)))+(((-3.0)*r12*(x2609.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-117.549874139443)*py*pz*(r22*r22*r22)*(x2610.value)))+(((117.549874139443)*npz*py*(r22*r22)*(x2611.value)))+(((-1828.15445059648)*pz*r12*r22*(npz*npz)*(x2612.value)))+(((-151.1685504064)*npz*r12*(r22*r22)*(x2613.value)))+(((15.11685504)*npz*pp*r12*(x2614.value)))+(((-15.552159999177)*npz*py*(x2615.value)))+(((-914.077225298242)*npz*py*pz*r22*(x2616.value)))+(((457.038612649121)*py*(npz*npz)*(x2617.value)))+(((-0.771499799030864)*r12*(x2618.value)))+(((10363.4796837461)*npz*r12*(pz*pz)*(x2619.value)*(x2620.value)))+(((-685.557918973681)*pz*r12*(r22*r22*r22*r22*r22)*(x2621.value)*(x2622.value)))+(((15.1168550416)*py*(x2623.value)))+(((685.557918973681)*npz*r12*(r22*r22*r22*r22)*(x2624.value)*(x2625.value)))+((pp*py))+(((-58.7749370759425)*r12*(x2626.value)*(x2627.value)))+(((940.398993115546)*npz*pz*r12*r22*(x2628.value)))+(((19.4401999987654)*npz*r12*(x2629.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))),IkReal(((((-90.70113024)*pz*r02*r22*(x2630.value)))+(((-3.88804)*px*(r22*r22)*(x2631.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((228.519306348747)*pp*px*(r22*r22)*(x2632.value)))+(((6.99962207830647)*npz*r02*(x2633.value)))+(((-10363.4796837461)*r02*r22*(pz*pz*pz)*(x2634.value)*(x2635.value)))+(((23.32824)*r02*(r22*r22)*(x2636.value)))+(((15.1168550416)*px*(x2637.value)))+(((-30.2337100832)*px*(r22*r22)*(x2638.value)))+(((-0.5)*pp*r02*(x2639.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-114.259653174374)*pp*r02*(r22*r22)*(x2640.value)*(x2641.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.257199000010288)*pp*r02))+(((19.4401999987654)*npz*r02*(x2642.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((15.5521599983539)*npz*pz*r02*r22*(x2643.value)))+(((-235.099748278886)*npz*pz*r02*(r22*r22*r22)*(x2644.value)))+(((-685.557918973681)*pz*r02*(r22*r22*r22*r22*r22)*(x2645.value)*(x2646.value)))+(((15.1168550416)*px*(r22*r22*r22*r22)*(x2647.value)))+(((-3.0)*r02*(x2648.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((10661.9064451457)*npz*pz*r02*r22*(x2649.value)*(x2650.value)))+(((-1.0)*npz*px*(x2651.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-117.549874139443)*px*pz*(r22*r22*r22)*(x2652.value)))+(((-3454.4932271841)*r02*(pz*pz*pz)*(r22*r22*r22)*(x2653.value)*(x2654.value)))+(((10363.4796837461)*npz*r02*(pz*pz)*(x2655.value)*(x2656.value)))+(((457.038612649121)*px*(npz*npz)*(x2657.value)))+(((2665.47661156855)*pp*r02*(r22*r22*r22*r22)*(x2658.value)*(x2659.value)))+(((-5330.9532231371)*pp*r02*(r22*r22)*(x2660.value)*(x2661.value)))+(((0.132302651212584)*npz*r02))+(((0.0661263256062921)*px))+(((7.77607999917696)*px*pz*r22*(x2662.value)))+(((117.549874139443)*npz*px*(r22*r22)*(x2663.value)))+(((176.324811209165)*pz*r02*(r22*r22*r22)*(x2664.value)*(x2665.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.257199000010288)*px*(x2666.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((90.70113024)*pz*r02*(r22*r22*r22)*(x2667.value)))+(((-2.99962207830647)*pz*r02*r22*(x2668.value)))+(((1371.11583794736)*pz*r02*(r22*r22*r22)*(x2669.value)*(x2670.value)))+(((-58.7749370759425)*r02*(x2671.value)*(x2672.value)))+(((235.099748278886)*r02*(npz*npz)*(r22*r22)*(x2673.value)))+(((-10661.9064451457)*npz*pz*r02*(r22*r22*r22)*(x2674.value)*(x2675.value)))+(((-0.017007624820293)*r02))+(((914.077225249868)*npz*pz*r02*r22*(x2676.value)*(x2677.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((15.11685504)*npz*pp*r02*(x2678.value)))+(((-15.11685504)*pp*pz*r02*r22*(x2679.value)))+(((-11.6641199987654)*pz*r02*r22*(x2680.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((120.9348403232)*npz*r02*(x2681.value)))+(((0.771499799030864)*r02*(r22*r22)*(x2682.value)))+(((-15.11685504)*npz*px*(x2683.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-30.23371008)*r02*(npz*npz)*(x2684.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612697495)*npz*pp*r02*(r22*r22)*(x2685.value)))+(((-3.88804)*pp*r02*(x2686.value)))+(((-117.549874139443)*npz*px*(x2687.value)))+(((45.3505651248)*r02*(r22*r22)*(x2688.value)*(x2689.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-114.259653174374)*r02*(pz*pz)*(x2690.value)*(x2691.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((914.077225298242)*r02*(npz*npz*npz)*(x2692.value)))+(((-15.5521599983539)*r02*(npz*npz)*(x2693.value)))+(((-587.749370697216)*r02*(npz*npz)*(x2694.value)))+(((-342.77895945056)*r02*(pz*pz)*(r22*r22)*(x2695.value)*(x2696.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((30.23371008)*px*(npz*npz)*(x2697.value)))+(((2.0)*px*(x2698.value)))+(((457.038612600747)*npz*r02*(pz*pz)*(r22*r22)*(x2699.value)))+(((176.324811227827)*pp*r02*(x2700.value)))+(((176.324811227827)*r02*(r22*r22)*(x2701.value)*(x2702.value)))+(((-4.0)*npz*r02*(r22*r22)*(x2703.value)))+(((-457.038612697495)*npz*pp*r02*(x2704.value)))+(((-10363.4796837461)*npz*pp*r02*(x2705.value)*(x2706.value)))+(((685.557918973681)*npz*r02*(r22*r22*r22*r22)*(x2707.value)*(x2708.value)))+(((940.398993115546)*npz*pz*r02*r22*(x2709.value)))+(((176.324811209165)*npz*r02*(x2710.value)*(x2711.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((13817.9729109302)*r02*(npz*npz*npz)*(x2712.value)*(x2713.value)))+(((-176.324811190502)*r02*(pz*pz)*(r22*r22)*(x2714.value)))+(((228.519306348747)*px*(pz*pz)*(x2715.value)))+(((-22.6752825624)*r02*(x2716.value)*(x2717.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-685.557918973681)*pz*r02*r22*(x2718.value)*(x2719.value)))+(((-2665.47661156855)*r02*(pz*pz)*(x2720.value)*(x2721.value)))+(((114.259653174374)*pp*r02*(x2722.value)*(x2723.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((7.77608)*npz*px*(r22*r22)*(x2724.value)))+(((-10363.4796837461)*pp*pz*r02*(r22*r22*r22)*(x2725.value)*(x2726.value)))+(((117.549874139443)*px*pz*r22*(x2727.value)))+(((2665.47661100431)*r02*(pz*pz)*(r22*r22*r22*r22)*(x2728.value)*(x2729.value)))+(((15.11685504)*px*pz*r22*(x2730.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-914.077225298242)*npz*px*pz*r22*(x2731.value)))+(((-1371.11583794736)*npz*r02*(r22*r22)*(x2732.value)*(x2733.value)))+(((-30.23371008)*npz*px*pz*r22*(x2734.value)))+(((-0.514398000020576)*npz*px))+(((10363.4796837461)*npz*pp*r02*(r22*r22)*(x2735.value)*(x2736.value)))+(((-41453.9187327906)*pz*r02*r22*(npz*npz)*(x2737.value)*(x2738.value)))+(((-11.66412)*r02*(x2739.value)))+(((3.88804)*pp*r02*(r22*r22)*(x2740.value)))+(((-22.6752825624)*r02*(r22*r22*r22*r22)*(x2741.value)*(x2742.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-457.038612624934)*r02*(npz*npz)*(x2743.value)*(x2744.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((2665.47661156855)*pp*r02*(x2745.value)*(x2746.value)))+(((-176.324811227827)*pp*r02*(r22*r22)*(x2747.value)))+(((-1828.15445059648)*pz*r02*r22*(npz*npz)*(x2748.value)))+(((-2.0)*px*(r22*r22)*(x2749.value)))+(((5.64239395899188e-7)*r02*(pz*pz)*(r22*r22)*(x2750.value)*(x2751.value)))+(((-11.66412)*r02*(r22*r22*r22*r22)*(x2752.value)))+(((-0.771499799030864)*r02*(x2753.value)))+(((-151.1685504064)*npz*r02*(r22*r22)*(x2754.value)))+(((-5330.95322257286)*r02*(npz*npz)*(x2755.value)*(x2756.value)))+(((-0.0992144884094382)*r02*(x2757.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811227827)*r02*(r22*r22*r22*r22)*(x2758.value)*(x2759.value)))+(((0.514398000020576)*npz*r02*(x2760.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811209165)*pz*r02*r22*(x2761.value)*(x2762.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((10363.4796837461)*pp*pz*r02*r22*(x2763.value)*(x2764.value)))+(((-15.552159999177)*npz*px*(x2765.value)))+(((30.2337100832)*npz*r02*(r22*r22*r22*r22)*(x2766.value)))+(((-176.324811209165)*npz*r02*(r22*r22)*(x2767.value)*(x2768.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811227827)*r02*(pz*pz)*(x2769.value)))+(((-228.519306348747)*pp*px*(x2770.value)))+(((685.557918973681)*npz*r02*(x2771.value)*(x2772.value)))+(((457.038612697495)*npz*r02*(pz*pz)*(x2773.value)))+(((31090.4390490445)*npz*r02*(pz*pz)*(r22*r22)*(x2774.value)*(x2775.value)))+(((30.23371008)*npz*pz*r02*r22*(x2776.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+((pp*px))+(((3.88804)*px*(x2777.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-7.77608)*npz*r02*(r22*r22)*(x2778.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((58.7749370759425)*r02*(r22*r22*r22*r22*r22*r22)*(x2779.value)*(x2780.value)))+(((228.519306300373)*px*(pz*pz)*(r22*r22)*(x2781.value)))+(((5330.95322257286)*r02*(npz*npz)*(r22*r22)*(x2782.value)*(x2783.value)))+(((3.0)*r02*(r22*r22)*(x2784.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2474.valid){
continue;
}
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2786.valid){
continue;
}
CheckValue<IkReal> x2787=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2787.valid){
continue;
}
CheckValue<IkReal> x2788=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2788.valid){
continue;
}
CheckValue<IkReal> x2789=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2789.valid){
continue;
}
CheckValue<IkReal> x2790=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2790.valid){
continue;
}
CheckValue<IkReal> x2791=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2791.valid){
continue;
}
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2792.valid){
continue;
}
CheckValue<IkReal> x2793=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2793.valid){
continue;
}
CheckValue<IkReal> x2794=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2794.valid){
continue;
}
CheckValue<IkReal> x2795=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2795.valid){
continue;
}
CheckValue<IkReal> x2796=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2796.valid){
continue;
}
CheckValue<IkReal> x2797=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2797.valid){
continue;
}
CheckValue<IkReal> x2798=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2798.valid){
continue;
}
CheckValue<IkReal> x2799=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2799.valid){
continue;
}
CheckValue<IkReal> x2800=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2800.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2801=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2801.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2802=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2802.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2803=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2803.valid){
continue;
}
CheckValue<IkReal> x2804=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2804.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2805=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2805.valid){
continue;
}
CheckValue<IkReal> x2806=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2806.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2807=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2807.valid){
continue;
}
CheckValue<IkReal> x2808=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2808.valid){
continue;
}
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2809.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2810=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2810.valid){
continue;
}
CheckValue<IkReal> x2811=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2811.valid){
continue;
}
CheckValue<IkReal> x2812=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2812.valid){
continue;
}
CheckValue<IkReal> x2813=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2813.valid){
continue;
}
CheckValue<IkReal> x2814=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2814.valid){
continue;
}
CheckValue<IkReal> x2815=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2815.valid){
continue;
}
CheckValue<IkReal> x2816=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2816.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2817=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2817.valid){
continue;
}
CheckValue<IkReal> x2818=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2818.valid){
continue;
}
CheckValue<IkReal> x2819=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2819.valid){
continue;
}
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2820.valid){
continue;
}
CheckValue<IkReal> x2821=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2821.valid){
continue;
}
CheckValue<IkReal> x2822=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2822.valid){
continue;
}
CheckValue<IkReal> x2823=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2823.valid){
continue;
}
CheckValue<IkReal> x2824=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2824.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2825=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2825.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2826=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2826.valid){
continue;
}
CheckValue<IkReal> x2827=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2827.valid){
continue;
}
CheckValue<IkReal> x2828=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2828.valid){
continue;
}
CheckValue<IkReal> x2829=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2829.valid){
continue;
}
CheckValue<IkReal> x2830=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2830.valid){
continue;
}
CheckValue<IkReal> x2831=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2831.valid){
continue;
}
CheckValue<IkReal> x2832=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2832.valid){
continue;
}
CheckValue<IkReal> x2833=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2833.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2834=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2834.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2835=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2835.valid){
continue;
}
CheckValue<IkReal> x2836=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2836.valid){
continue;
}
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2837.valid){
continue;
}
CheckValue<IkReal> x2838=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2838.valid){
continue;
}
CheckValue<IkReal> x2839=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2839.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2785=IKPowWithIntegerCheck(IKsign(((((1.209348403328)*(r12*r12)*(x2786.value)))+(((18.2815445040299)*(pz*pz)*(r02*r02)*(r22*r22)*(x2787.value)))+(((18.2815445078998)*pp*(r02*r02)*(r22*r22)*(x2788.value)))+(((-2.418696806656)*(r12*r12)*(r22*r22)*(x2789.value)))+(((18.2815445078998)*(pz*pz)*(r12*r12)*(x2790.value)))+(((-0.16)*(r12*r12)*(r22*r22)*(x2791.value)))+(((-2.4186968064)*py*pz*r12*r22*(x2792.value)))+(((-18.2815445078998)*pp*(r12*r12)*(x2793.value)))+(((0.16)*(r12*r12)*(x2794.value)))+(((1.209348403328)*(r12*r12)*(r22*r22*r22*r22)*(x2795.value)))+(((0.08)*(py*py)))+(((1.209348403328)*(r02*r02)*(x2796.value)))+(((-0.6220864)*py*r12*(x2797.value)))+(((0.6220864)*px*r02*(r22*r22)*(x2798.value)))+(((0.622086399934157)*pz*r22*(r02*r02)*(x2799.value)))+(((-1.2093484032)*npz*(r12*r12)*(x2800.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.020575920000823)*(r02*r02)*(x2801.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.3110432)*(r02*r02)*(r22*r22)*(x2802.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-9.40398993115546)*npz*(r12*r12)*(x2803.value)))+(((0.3110432)*(r12*r12)*(x2804.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.6220864)*py*r12*(r22*r22)*(x2805.value)))+(((-0.08)*py*r12*(x2806.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.622086399934157)*pz*r22*(r12*r12)*(x2807.value)))+(((-0.6220864)*px*r02*(x2808.value)))+(((0.3110432)*(r02*r02)*(x2809.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-9.40398993115546)*npz*(r02*r02)*(x2810.value)))+(((0.00529210604850337)*(r02*r02)))+(((2.4186968064)*npz*px*r02*(x2811.value)))+(((-0.0411518400016461)*py*r12))+(((-0.16)*(r02*r02)*(r22*r22)*(x2812.value)))+(((-73.1261780238593)*npz*pz*r22*(r02*r02)*(x2813.value)))+(((-9.40398993115546)*pz*(r12*r12)*(r22*r22*r22)*(x2814.value)))+(((0.00529210604850337)*(r12*r12)))+(((18.2815445078998)*pp*(r12*r12)*(r22*r22)*(x2815.value)))+(((-1.2093484032)*npz*(r02*r02)*(x2816.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((9.40398993115546)*pz*r22*(r02*r02)*(x2817.value)))+(((9.40398993115546)*npz*(r12*r12)*(r22*r22)*(x2818.value)))+(((0.08)*(px*px)))+(((-73.1261780238593)*npz*pz*r22*(r12*r12)*(x2819.value)))+(((-0.622086399934157)*npz*(r12*r12)*(x2820.value)))+(((-0.622086399934157)*npz*(r02*r02)*(x2821.value)))+(((18.2815445040299)*(pz*pz)*(r12*r12)*(r22*r22)*(x2822.value)))+(((-18.2815445078998)*pp*(r02*r02)*(x2823.value)))+(((1.2093484032)*pz*r22*(r02*r02)*(x2824.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.3110432)*(r12*r12)*(r22*r22)*(x2825.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((9.40398993115546)*pz*r22*(r12*r12)*(x2826.value)))+(((18.2815445078998)*(pz*pz)*(r02*r02)*(x2827.value)))+(((36.5630890119297)*(npz*npz)*(r02*r02)*(x2828.value)))+(((36.5630890119297)*(npz*npz)*(r12*r12)*(x2829.value)))+(((9.40398993115546)*npz*(r02*r02)*(r22*r22)*(x2830.value)))+(((2.4186968064)*npz*py*r12*(x2831.value)))+(((-2.418696806656)*(r02*r02)*(r22*r22)*(x2832.value)))+(((0.020575920000823)*(r12*r12)*(x2833.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.0411518400016461)*px*r02))+(((1.2093484032)*pz*r22*(r12*r12)*(x2834.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.16)*(r02*r02)*(x2835.value)))+(((1.209348403328)*(r02*r02)*(r22*r22*r22*r22)*(x2836.value)))+(((-2.4186968064)*px*pz*r02*r22*(x2837.value)))+(((-9.40398993115546)*pz*(r02*r02)*(r22*r22*r22)*(x2838.value)))+(((-0.08)*px*r02*(x2839.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))),-1);
if(!x2785.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2474.value)+(((1.5707963267949)*(x2785.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2840=IKsin(j0);
IkReal x2841=IKcos(j0);
IkReal x2842=r22*r22;
IkReal x2843=((15.11685504)*npz);
IkReal x2844=((914.077225394989)*pp);
IkReal x2845=((1.0)*x2841);
IkReal x2846=((15.11685504)*pz*r22);
IkReal x2847=((0.257199000010288)*x2840);
IkReal x2848=((3.88804)*x2842);
IkReal x2849=((0.257199000010288)*x2841);
IkReal x2850=((3.88804)*x2840);
IkReal x2851=((3.88804)*x2841);
IkReal x2852=x179;
IkReal x2853=(r12*x2852);
IkReal x2854=(r02*x2852);
if((((((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+((x2842*x2844))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x2844)))) < -0.00001)
continue;
IkReal x2855=IKsqrt(((((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+((x2842*x2844))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x2844))));
IkReal x2856=((0.5)*x2841*x2855);
IkReal x2857=((0.5)*x2840*x2855);
evalcond[0]=(((x2840*x2843*x2854))+(((-1.0)*x2840*x2846*x2854))+((px*x2840))+(((-1.0)*x2841*x2848*x2853))+(((-1.0)*x2850*x2854))+((r12*x2849))+((x2841*x2846*x2853))+((x2853*x2856))+(((-1.0)*py*x2845))+((x2851*x2853))+((x2840*x2848*x2854))+(((-1.0)*r02*x2847))+(((-1.0)*x2854*x2857))+(((-1.0)*x2841*x2843*x2853)));
evalcond[1]=((((-1.0)*py*x2840))+((x2840*x2846*x2853))+(((-1.0)*x2840*x2843*x2853))+(((-1.0)*x2841*x2848*x2854))+(((-1.0)*px*x2845))+((r12*x2847))+((x2841*x2846*x2854))+((x2853*x2857))+((x2850*x2853))+((x2851*x2854))+(((-1.0)*x2840*x2848*x2853))+((x2854*x2856))+(((-1.0)*x2841*x2843*x2854))+((r02*x2849)));
CheckValue<IkReal> x2858=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2858.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2859=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2859.valid){
continue;
}
CheckValue<IkReal> x2860=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2860.valid){
continue;
}
CheckValue<IkReal> x2861=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2861.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2862=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2862.valid){
continue;
}
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2863.valid){
continue;
}
CheckValue<IkReal> x2864=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2864.valid){
continue;
}
CheckValue<IkReal> x2865=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2865.valid){
continue;
}
CheckValue<IkReal> x2866=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2866.valid){
continue;
}
CheckValue<IkReal> x2867=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2867.valid){
continue;
}
CheckValue<IkReal> x2868=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2868.valid){
continue;
}
CheckValue<IkReal> x2869=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2869.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2870=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2870.valid){
continue;
}
CheckValue<IkReal> x2871=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2871.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2872=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2872.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2873=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2873.valid){
continue;
}
CheckValue<IkReal> x2874=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2874.valid){
continue;
}
CheckValue<IkReal> x2875=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2875.valid){
continue;
}
CheckValue<IkReal> x2876=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2876.valid){
continue;
}
CheckValue<IkReal> x2877=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2877.valid){
continue;
}
CheckValue<IkReal> x2878=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2878.valid){
continue;
}
CheckValue<IkReal> x2879=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2879.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2880=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2880.valid){
continue;
}
CheckValue<IkReal> x2881=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2881.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2882=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2882.valid){
continue;
}
CheckValue<IkReal> x2883=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2883.valid){
continue;
}
CheckValue<IkReal> x2884=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2884.valid){
continue;
}
CheckValue<IkReal> x2885=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2885.valid){
continue;
}
CheckValue<IkReal> x2886=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2886.valid){
continue;
}
CheckValue<IkReal> x2887=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2887.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2888=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2888.valid){
continue;
}
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2889.valid){
continue;
}
CheckValue<IkReal> x2890=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2890.valid){
continue;
}
CheckValue<IkReal> x2891=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2891.valid){
continue;
}
CheckValue<IkReal> x2892=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2892.valid){
continue;
}
CheckValue<IkReal> x2893=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2893.valid){
continue;
}
evalcond[2]=((-0.0661263256062921)+((npz*(x2858.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.3110432)*r02*(x2859.value)*(IKcos(j0))))+(((-30.23371008)*(npz*npz)*(x2860.value)))+(((15.11685504)*npz*(x2861.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-15.1168550416)*(x2862.value)))+(((-228.519306300373)*(pz*pz)*(r22*r22)*(x2863.value)))+(((30.2337100832)*(r22*r22)*(x2864.value)))+(((15.552159999177)*npz*(x2865.value)))+(((-1.2093484032)*pz*r02*r22*(x2866.value)*(IKcos(j0))))+(((-0.3110432)*r12*(x2867.value)*(IKsin(j0))))+(((-228.519306348747)*pp*(r22*r22)*(x2868.value)))+(((-0.04)*r02*(x2869.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKcos(j0))))+(((-0.020575920000823)*r12*(IKsin(j0))))+(((-2.0)*(x2870.value)))+(((-15.11685504)*pz*r22*(x2871.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-3.88804)*(x2872.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((2.0)*(r22*r22)*(x2873.value)))+(((1.2093484032)*npz*r02*(x2874.value)*(IKcos(j0))))+(((0.3110432)*r02*(r22*r22)*(x2875.value)*(IKcos(j0))))+(((-117.549874139443)*npz*(r22*r22)*(x2876.value)))+(((0.3110432)*r12*(r22*r22)*(x2877.value)*(IKsin(j0))))+(((228.519306348747)*pp*(x2878.value)))+(((-1.0)*pp))+(((3.88804)*(r22*r22)*(x2879.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.514398000020576)*npz))+(((-7.77608)*npz*(r22*r22)*(x2880.value)))+(((-0.04)*r12*(x2881.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKsin(j0))))+(((-0.020575920000823)*r02*(IKcos(j0))))+(((-15.1168550416)*(r22*r22*r22*r22)*(x2882.value)))+(((1.2093484032)*npz*r12*(x2883.value)*(IKsin(j0))))+(((117.549874139443)*npz*(x2884.value)))+(((-457.038612649121)*(npz*npz)*(x2885.value)))+(((-1.2093484032)*pz*r12*r22*(x2886.value)*(IKsin(j0))))+(((-0.257199000010288)*(x2887.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-228.519306348747)*(pz*pz)*(x2888.value)))+(((-117.549874139443)*pz*r22*(x2889.value)))+(((-7.77607999917696)*pz*r22*(x2890.value)))+(((30.23371008)*npz*pz*r22*(x2891.value)))+(((117.549874139443)*pz*(r22*r22*r22)*(x2892.value)))+(((0.08)*px*(IKcos(j0))))+(((0.08)*py*(IKsin(j0))))+(((914.077225298242)*npz*pz*r22*(x2893.value))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2894=r22*r22;
IkReal x2895=((15.11685504)*npz);
IkReal x2896=(pz*r22);
IkReal x2897=((914.077225394989)*pp);
IkReal x2898=x179;
IkReal x2899=(r02*x2898);
IkReal x2900=(r12*x2898);
IkReal x2901=((3.88804)*x2900);
if((((((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x2897))+((x2894*x2897))+(((-1828.15445078998)*npz*x2896)))) < -0.00001)
continue;
IkReal x2902=IKsqrt(((((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x2897))+((x2894*x2897))+(((-1828.15445078998)*npz*x2896))));
CheckValue<IkReal> x2903=IKPowWithIntegerCheck(IKsign(((0.04)+(((0.34)*sj1*sj2))+(((0.04)*cj2*sj1))+(((0.345)*sj1))+(((0.34)*cj1*cj2))+(((-0.04)*cj1*sj2)))),-1);
if(!x2903.valid){
continue;
}
CheckValue<IkReal> x2904 = IKatan2WithCheck(IkReal(((((-15.11685504)*x2896*x2900))+(((-1.0)*x2901))+((x2894*x2901))+py+(((-0.257199000010288)*r12))+((x2895*x2900))+(((-0.5)*x2900*x2902)))),IkReal((((x2895*x2899))+(((3.88804)*x2894*x2899))+(((-15.11685504)*x2896*x2899))+(((-0.257199000010288)*r02))+px+(((-3.88804)*x2899))+(((-0.5)*x2899*x2902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2904.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2903.value)))+(x2904.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2905=IKcos(j0);
IkReal x2906=r22*r22;
IkReal x2907=IKsin(j0);
IkReal x2908=((1.0)*py);
IkReal x2909=((0.257199000010288)*r02);
IkReal x2910=((0.345)*sj1);
IkReal x2911=((15.11685504)*npz);
IkReal x2912=((914.077225394989)*pp);
IkReal x2913=((1.0)*px);
IkReal x2914=((0.04)*cj2*sj1);
IkReal x2915=((0.34)*cj1*cj2);
IkReal x2916=(r12*x2906);
IkReal x2917=(r12*x2907);
IkReal x2918=(r12*x2905);
IkReal x2919=(r02*x2905);
IkReal x2920=((0.34)*sj1*sj2);
IkReal x2921=((0.04)*cj1*sj2);
IkReal x2922=(r02*x2907);
IkReal x2923=x179;
IkReal x2924=((3.88804)*x2923);
IkReal x2925=(r02*x2923);
IkReal x2926=(x2911*x2923);
IkReal x2927=((15.11685504)*pz*r22*x2923);
IkReal x2928=x2902;
IkReal x2929=((0.5)*x2928);
evalcond[0]=((((15.11685504)*pz*r22*x2925))+(((-1.0)*x2911*x2925))+((x2925*x2929))+(((-1.0)*r02*x2906*x2924))+(((-1.0)*x2905*x2921))+((x2905*x2920))+((x2905*x2915))+((x2905*x2914))+((x2905*x2910))+(((0.04)*x2905))+x2909+((r02*x2924))+(((-1.0)*x2913)));
evalcond[1]=(((x2907*x2914))+((x2907*x2915))+((x2907*x2910))+(((-1.0)*x2916*x2924))+(((-1.0)*x2908))+(((-1.0)*r12*x2926))+(((0.04)*x2907))+(((-1.0)*x2907*x2921))+(((0.257199000010288)*r12))+((x2907*x2920))+((r12*x2924))+((r12*x2927))+((r12*x2923*x2929)));
evalcond[2]=(((x2906*x2922*x2924))+(((0.257199000010288)*x2918))+(((-1.0)*x2905*x2908))+(((-1.0)*x2918*x2926))+(((-1.0)*x2905*x2916*x2924))+((px*x2907))+((x2918*x2927))+((x2918*x2924))+(((-1.0)*x2907*x2909))+((x2918*x2923*x2929))+((x2922*x2926))+(((-1.0)*x2922*x2923*x2929))+(((-1.0)*x2922*x2927))+(((-1.0)*x2922*x2924)));
evalcond[3]=((0.04)+((x2917*x2923*x2929))+(((0.257199000010288)*x2917))+((x2905*x2909))+((x2919*x2924))+((x2919*x2927))+(((-1.0)*x2921))+(((-1.0)*x2906*x2919*x2924))+(((-1.0)*x2919*x2926))+((x2917*x2924))+((x2917*x2927))+(((-1.0)*x2905*x2913))+(((-1.0)*x2907*x2916*x2924))+(((-1.0)*x2917*x2926))+(((-1.0)*x2907*x2908))+((x2919*x2923*x2929))+x2910+x2914+x2915+x2920);
CheckValue<IkReal> x2930=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2930.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2931=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2931.valid){
continue;
}
CheckValue<IkReal> x2932=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2932.valid){
continue;
}
CheckValue<IkReal> x2933=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2933.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2934=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2934.valid){
continue;
}
CheckValue<IkReal> x2935=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2935.valid){
continue;
}
CheckValue<IkReal> x2936=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2936.valid){
continue;
}
CheckValue<IkReal> x2937=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2937.valid){
continue;
}
CheckValue<IkReal> x2938=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2938.valid){
continue;
}
CheckValue<IkReal> x2939=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2939.valid){
continue;
}
CheckValue<IkReal> x2940=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2940.valid){
continue;
}
CheckValue<IkReal> x2941=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2941.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2942=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2942.valid){
continue;
}
CheckValue<IkReal> x2943=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2943.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2944=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2944.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2945=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2945.valid){
continue;
}
CheckValue<IkReal> x2946=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2946.valid){
continue;
}
CheckValue<IkReal> x2947=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2947.valid){
continue;
}
CheckValue<IkReal> x2948=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2948.valid){
continue;
}
CheckValue<IkReal> x2949=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2949.valid){
continue;
}
CheckValue<IkReal> x2950=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2950.valid){
continue;
}
CheckValue<IkReal> x2951=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2951.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2952=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2952.valid){
continue;
}
CheckValue<IkReal> x2953=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2953.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2954=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2954.valid){
continue;
}
CheckValue<IkReal> x2955=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2955.valid){
continue;
}
CheckValue<IkReal> x2956=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2956.valid){
continue;
}
CheckValue<IkReal> x2957=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2957.valid){
continue;
}
CheckValue<IkReal> x2958=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2958.valid){
continue;
}
CheckValue<IkReal> x2959=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2959.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2960=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2960.valid){
continue;
}
CheckValue<IkReal> x2961=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2961.valid){
continue;
}
CheckValue<IkReal> x2962=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2962.valid){
continue;
}
CheckValue<IkReal> x2963=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2963.valid){
continue;
}
CheckValue<IkReal> x2964=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2964.valid){
continue;
}
CheckValue<IkReal> x2965=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x2965.valid){
continue;
}
evalcond[4]=((0.168473674393708)+((npz*(x2930.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.3110432)*r02*(x2931.value)*(IKcos(j0))))+(((-30.23371008)*(npz*npz)*(x2932.value)))+(((15.11685504)*npz*(x2933.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-15.1168550416)*(x2934.value)))+(((-228.519306300373)*(pz*pz)*(r22*r22)*(x2935.value)))+(((30.2337100832)*(r22*r22)*(x2936.value)))+(((15.552159999177)*npz*(x2937.value)))+(((-1.2093484032)*pz*r02*r22*(x2938.value)*(IKcos(j0))))+(((-0.3110432)*r12*(x2939.value)*(IKsin(j0))))+(((-228.519306348747)*pp*(r22*r22)*(x2940.value)))+(((-0.04)*r02*(x2941.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKcos(j0))))+(((-0.020575920000823)*r12*(IKsin(j0))))+(((0.2346)*sj2))+(((-2.0)*(x2942.value)))+(((0.0276)*cj2))+(((-15.11685504)*pz*r22*(x2943.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-3.88804)*(x2944.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((2.0)*(r22*r22)*(x2945.value)))+(((1.2093484032)*npz*r02*(x2946.value)*(IKcos(j0))))+(((0.3110432)*r02*(r22*r22)*(x2947.value)*(IKcos(j0))))+(((-117.549874139443)*npz*(r22*r22)*(x2948.value)))+(((0.3110432)*r12*(r22*r22)*(x2949.value)*(IKsin(j0))))+(((228.519306348747)*pp*(x2950.value)))+(((-1.0)*pp))+(((3.88804)*(r22*r22)*(x2951.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.514398000020576)*npz))+(((-7.77608)*npz*(r22*r22)*(x2952.value)))+(((-0.04)*r12*(x2953.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKsin(j0))))+(((-0.020575920000823)*r02*(IKcos(j0))))+(((-15.1168550416)*(r22*r22*r22*r22)*(x2954.value)))+(((1.2093484032)*npz*r12*(x2955.value)*(IKsin(j0))))+(((117.549874139443)*npz*(x2956.value)))+(((-457.038612649121)*(npz*npz)*(x2957.value)))+(((-1.2093484032)*pz*r12*r22*(x2958.value)*(IKsin(j0))))+(((-0.257199000010288)*(x2959.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-228.519306348747)*(pz*pz)*(x2960.value)))+(((-117.549874139443)*pz*r22*(x2961.value)))+(((-7.77607999917696)*pz*r22*(x2962.value)))+(((30.23371008)*npz*pz*r22*(x2963.value)))+(((117.549874139443)*pz*(r22*r22*r22)*(x2964.value)))+(((0.08)*px*(IKcos(j0))))+(((0.08)*py*(IKsin(j0))))+(((914.077225298242)*npz*pz*r22*(x2965.value))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2966=r22*r22;
IkReal x2967=((914.077225394989)*pp);
IkReal x2968=(pz*r22);
CheckValue<IkReal> x2972=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*x2966))),-1);
if(!x2972.valid){
continue;
}
IkReal x2969=x2972.value;
IkReal x2970=((3.88804)*x2969);
IkReal x2971=((15.1168550416)*x2969);
if((((((914.077225394989)*(npz*npz)))+(((-1828.15445078998)*npz*x2968))+((x2966*x2967))+(((-1.0)*x2967))+(((914.077225394989)*(pz*pz))))) < -0.00001)
continue;
IkReal gconst3=((((-0.5)*x2969*(IKsqrt(((((914.077225394989)*(npz*npz)))+(((-1828.15445078998)*npz*x2968))+((x2966*x2967))+(((-1.0)*x2967))+(((914.077225394989)*(pz*pz))))))))+((x2968*x2971))+(((-1.0)*npz*x2971))+x2970+(((-1.0)*x2966*x2970)));
CheckValue<IkReal> x2973=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2973.valid){
continue;
}
CheckValue<IkReal> x2974=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2974.valid){
continue;
}
CheckValue<IkReal> x2975=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2975.valid){
continue;
}
CheckValue<IkReal> x2976=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2976.valid){
continue;
}
CheckValue<IkReal> x2977=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2977.valid){
continue;
}
CheckValue<IkReal> x2978=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2978.valid){
continue;
}
CheckValue<IkReal> x2979=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2979.valid){
continue;
}
CheckValue<IkReal> x2980=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2980.valid){
continue;
}
CheckValue<IkReal> x2981=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2981.valid){
continue;
}
CheckValue<IkReal> x2982=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2982.valid){
continue;
}
CheckValue<IkReal> x2983=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2983.valid){
continue;
}
CheckValue<IkReal> x2984=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2984.valid){
continue;
}
CheckValue<IkReal> x2985=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2985.valid){
continue;
}
CheckValue<IkReal> x2986=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2986.valid){
continue;
}
CheckValue<IkReal> x2987=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2987.valid){
continue;
}
CheckValue<IkReal> x2988=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2988.valid){
continue;
}
CheckValue<IkReal> x2989=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2989.valid){
continue;
}
CheckValue<IkReal> x2990=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2990.valid){
continue;
}
CheckValue<IkReal> x2991=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2991.valid){
continue;
}
CheckValue<IkReal> x2992=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2992.valid){
continue;
}
CheckValue<IkReal> x2993=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2993.valid){
continue;
}
CheckValue<IkReal> x2994=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2994.valid){
continue;
}
CheckValue<IkReal> x2995=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2995.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x2996=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2996.valid){
continue;
}
CheckValue<IkReal> x2997=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2997.valid){
continue;
}
CheckValue<IkReal> x2998=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2998.valid){
continue;
}
CheckValue<IkReal> x2999=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x2999.valid){
continue;
}
CheckValue<IkReal> x3000=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3000.valid){
continue;
}
CheckValue<IkReal> x3001=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3001.valid){
continue;
}
CheckValue<IkReal> x3002=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3002.valid){
continue;
}
CheckValue<IkReal> x3003=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3003.valid){
continue;
}
CheckValue<IkReal> x3004=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3004.valid){
continue;
}
CheckValue<IkReal> x3005=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3005.valid){
continue;
}
CheckValue<IkReal> x3006=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3006.valid){
continue;
}
CheckValue<IkReal> x3007=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3007.valid){
continue;
}
CheckValue<IkReal> x3008=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3008.valid){
continue;
}
CheckValue<IkReal> x3009=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3009.valid){
continue;
}
CheckValue<IkReal> x3010=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3010.valid){
continue;
}
CheckValue<IkReal> x3011=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3011.valid){
continue;
}
CheckValue<IkReal> x3012=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3012.valid){
continue;
}
CheckValue<IkReal> x3013=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3013.valid){
continue;
}
CheckValue<IkReal> x3014=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3014.valid){
continue;
}
CheckValue<IkReal> x3015=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3015.valid){
continue;
}
CheckValue<IkReal> x3016=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3016.valid){
continue;
}
CheckValue<IkReal> x3017=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3017.valid){
continue;
}
CheckValue<IkReal> x3018=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3018.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst4=((((((((-1.0)*(((((((((IKcos(((15.1168550416)*npz*(x2973.value))))*(IKsin(((3.88804)*(r22*r22)*(x2974.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x2975.value))))*(IKsin(((15.1168550416)*npz*(x2976.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x2977.value))))))+(((((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x2978.value))))*(IKsin(((15.1168550416)*npz*(x2979.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x2980.value))))*(IKcos(((15.1168550416)*npz*(x2981.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x2982.value))))))))*(IKcos(((3.88804)*(x2983.value))))))+(((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x2984.value))))*(IKcos(((15.1168550416)*npz*(x2985.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x2986.value))))*(IKsin(((15.1168550416)*npz*(x2987.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x2988.value))))))+(((((((IKcos(((15.1168550416)*npz*(x2989.value))))*(IKsin(((3.88804)*(r22*r22)*(x2990.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x2991.value))))*(IKsin(((15.1168550416)*npz*(x2992.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x2993.value))))))))*(IKsin(((3.88804)*(x2994.value))))))))*(IKsin(((0.5)*(x2995.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x2996.value))))*(IKcos(((15.1168550416)*npz*(x2997.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x2998.value))))*(IKsin(((15.1168550416)*npz*(x2999.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3000.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3001.value))))*(IKsin(((3.88804)*(r22*r22)*(x3002.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3003.value))))*(IKsin(((15.1168550416)*npz*(x3004.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3005.value))))))))*(IKcos(((3.88804)*(x3006.value))))))+(((-1.0)*(((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x3007.value))))*(IKsin(((3.88804)*(r22*r22)*(x3008.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3009.value))))*(IKsin(((15.1168550416)*npz*(x3010.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3011.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3012.value))))*(IKsin(((15.1168550416)*npz*(x3013.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3014.value))))*(IKcos(((15.1168550416)*npz*(x3015.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3016.value))))))))*(IKsin(((3.88804)*(x3017.value))))))))*(IKcos(((0.5)*(x3018.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
CheckValue<IkReal> x3019=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3019.valid){
continue;
}
CheckValue<IkReal> x3020=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3020.valid){
continue;
}
CheckValue<IkReal> x3021=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3021.valid){
continue;
}
CheckValue<IkReal> x3022=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3022.valid){
continue;
}
CheckValue<IkReal> x3023=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3023.valid){
continue;
}
CheckValue<IkReal> x3024=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3024.valid){
continue;
}
CheckValue<IkReal> x3025=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3025.valid){
continue;
}
CheckValue<IkReal> x3026=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3026.valid){
continue;
}
CheckValue<IkReal> x3027=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3027.valid){
continue;
}
CheckValue<IkReal> x3028=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3028.valid){
continue;
}
CheckValue<IkReal> x3029=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3029.valid){
continue;
}
CheckValue<IkReal> x3030=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3030.valid){
continue;
}
CheckValue<IkReal> x3031=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3031.valid){
continue;
}
CheckValue<IkReal> x3032=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3032.valid){
continue;
}
CheckValue<IkReal> x3033=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3033.valid){
continue;
}
CheckValue<IkReal> x3034=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3034.valid){
continue;
}
CheckValue<IkReal> x3035=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3035.valid){
continue;
}
CheckValue<IkReal> x3036=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3036.valid){
continue;
}
CheckValue<IkReal> x3037=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3037.valid){
continue;
}
CheckValue<IkReal> x3038=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3038.valid){
continue;
}
CheckValue<IkReal> x3039=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3039.valid){
continue;
}
CheckValue<IkReal> x3040=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3040.valid){
continue;
}
CheckValue<IkReal> x3041=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3041.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3042=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3042.valid){
continue;
}
CheckValue<IkReal> x3043=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3043.valid){
continue;
}
CheckValue<IkReal> x3044=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3044.valid){
continue;
}
CheckValue<IkReal> x3045=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3045.valid){
continue;
}
CheckValue<IkReal> x3046=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3046.valid){
continue;
}
CheckValue<IkReal> x3047=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3047.valid){
continue;
}
CheckValue<IkReal> x3048=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3048.valid){
continue;
}
CheckValue<IkReal> x3049=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3049.valid){
continue;
}
CheckValue<IkReal> x3050=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3050.valid){
continue;
}
CheckValue<IkReal> x3051=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3051.valid){
continue;
}
CheckValue<IkReal> x3052=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3052.valid){
continue;
}
CheckValue<IkReal> x3053=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3053.valid){
continue;
}
CheckValue<IkReal> x3054=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3054.valid){
continue;
}
CheckValue<IkReal> x3055=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3055.valid){
continue;
}
CheckValue<IkReal> x3056=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3056.valid){
continue;
}
CheckValue<IkReal> x3057=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3057.valid){
continue;
}
CheckValue<IkReal> x3058=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3058.valid){
continue;
}
CheckValue<IkReal> x3059=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3059.valid){
continue;
}
CheckValue<IkReal> x3060=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3060.valid){
continue;
}
CheckValue<IkReal> x3061=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3061.valid){
continue;
}
CheckValue<IkReal> x3062=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3062.valid){
continue;
}
CheckValue<IkReal> x3063=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3063.valid){
continue;
}
CheckValue<IkReal> x3064=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3064.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst5=((((((((((((((((IKcos(((15.1168550416)*npz*(x3019.value))))*(IKsin(((3.88804)*(r22*r22)*(x3020.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3021.value))))*(IKsin(((15.1168550416)*npz*(x3022.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3023.value))))))+(((((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3024.value))))*(IKsin(((15.1168550416)*npz*(x3025.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3026.value))))*(IKcos(((15.1168550416)*npz*(x3027.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3028.value))))))))*(IKcos(((3.88804)*(x3029.value))))))+(((((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3030.value))))*(IKcos(((15.1168550416)*npz*(x3031.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3032.value))))*(IKsin(((15.1168550416)*npz*(x3033.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3034.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3035.value))))*(IKsin(((3.88804)*(r22*r22)*(x3036.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3037.value))))*(IKsin(((15.1168550416)*npz*(x3038.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3039.value))))))))*(IKsin(((3.88804)*(x3040.value))))))))*(IKcos(((0.5)*(x3041.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3042.value))))*(IKcos(((15.1168550416)*npz*(x3043.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3044.value))))*(IKsin(((15.1168550416)*npz*(x3045.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3046.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3047.value))))*(IKsin(((3.88804)*(r22*r22)*(x3048.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3049.value))))*(IKsin(((15.1168550416)*npz*(x3050.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3051.value))))))))*(IKcos(((3.88804)*(x3052.value))))))+(((-1.0)*(((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x3053.value))))*(IKsin(((3.88804)*(r22*r22)*(x3054.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3055.value))))*(IKsin(((15.1168550416)*npz*(x3056.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3057.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3058.value))))*(IKsin(((15.1168550416)*npz*(x3059.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3060.value))))*(IKcos(((15.1168550416)*npz*(x3061.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3062.value))))))))*(IKsin(((3.88804)*(x3063.value))))))))*(IKsin(((0.5)*(x3064.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
IkReal x3065=r22*r22;
IkReal x3066=((914.077225394989)*pp);
IkReal x3067=(pz*r22);
IkReal x3079=r22;
IkReal x3068=x3079*x3079;
IkReal x3069=((228.519306348747)*x3068);
CheckValue<IkReal> x3080=IKPowWithIntegerCheck(((228.519306348747)+((x3065*x3069))+(((-1.0)*x3069))+(((-228.519306348747)*x3065))),-1);
if(!x3080.valid){
continue;
}
IkReal x3070=x3080.value;
IkReal x3071=((58.7749370759425)*x3070);
IkReal x3072=((228.519306348747)*x3070);
IkReal x3073=(npz*x3070);
IkReal x3074=(x3065*x3071);
IkReal x3075=(x3068*x3070);
if((((((914.077225394989)*(npz*npz)))+((x3065*x3066))+(((-1828.15445078998)*npz*x3067))+(((-1.0)*x3066))+(((914.077225394989)*(pz*pz))))) < -0.00001)
continue;
IkReal x3076=IKsqrt(((((914.077225394989)*(npz*npz)))+((x3065*x3066))+(((-1828.15445078998)*npz*x3067))+(((-1.0)*x3066))+(((914.077225394989)*(pz*pz)))));
IkReal x3077=(x3068*x3071);
IkReal x3078=((7.5584275208)*x3070*x3076);
CheckValue<IkReal> x3081=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3081.valid){
continue;
}
CheckValue<IkReal> x3082=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3082.valid){
continue;
}
CheckValue<IkReal> x3083=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3083.valid){
continue;
}
CheckValue<IkReal> x3084=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3084.valid){
continue;
}
CheckValue<IkReal> x3085=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3085.valid){
continue;
}
CheckValue<IkReal> x3086=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3086.valid){
continue;
}
CheckValue<IkReal> x3087=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3087.valid){
continue;
}
CheckValue<IkReal> x3088=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3088.valid){
continue;
}
CheckValue<IkReal> x3089=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3089.valid){
continue;
}
CheckValue<IkReal> x3090=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3090.valid){
continue;
}
CheckValue<IkReal> x3091=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3091.valid){
continue;
}
CheckValue<IkReal> x3092=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3092.valid){
continue;
}
CheckValue<IkReal> x3093=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3093.valid){
continue;
}
CheckValue<IkReal> x3094=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3094.valid){
continue;
}
CheckValue<IkReal> x3095=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3095.valid){
continue;
}
CheckValue<IkReal> x3096=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3096.valid){
continue;
}
CheckValue<IkReal> x3097=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3097.valid){
continue;
}
CheckValue<IkReal> x3098=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3098.valid){
continue;
}
CheckValue<IkReal> x3099=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3099.valid){
continue;
}
CheckValue<IkReal> x3100=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3100.valid){
continue;
}
CheckValue<IkReal> x3101=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3101.valid){
continue;
}
CheckValue<IkReal> x3102=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3102.valid){
continue;
}
CheckValue<IkReal> x3103=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3103.valid){
continue;
}
CheckValue<IkReal> x3104=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3104.valid){
continue;
}
CheckValue<IkReal> x3105=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3105.valid){
continue;
}
CheckValue<IkReal> x3106=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3106.valid){
continue;
}
CheckValue<IkReal> x3107=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3107.valid){
continue;
}
CheckValue<IkReal> x3108=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3108.valid){
continue;
}
CheckValue<IkReal> x3109=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3109.valid){
continue;
}
CheckValue<IkReal> x3110=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3110.valid){
continue;
}
CheckValue<IkReal> x3111=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3111.valid){
continue;
}
CheckValue<IkReal> x3112=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3112.valid){
continue;
}
CheckValue<IkReal> x3113=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3113.valid){
continue;
}
CheckValue<IkReal> x3114=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3114.valid){
continue;
}
CheckValue<IkReal> x3115=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3115.valid){
continue;
}
CheckValue<IkReal> x3116=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3116.valid){
continue;
}
CheckValue<IkReal> x3117=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3117.valid){
continue;
}
CheckValue<IkReal> x3118=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3118.valid){
continue;
}
CheckValue<IkReal> x3119=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3119.valid){
continue;
}
CheckValue<IkReal> x3120=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3120.valid){
continue;
}
CheckValue<IkReal> x3121=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3121.valid){
continue;
}
CheckValue<IkReal> x3122=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3122.valid){
continue;
}
CheckValue<IkReal> x3123=IKPowWithIntegerCheck(((228.519306348747)+(((-228.519306348747)*(x3068)))+(((228.519306348747)*(x3065)*(x3068)))+(((-228.519306348747)*(x3065)))),-1);
if(!x3123.valid){
continue;
}
CheckValue<IkReal> x3124=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*x3065*x3068))+(((-228.519306348747)*x3065))+(((-228.519306348747)*x3068))),-1);
if(!x3124.valid){
continue;
}
if((((((-1.0)*x3067*x3069*(x3081.value)*(x3068)*(x3074)))+(((-1.0)*x3071*(x3074)))+(((-1.0)*npz*x3072*(x3071)))+(((7.5584275208)*x3075*x3076*(x3067)*(x3072)))+((npz*x3072*(x3077)))+((x3071*(j6)))+(((-7.5584275208)*x3075*x3076*(x3074)))+(((-1.0)*x3068*x3074*(x3074)))+(((-1.0)*npz*x3069*(x3082.value)*(x3083.value)*(x3067)*(x3069)))+((x3067*x3069*(x3084.value)*(x3085.value)*(x3067)*(x3069)))+(((-1.0)*npz*x3072*(x3067)*(x3072)))+(((-7.5584275208)*x3075*x3076*(x3086.value)*(x3067)*(x3069)))+((npz*x3069*(x3087.value)*(x3067)*(x3072)))+((npz*x3072*(x3078)))+((x3078*(npz)*(x3072)))+((npz*x3069*(x3088.value)*(x3089.value)*(npz)*(x3069)))+(((-7.5584275208)*npz*x3072*(x3075)*(x3076)))+((x3067*x3072*(x3090.value)*(npz)*(x3069)))+((j6*(x3068)*(x3074)))+(((-1.0)*npz*x3072*(x3068)*(x3074)))+(((7.5584275208)*x3075*x3076*(x3071)))+(((-1.0)*x3074*(x3068)*(x3074)))+(((-1.0)*x3067*x3069*(x3091.value)*(j6)))+(((-1.0)*j6*(x3078)))+(((-1.0)*j6*(x3077)))+(((7.5584275208)*x3075*x3076*(x3068)*(x3074)))+((x3074*(x3092.value)*(x3067)*(x3069)))+(((-1.0)*x3074*(x3093.value)*(npz)*(x3069)))+((x3077*(npz)*(x3072)))+(((-1.0)*x3067*x3072*(x3074)))+(((-1.0)*x3077*(x3067)*(x3072)))+(((-1.0)*npz*x3069*(x3094.value)*(x3078)))+(((-1.0)*npz*x3072*(j6)))+(((-1.0)*x3074*(j6)))+(((-1.0)*x3074*(x3071)))+(((-1.0)*npz*x3069*(x3095.value)*(x3077)))+((x3067*x3072*(j6)))+(((-1.0)*j6*(x3074)))+((x3068*x3074*(x3071)))+((npz*x3069*(x3096.value)*(j6)))+((npz*x3069*(x3097.value)*(x3068)*(x3074)))+((x3074*(x3074)))+(((7.5584275208)*j6*(x3075)*(x3076)))+((x3078*(x3098.value)*(x3067)*(x3069)))+(((-1.0)*npz*x3072*(x3099.value)*(npz)*(x3069)))+((x3071*(x3068)*(x3074)))+((j6*(j6)))+((j6*(x3071)))+((x3071*(x3100.value)*(npz)*(x3069)))+(((-1.0)*j6*(npz)*(x3072)))+((x3067*x3072*(x3067)*(x3072)))+(((-1.0)*x3067*x3072*(x3077)))+(((57.1298265871868)*x3075*x3076*(x3075)*(x3076)))+(((-1.0)*x3074*(x3067)*(x3072)))+(((-1.0)*x3067*x3072*(x3101.value)*(x3067)*(x3069)))+((x3074*(npz)*(x3072)))+(((-1.0)*x3077*(x3102.value)*(npz)*(x3069)))+(((-1.0)*x3078*(x3071)))+(((-1.0)*x3078*(x3068)*(x3074)))+(((-7.5584275208)*x3075*x3076*(npz)*(x3072)))+((x3077*(x3078)))+((x3067*x3072*(x3071)))+(((-1.0)*x3067*x3072*(x3078)))+((npz*x3069*(x3103.value)*(x3071)))+(((-1.0)*x3078*(x3067)*(x3072)))+(((7.5584275208)*x3067*x3072*(x3075)*(x3076)))+(((-7.5584275208)*x3067*x3069*(x3104.value)*(x3075)*(x3076)))+((x3077*(x3077)))+(((-1.0)*x3068*x3074*(x3105.value)*(x3067)*(x3069)))+((x3074*(x3078)))+(((-1.0)*x3067*x3072*(npz)*(x3072)))+((x3078*(x3078)))+(((-7.5584275208)*x3078*(x3075)*(x3076)))+((x3078*(x3077)))+(((-1.0)*npz*x3069*(x3106.value)*(npz)*(x3072)))+((x3074*(x3077)))+((npz*x3072*(x3107.value)*(x3067)*(x3069)))+(((-1.0)*x3078*(x3108.value)*(npz)*(x3069)))+(((-1.0)*x3071*(x3077)))+((x3071*(x3071)))+(((-1.0)*x3077*(x3068)*(x3074)))+(((-1.0)*x3071*(npz)*(x3072)))+((x3067*x3069*(x3109.value)*(npz)*(x3072)))+(((-1.0)*x3077*(j6)))+(((7.5584275208)*x3068*x3074*(x3075)*(x3076)))+((x3068*x3074*(j6)))+((x3067*x3069*(x3110.value)*(x3077)))+(((-1.0)*x3068*x3074*(npz)*(x3072)))+((x3071*(x3067)*(x3072)))+((x3068*x3074*(x3111.value)*(npz)*(x3069)))+(((-1.0)*x3071*(x3078)))+((x3068*x3074*(x3067)*(x3072)))+((x3067*x3069*(x3112.value)*(x3078)))+(((7.5584275208)*x3071*(x3075)*(x3076)))+(((-7.5584275208)*x3074*(x3075)*(x3076)))+(((7.5584275208)*x3075*x3076*(x3113.value)*(npz)*(x3069)))+(((-1.0)*x3067*x3069*(x3114.value)*(x3071)))+((j6*(x3115.value)*(npz)*(x3069)))+(((-1.0)*x3067*x3069*(x3116.value)*(x3067)*(x3072)))+(((-1.0)*x3077*(x3071)))+((npz*x3072*(npz)*(x3072)))+((x3077*(x3074)))+((j6*(x3067)*(x3072)))+(((7.5584275208)*npz*x3069*(x3117.value)*(x3075)*(x3076)))+(((-7.5584275208)*x3075*x3076*(x3078)))+(((-7.5584275208)*x3075*x3076*(x3077)))+(((-7.5584275208)*x3077*(x3075)*(x3076)))+(((-1.0)*x3067*x3069*(x3118.value)*(x3119.value)*(npz)*(x3069)))+(((-1.0)*x3068*x3074*(x3078)))+((x3077*(x3120.value)*(x3067)*(x3069)))+(((-1.0)*x3068*x3074*(x3077)))+(((-1.0)*x3078*(j6)))+(((-1.0)*x3071*(x3121.value)*(x3067)*(x3069)))+((x3078*(x3074)))+(((7.5584275208)*x3075*x3076*(j6)))+(((-1.0)*npz*x3069*(x3122.value)*(x3074)))+(((-1.0)*j6*(x3123.value)*(x3067)*(x3069)))+((x3067*x3072*(x3068)*(x3074)))+((npz*x3072*(x3074)))+((x3067*x3069*(x3124.value)*(x3074)))+((x3068*x3074*(x3068)*(x3074))))) < -0.00001)
continue;
evalcond[0]=IKsqrt(((((-1.0)*x3067*x3069*(x3081.value)*(x3068)*(x3074)))+(((-1.0)*x3071*(x3074)))+(((-1.0)*npz*x3072*(x3071)))+(((7.5584275208)*x3075*x3076*(x3067)*(x3072)))+((npz*x3072*(x3077)))+((x3071*(j6)))+(((-7.5584275208)*x3075*x3076*(x3074)))+(((-1.0)*x3068*x3074*(x3074)))+(((-1.0)*npz*x3069*(x3082.value)*(x3083.value)*(x3067)*(x3069)))+((x3067*x3069*(x3084.value)*(x3085.value)*(x3067)*(x3069)))+(((-1.0)*npz*x3072*(x3067)*(x3072)))+(((-7.5584275208)*x3075*x3076*(x3086.value)*(x3067)*(x3069)))+((npz*x3069*(x3087.value)*(x3067)*(x3072)))+((npz*x3072*(x3078)))+((x3078*(npz)*(x3072)))+((npz*x3069*(x3088.value)*(x3089.value)*(npz)*(x3069)))+(((-7.5584275208)*npz*x3072*(x3075)*(x3076)))+((x3067*x3072*(x3090.value)*(npz)*(x3069)))+((j6*(x3068)*(x3074)))+(((-1.0)*npz*x3072*(x3068)*(x3074)))+(((7.5584275208)*x3075*x3076*(x3071)))+(((-1.0)*x3074*(x3068)*(x3074)))+(((-1.0)*x3067*x3069*(x3091.value)*(j6)))+(((-1.0)*j6*(x3078)))+(((-1.0)*j6*(x3077)))+(((7.5584275208)*x3075*x3076*(x3068)*(x3074)))+((x3074*(x3092.value)*(x3067)*(x3069)))+(((-1.0)*x3074*(x3093.value)*(npz)*(x3069)))+((x3077*(npz)*(x3072)))+(((-1.0)*x3067*x3072*(x3074)))+(((-1.0)*x3077*(x3067)*(x3072)))+(((-1.0)*npz*x3069*(x3094.value)*(x3078)))+(((-1.0)*npz*x3072*(j6)))+(((-1.0)*x3074*(j6)))+(((-1.0)*x3074*(x3071)))+(((-1.0)*npz*x3069*(x3095.value)*(x3077)))+((x3067*x3072*(j6)))+(((-1.0)*j6*(x3074)))+((x3068*x3074*(x3071)))+((npz*x3069*(x3096.value)*(j6)))+((npz*x3069*(x3097.value)*(x3068)*(x3074)))+((x3074*(x3074)))+(((7.5584275208)*j6*(x3075)*(x3076)))+((x3078*(x3098.value)*(x3067)*(x3069)))+(((-1.0)*npz*x3072*(x3099.value)*(npz)*(x3069)))+((x3071*(x3068)*(x3074)))+((j6*(j6)))+((j6*(x3071)))+((x3071*(x3100.value)*(npz)*(x3069)))+(((-1.0)*j6*(npz)*(x3072)))+((x3067*x3072*(x3067)*(x3072)))+(((-1.0)*x3067*x3072*(x3077)))+(((57.1298265871868)*x3075*x3076*(x3075)*(x3076)))+(((-1.0)*x3074*(x3067)*(x3072)))+(((-1.0)*x3067*x3072*(x3101.value)*(x3067)*(x3069)))+((x3074*(npz)*(x3072)))+(((-1.0)*x3077*(x3102.value)*(npz)*(x3069)))+(((-1.0)*x3078*(x3071)))+(((-1.0)*x3078*(x3068)*(x3074)))+(((-7.5584275208)*x3075*x3076*(npz)*(x3072)))+((x3077*(x3078)))+((x3067*x3072*(x3071)))+(((-1.0)*x3067*x3072*(x3078)))+((npz*x3069*(x3103.value)*(x3071)))+(((-1.0)*x3078*(x3067)*(x3072)))+(((7.5584275208)*x3067*x3072*(x3075)*(x3076)))+(((-7.5584275208)*x3067*x3069*(x3104.value)*(x3075)*(x3076)))+((x3077*(x3077)))+(((-1.0)*x3068*x3074*(x3105.value)*(x3067)*(x3069)))+((x3074*(x3078)))+(((-1.0)*x3067*x3072*(npz)*(x3072)))+((x3078*(x3078)))+(((-7.5584275208)*x3078*(x3075)*(x3076)))+((x3078*(x3077)))+(((-1.0)*npz*x3069*(x3106.value)*(npz)*(x3072)))+((x3074*(x3077)))+((npz*x3072*(x3107.value)*(x3067)*(x3069)))+(((-1.0)*x3078*(x3108.value)*(npz)*(x3069)))+(((-1.0)*x3071*(x3077)))+((x3071*(x3071)))+(((-1.0)*x3077*(x3068)*(x3074)))+(((-1.0)*x3071*(npz)*(x3072)))+((x3067*x3069*(x3109.value)*(npz)*(x3072)))+(((-1.0)*x3077*(j6)))+(((7.5584275208)*x3068*x3074*(x3075)*(x3076)))+((x3068*x3074*(j6)))+((x3067*x3069*(x3110.value)*(x3077)))+(((-1.0)*x3068*x3074*(npz)*(x3072)))+((x3071*(x3067)*(x3072)))+((x3068*x3074*(x3111.value)*(npz)*(x3069)))+(((-1.0)*x3071*(x3078)))+((x3068*x3074*(x3067)*(x3072)))+((x3067*x3069*(x3112.value)*(x3078)))+(((7.5584275208)*x3071*(x3075)*(x3076)))+(((-7.5584275208)*x3074*(x3075)*(x3076)))+(((7.5584275208)*x3075*x3076*(x3113.value)*(npz)*(x3069)))+(((-1.0)*x3067*x3069*(x3114.value)*(x3071)))+((j6*(x3115.value)*(npz)*(x3069)))+(((-1.0)*x3067*x3069*(x3116.value)*(x3067)*(x3072)))+(((-1.0)*x3077*(x3071)))+((npz*x3072*(npz)*(x3072)))+((x3077*(x3074)))+((j6*(x3067)*(x3072)))+(((7.5584275208)*npz*x3069*(x3117.value)*(x3075)*(x3076)))+(((-7.5584275208)*x3075*x3076*(x3078)))+(((-7.5584275208)*x3075*x3076*(x3077)))+(((-7.5584275208)*x3077*(x3075)*(x3076)))+(((-1.0)*x3067*x3069*(x3118.value)*(x3119.value)*(npz)*(x3069)))+(((-1.0)*x3068*x3074*(x3078)))+((x3077*(x3120.value)*(x3067)*(x3069)))+(((-1.0)*x3068*x3074*(x3077)))+(((-1.0)*x3078*(j6)))+(((-1.0)*x3071*(x3121.value)*(x3067)*(x3069)))+((x3078*(x3074)))+(((7.5584275208)*x3075*x3076*(j6)))+(((-1.0)*npz*x3069*(x3122.value)*(x3074)))+(((-1.0)*j6*(x3123.value)*(x3067)*(x3069)))+((x3067*x3072*(x3068)*(x3074)))+((npz*x3072*(x3074)))+((x3067*x3069*(x3124.value)*(x3074)))+((x3068*x3074*(x3068)*(x3074)))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3125=r22*r22;
IkReal x3126=((914.077225394989)*pp);
IkReal x3127=(pz*r22);
IkReal x3128=x2969;
IkReal x3129=((3.88804)*x3128);
IkReal x3130=((15.11685504)*x3128);
IkReal x3131=((15.1168550416)*x3128);
IkReal x3132=(x3125*x3129);
if((((((914.077225394989)*(npz*npz)))+(((-1828.15445078998)*npz*x3127))+((x3125*x3126))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x3126)))) < -0.00001)
continue;
IkReal x3133=((0.5)*x3128*(IKsqrt(((((914.077225394989)*(npz*npz)))+(((-1828.15445078998)*npz*x3127))+((x3125*x3126))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x3126))))));
IkReal x3134=(x3133+x3132);
sj6=gconst4;
cj6=gconst5;
j6=(x3129+(((-1.0)*npz*x3130))+((x3127*x3130))+(((-1.0)*x3134)));
IkReal gconst3=(x3129+(((-1.0)*npz*x3131))+((x3127*x3131))+(((-1.0)*x3134)));
CheckValue<IkReal> x3135=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3135.valid){
continue;
}
CheckValue<IkReal> x3136=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3136.valid){
continue;
}
CheckValue<IkReal> x3137=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3137.valid){
continue;
}
CheckValue<IkReal> x3138=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3138.valid){
continue;
}
CheckValue<IkReal> x3139=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3139.valid){
continue;
}
CheckValue<IkReal> x3140=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3140.valid){
continue;
}
CheckValue<IkReal> x3141=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3141.valid){
continue;
}
CheckValue<IkReal> x3142=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3142.valid){
continue;
}
CheckValue<IkReal> x3143=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3143.valid){
continue;
}
CheckValue<IkReal> x3144=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3144.valid){
continue;
}
CheckValue<IkReal> x3145=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3145.valid){
continue;
}
CheckValue<IkReal> x3146=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3146.valid){
continue;
}
CheckValue<IkReal> x3147=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3147.valid){
continue;
}
CheckValue<IkReal> x3148=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3148.valid){
continue;
}
CheckValue<IkReal> x3149=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3149.valid){
continue;
}
CheckValue<IkReal> x3150=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3150.valid){
continue;
}
CheckValue<IkReal> x3151=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3151.valid){
continue;
}
CheckValue<IkReal> x3152=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3152.valid){
continue;
}
CheckValue<IkReal> x3153=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3153.valid){
continue;
}
CheckValue<IkReal> x3154=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3154.valid){
continue;
}
CheckValue<IkReal> x3155=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3155.valid){
continue;
}
CheckValue<IkReal> x3156=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3156.valid){
continue;
}
CheckValue<IkReal> x3157=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3157.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3158=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3158.valid){
continue;
}
CheckValue<IkReal> x3159=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3159.valid){
continue;
}
CheckValue<IkReal> x3160=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3160.valid){
continue;
}
CheckValue<IkReal> x3161=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3161.valid){
continue;
}
CheckValue<IkReal> x3162=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3162.valid){
continue;
}
CheckValue<IkReal> x3163=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3163.valid){
continue;
}
CheckValue<IkReal> x3164=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3164.valid){
continue;
}
CheckValue<IkReal> x3165=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3165.valid){
continue;
}
CheckValue<IkReal> x3166=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3166.valid){
continue;
}
CheckValue<IkReal> x3167=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3167.valid){
continue;
}
CheckValue<IkReal> x3168=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3168.valid){
continue;
}
CheckValue<IkReal> x3169=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3169.valid){
continue;
}
CheckValue<IkReal> x3170=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3170.valid){
continue;
}
CheckValue<IkReal> x3171=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3171.valid){
continue;
}
CheckValue<IkReal> x3172=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3172.valid){
continue;
}
CheckValue<IkReal> x3173=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3173.valid){
continue;
}
CheckValue<IkReal> x3174=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3174.valid){
continue;
}
CheckValue<IkReal> x3175=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3175.valid){
continue;
}
CheckValue<IkReal> x3176=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3176.valid){
continue;
}
CheckValue<IkReal> x3177=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3177.valid){
continue;
}
CheckValue<IkReal> x3178=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3178.valid){
continue;
}
CheckValue<IkReal> x3179=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3179.valid){
continue;
}
CheckValue<IkReal> x3180=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3180.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst4=((((((((-1.0)*(((((((((IKcos(((15.1168550416)*npz*(x3135.value))))*(IKsin(((3.88804)*(r22*r22)*(x3136.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3137.value))))*(IKsin(((15.1168550416)*npz*(x3138.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3139.value))))))+(((((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3140.value))))*(IKsin(((15.1168550416)*npz*(x3141.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3142.value))))*(IKcos(((15.1168550416)*npz*(x3143.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3144.value))))))))*(IKcos(((3.88804)*(x3145.value))))))+(((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3146.value))))*(IKcos(((15.1168550416)*npz*(x3147.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3148.value))))*(IKsin(((15.1168550416)*npz*(x3149.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3150.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3151.value))))*(IKsin(((3.88804)*(r22*r22)*(x3152.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3153.value))))*(IKsin(((15.1168550416)*npz*(x3154.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3155.value))))))))*(IKsin(((3.88804)*(x3156.value))))))))*(IKsin(((0.5)*(x3157.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3158.value))))*(IKcos(((15.1168550416)*npz*(x3159.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3160.value))))*(IKsin(((15.1168550416)*npz*(x3161.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3162.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3163.value))))*(IKsin(((3.88804)*(r22*r22)*(x3164.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3165.value))))*(IKsin(((15.1168550416)*npz*(x3166.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3167.value))))))))*(IKcos(((3.88804)*(x3168.value))))))+(((-1.0)*(((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x3169.value))))*(IKsin(((3.88804)*(r22*r22)*(x3170.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3171.value))))*(IKsin(((15.1168550416)*npz*(x3172.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3173.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3174.value))))*(IKsin(((15.1168550416)*npz*(x3175.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3176.value))))*(IKcos(((15.1168550416)*npz*(x3177.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3178.value))))))))*(IKsin(((3.88804)*(x3179.value))))))))*(IKcos(((0.5)*(x3180.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
CheckValue<IkReal> x3181=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3181.valid){
continue;
}
CheckValue<IkReal> x3182=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3182.valid){
continue;
}
CheckValue<IkReal> x3183=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3183.valid){
continue;
}
CheckValue<IkReal> x3184=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3184.valid){
continue;
}
CheckValue<IkReal> x3185=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3185.valid){
continue;
}
CheckValue<IkReal> x3186=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3186.valid){
continue;
}
CheckValue<IkReal> x3187=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3187.valid){
continue;
}
CheckValue<IkReal> x3188=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3188.valid){
continue;
}
CheckValue<IkReal> x3189=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3189.valid){
continue;
}
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3190.valid){
continue;
}
CheckValue<IkReal> x3191=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3191.valid){
continue;
}
CheckValue<IkReal> x3192=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3192.valid){
continue;
}
CheckValue<IkReal> x3193=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3193.valid){
continue;
}
CheckValue<IkReal> x3194=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3194.valid){
continue;
}
CheckValue<IkReal> x3195=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3195.valid){
continue;
}
CheckValue<IkReal> x3196=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3196.valid){
continue;
}
CheckValue<IkReal> x3197=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3197.valid){
continue;
}
CheckValue<IkReal> x3198=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3198.valid){
continue;
}
CheckValue<IkReal> x3199=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3199.valid){
continue;
}
CheckValue<IkReal> x3200=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3200.valid){
continue;
}
CheckValue<IkReal> x3201=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3201.valid){
continue;
}
CheckValue<IkReal> x3202=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3202.valid){
continue;
}
CheckValue<IkReal> x3203=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3203.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3204=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3204.valid){
continue;
}
CheckValue<IkReal> x3205=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3205.valid){
continue;
}
CheckValue<IkReal> x3206=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3206.valid){
continue;
}
CheckValue<IkReal> x3207=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3207.valid){
continue;
}
CheckValue<IkReal> x3208=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3208.valid){
continue;
}
CheckValue<IkReal> x3209=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3209.valid){
continue;
}
CheckValue<IkReal> x3210=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3210.valid){
continue;
}
CheckValue<IkReal> x3211=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3211.valid){
continue;
}
CheckValue<IkReal> x3212=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3212.valid){
continue;
}
CheckValue<IkReal> x3213=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3213.valid){
continue;
}
CheckValue<IkReal> x3214=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3214.valid){
continue;
}
CheckValue<IkReal> x3215=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3215.valid){
continue;
}
CheckValue<IkReal> x3216=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3216.valid){
continue;
}
CheckValue<IkReal> x3217=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3217.valid){
continue;
}
CheckValue<IkReal> x3218=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3218.valid){
continue;
}
CheckValue<IkReal> x3219=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3219.valid){
continue;
}
CheckValue<IkReal> x3220=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3220.valid){
continue;
}
CheckValue<IkReal> x3221=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3221.valid){
continue;
}
CheckValue<IkReal> x3222=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3222.valid){
continue;
}
CheckValue<IkReal> x3223=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3223.valid){
continue;
}
CheckValue<IkReal> x3224=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3224.valid){
continue;
}
CheckValue<IkReal> x3225=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3225.valid){
continue;
}
CheckValue<IkReal> x3226=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3226.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst5=((((((((((((((((IKcos(((15.1168550416)*npz*(x3181.value))))*(IKsin(((3.88804)*(r22*r22)*(x3182.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3183.value))))*(IKsin(((15.1168550416)*npz*(x3184.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3185.value))))))+(((((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3186.value))))*(IKsin(((15.1168550416)*npz*(x3187.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3188.value))))*(IKcos(((15.1168550416)*npz*(x3189.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3190.value))))))))*(IKcos(((3.88804)*(x3191.value))))))+(((((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3192.value))))*(IKcos(((15.1168550416)*npz*(x3193.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3194.value))))*(IKsin(((15.1168550416)*npz*(x3195.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3196.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3197.value))))*(IKsin(((3.88804)*(r22*r22)*(x3198.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3199.value))))*(IKsin(((15.1168550416)*npz*(x3200.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3201.value))))))))*(IKsin(((3.88804)*(x3202.value))))))))*(IKcos(((0.5)*(x3203.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3204.value))))*(IKcos(((15.1168550416)*npz*(x3205.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3206.value))))*(IKsin(((15.1168550416)*npz*(x3207.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3208.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3209.value))))*(IKsin(((3.88804)*(r22*r22)*(x3210.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3211.value))))*(IKsin(((15.1168550416)*npz*(x3212.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3213.value))))))))*(IKcos(((3.88804)*(x3214.value))))))+(((-1.0)*(((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x3215.value))))*(IKsin(((3.88804)*(r22*r22)*(x3216.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3217.value))))*(IKsin(((15.1168550416)*npz*(x3218.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3219.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3220.value))))*(IKsin(((15.1168550416)*npz*(x3221.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3222.value))))*(IKcos(((15.1168550416)*npz*(x3223.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3224.value))))))))*(IKsin(((3.88804)*(x3225.value))))))))*(IKsin(((0.5)*(x3226.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
IkReal x3227=(cj2*sj1);
IkReal x3228=(cj1*cj2);
IkReal x3229=(cj1*sj2);
IkReal x3230=(sj1*sj2);
j0eval[0]=((1.0)+(((8.625)*sj1))+x3227+(((8.5)*x3230))+(((-1.0)*x3229))+(((8.5)*x3228)));
j0eval[1]=((-1.0)+(r22*r22));
j0eval[2]=IKsign(((0.04)+(((-0.04)*x3229))+(((0.345)*sj1))+(((0.04)*x3227))+(((0.34)*x3228))+(((0.34)*x3230))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x3231=r22*r22;
IkReal x3232=((914.077225394989)*pp);
IkReal x3233=(pz*r22);
IkReal x3234=x2969;
IkReal x3235=((3.88804)*x3234);
IkReal x3236=((15.11685504)*x3234);
IkReal x3237=((15.1168550416)*x3234);
IkReal x3238=(x3231*x3235);
if((((((914.077225394989)*(npz*npz)))+((x3231*x3232))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x3232))+(((-1828.15445078998)*npz*x3233)))) < -0.00001)
continue;
IkReal x3239=((0.5)*x3234*(IKsqrt(((((914.077225394989)*(npz*npz)))+((x3231*x3232))+(((914.077225394989)*(pz*pz)))+(((-1.0)*x3232))+(((-1828.15445078998)*npz*x3233))))));
IkReal x3240=(x3238+x3239);
sj6=gconst4;
cj6=gconst5;
j6=(x3235+(((-1.0)*x3240))+(((-1.0)*npz*x3236))+((x3233*x3236)));
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal gconst3=(x3235+(((-1.0)*x3240))+(((-1.0)*npz*x3237))+((x3233*x3237)));
CheckValue<IkReal> x3241=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3241.valid){
continue;
}
CheckValue<IkReal> x3242=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3242.valid){
continue;
}
CheckValue<IkReal> x3243=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3243.valid){
continue;
}
CheckValue<IkReal> x3244=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3244.valid){
continue;
}
CheckValue<IkReal> x3245=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3245.valid){
continue;
}
CheckValue<IkReal> x3246=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3246.valid){
continue;
}
CheckValue<IkReal> x3247=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3247.valid){
continue;
}
CheckValue<IkReal> x3248=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3248.valid){
continue;
}
CheckValue<IkReal> x3249=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3249.valid){
continue;
}
CheckValue<IkReal> x3250=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3250.valid){
continue;
}
CheckValue<IkReal> x3251=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3251.valid){
continue;
}
CheckValue<IkReal> x3252=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3252.valid){
continue;
}
CheckValue<IkReal> x3253=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3253.valid){
continue;
}
CheckValue<IkReal> x3254=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3254.valid){
continue;
}
CheckValue<IkReal> x3255=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3255.valid){
continue;
}
CheckValue<IkReal> x3256=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3256.valid){
continue;
}
CheckValue<IkReal> x3257=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3257.valid){
continue;
}
CheckValue<IkReal> x3258=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3258.valid){
continue;
}
CheckValue<IkReal> x3259=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3259.valid){
continue;
}
CheckValue<IkReal> x3260=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3260.valid){
continue;
}
CheckValue<IkReal> x3261=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3261.valid){
continue;
}
CheckValue<IkReal> x3262=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3262.valid){
continue;
}
CheckValue<IkReal> x3263=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3263.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3264=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3264.valid){
continue;
}
CheckValue<IkReal> x3265=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3265.valid){
continue;
}
CheckValue<IkReal> x3266=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3266.valid){
continue;
}
CheckValue<IkReal> x3267=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3267.valid){
continue;
}
CheckValue<IkReal> x3268=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3268.valid){
continue;
}
CheckValue<IkReal> x3269=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3269.valid){
continue;
}
CheckValue<IkReal> x3270=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3270.valid){
continue;
}
CheckValue<IkReal> x3271=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3271.valid){
continue;
}
CheckValue<IkReal> x3272=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3272.valid){
continue;
}
CheckValue<IkReal> x3273=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3273.valid){
continue;
}
CheckValue<IkReal> x3274=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3274.valid){
continue;
}
CheckValue<IkReal> x3275=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3275.valid){
continue;
}
CheckValue<IkReal> x3276=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3276.valid){
continue;
}
CheckValue<IkReal> x3277=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3277.valid){
continue;
}
CheckValue<IkReal> x3278=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3278.valid){
continue;
}
CheckValue<IkReal> x3279=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3279.valid){
continue;
}
CheckValue<IkReal> x3280=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3280.valid){
continue;
}
CheckValue<IkReal> x3281=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3281.valid){
continue;
}
CheckValue<IkReal> x3282=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3282.valid){
continue;
}
CheckValue<IkReal> x3283=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3283.valid){
continue;
}
CheckValue<IkReal> x3284=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3284.valid){
continue;
}
CheckValue<IkReal> x3285=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3285.valid){
continue;
}
CheckValue<IkReal> x3286=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3286.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst4=((((((((-1.0)*(((((((((IKcos(((15.1168550416)*npz*(x3241.value))))*(IKsin(((3.88804)*(r22*r22)*(x3242.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3243.value))))*(IKsin(((15.1168550416)*npz*(x3244.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3245.value))))))+(((((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3246.value))))*(IKsin(((15.1168550416)*npz*(x3247.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3248.value))))*(IKcos(((15.1168550416)*npz*(x3249.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3250.value))))))))*(IKcos(((3.88804)*(x3251.value))))))+(((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3252.value))))*(IKcos(((15.1168550416)*npz*(x3253.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3254.value))))*(IKsin(((15.1168550416)*npz*(x3255.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3256.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3257.value))))*(IKsin(((3.88804)*(r22*r22)*(x3258.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3259.value))))*(IKsin(((15.1168550416)*npz*(x3260.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3261.value))))))))*(IKsin(((3.88804)*(x3262.value))))))))*(IKsin(((0.5)*(x3263.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3264.value))))*(IKcos(((15.1168550416)*npz*(x3265.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3266.value))))*(IKsin(((15.1168550416)*npz*(x3267.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3268.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3269.value))))*(IKsin(((3.88804)*(r22*r22)*(x3270.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3271.value))))*(IKsin(((15.1168550416)*npz*(x3272.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3273.value))))))))*(IKcos(((3.88804)*(x3274.value))))))+(((-1.0)*(((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x3275.value))))*(IKsin(((3.88804)*(r22*r22)*(x3276.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3277.value))))*(IKsin(((15.1168550416)*npz*(x3278.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3279.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3280.value))))*(IKsin(((15.1168550416)*npz*(x3281.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3282.value))))*(IKcos(((15.1168550416)*npz*(x3283.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3284.value))))))))*(IKsin(((3.88804)*(x3285.value))))))))*(IKcos(((0.5)*(x3286.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
CheckValue<IkReal> x3287=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3287.valid){
continue;
}
CheckValue<IkReal> x3288=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3288.valid){
continue;
}
CheckValue<IkReal> x3289=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3289.valid){
continue;
}
CheckValue<IkReal> x3290=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3290.valid){
continue;
}
CheckValue<IkReal> x3291=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3291.valid){
continue;
}
CheckValue<IkReal> x3292=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3292.valid){
continue;
}
CheckValue<IkReal> x3293=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3293.valid){
continue;
}
CheckValue<IkReal> x3294=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3294.valid){
continue;
}
CheckValue<IkReal> x3295=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3295.valid){
continue;
}
CheckValue<IkReal> x3296=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3296.valid){
continue;
}
CheckValue<IkReal> x3297=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3297.valid){
continue;
}
CheckValue<IkReal> x3298=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3298.valid){
continue;
}
CheckValue<IkReal> x3299=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3299.valid){
continue;
}
CheckValue<IkReal> x3300=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3300.valid){
continue;
}
CheckValue<IkReal> x3301=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3301.valid){
continue;
}
CheckValue<IkReal> x3302=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3302.valid){
continue;
}
CheckValue<IkReal> x3303=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3303.valid){
continue;
}
CheckValue<IkReal> x3304=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3304.valid){
continue;
}
CheckValue<IkReal> x3305=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3305.valid){
continue;
}
CheckValue<IkReal> x3306=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3306.valid){
continue;
}
CheckValue<IkReal> x3307=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3307.valid){
continue;
}
CheckValue<IkReal> x3308=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3308.valid){
continue;
}
CheckValue<IkReal> x3309=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3309.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3310=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3310.valid){
continue;
}
CheckValue<IkReal> x3311=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3311.valid){
continue;
}
CheckValue<IkReal> x3312=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3312.valid){
continue;
}
CheckValue<IkReal> x3313=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3313.valid){
continue;
}
CheckValue<IkReal> x3314=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3314.valid){
continue;
}
CheckValue<IkReal> x3315=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3315.valid){
continue;
}
CheckValue<IkReal> x3316=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3316.valid){
continue;
}
CheckValue<IkReal> x3317=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3317.valid){
continue;
}
CheckValue<IkReal> x3318=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3318.valid){
continue;
}
CheckValue<IkReal> x3319=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3319.valid){
continue;
}
CheckValue<IkReal> x3320=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3320.valid){
continue;
}
CheckValue<IkReal> x3321=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3321.valid){
continue;
}
CheckValue<IkReal> x3322=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3322.valid){
continue;
}
CheckValue<IkReal> x3323=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3323.valid){
continue;
}
CheckValue<IkReal> x3324=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3324.valid){
continue;
}
CheckValue<IkReal> x3325=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3325.valid){
continue;
}
CheckValue<IkReal> x3326=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3326.valid){
continue;
}
CheckValue<IkReal> x3327=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3327.valid){
continue;
}
CheckValue<IkReal> x3328=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3328.valid){
continue;
}
CheckValue<IkReal> x3329=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3329.valid){
continue;
}
CheckValue<IkReal> x3330=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3330.valid){
continue;
}
CheckValue<IkReal> x3331=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3331.valid){
continue;
}
CheckValue<IkReal> x3332=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3332.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst5=((((((((((((((((IKcos(((15.1168550416)*npz*(x3287.value))))*(IKsin(((3.88804)*(r22*r22)*(x3288.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3289.value))))*(IKsin(((15.1168550416)*npz*(x3290.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3291.value))))))+(((((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3292.value))))*(IKsin(((15.1168550416)*npz*(x3293.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3294.value))))*(IKcos(((15.1168550416)*npz*(x3295.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3296.value))))))))*(IKcos(((3.88804)*(x3297.value))))))+(((((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3298.value))))*(IKcos(((15.1168550416)*npz*(x3299.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3300.value))))*(IKsin(((15.1168550416)*npz*(x3301.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3302.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3303.value))))*(IKsin(((3.88804)*(r22*r22)*(x3304.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3305.value))))*(IKsin(((15.1168550416)*npz*(x3306.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3307.value))))))))*(IKsin(((3.88804)*(x3308.value))))))))*(IKcos(((0.5)*(x3309.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3310.value))))*(IKcos(((15.1168550416)*npz*(x3311.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3312.value))))*(IKsin(((15.1168550416)*npz*(x3313.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3314.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3315.value))))*(IKsin(((3.88804)*(r22*r22)*(x3316.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3317.value))))*(IKsin(((15.1168550416)*npz*(x3318.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3319.value))))))))*(IKcos(((3.88804)*(x3320.value))))))+(((-1.0)*(((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x3321.value))))*(IKsin(((3.88804)*(r22*r22)*(x3322.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3323.value))))*(IKsin(((15.1168550416)*npz*(x3324.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3325.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3326.value))))*(IKsin(((15.1168550416)*npz*(x3327.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3328.value))))*(IKcos(((15.1168550416)*npz*(x3329.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3330.value))))))))*(IKsin(((3.88804)*(x3331.value))))))))*(IKsin(((0.5)*(x3332.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
IkReal x3333=r22*r22;
j0eval[0]=((-1.0)+x3333);
j0eval[1]=((1.0)+(((-2.0)*x3333))+(x3333*x3333));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3335=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3335.valid){
continue;
}
CheckValue<IkReal> x3336=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3336.valid){
continue;
}
CheckValue<IkReal> x3337=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3337.valid){
continue;
}
CheckValue<IkReal> x3338=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3338.valid){
continue;
}
CheckValue<IkReal> x3339=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3339.valid){
continue;
}
CheckValue<IkReal> x3340=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3340.valid){
continue;
}
CheckValue<IkReal> x3341=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3341.valid){
continue;
}
CheckValue<IkReal> x3342=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3342.valid){
continue;
}
CheckValue<IkReal> x3343=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3343.valid){
continue;
}
CheckValue<IkReal> x3344=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3344.valid){
continue;
}
CheckValue<IkReal> x3345=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3345.valid){
continue;
}
CheckValue<IkReal> x3346=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3346.valid){
continue;
}
CheckValue<IkReal> x3347=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3347.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3348=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3348.valid){
continue;
}
CheckValue<IkReal> x3349=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3349.valid){
continue;
}
CheckValue<IkReal> x3350=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3350.valid){
continue;
}
CheckValue<IkReal> x3351=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3351.valid){
continue;
}
CheckValue<IkReal> x3352=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3352.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3353=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3353.valid){
continue;
}
CheckValue<IkReal> x3354=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3354.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3355=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3355.valid){
continue;
}
CheckValue<IkReal> x3356=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3356.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3357=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3357.valid){
continue;
}
CheckValue<IkReal> x3358=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3358.valid){
continue;
}
CheckValue<IkReal> x3359=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3359.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3360=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3360.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3361=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3361.valid){
continue;
}
CheckValue<IkReal> x3362=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3362.valid){
continue;
}
CheckValue<IkReal> x3363=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3363.valid){
continue;
}
CheckValue<IkReal> x3364=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3364.valid){
continue;
}
CheckValue<IkReal> x3365=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3365.valid){
continue;
}
CheckValue<IkReal> x3366=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3366.valid){
continue;
}
CheckValue<IkReal> x3367=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3367.valid){
continue;
}
CheckValue<IkReal> x3368=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3368.valid){
continue;
}
CheckValue<IkReal> x3369=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3369.valid){
continue;
}
CheckValue<IkReal> x3370=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3370.valid){
continue;
}
CheckValue<IkReal> x3371=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3371.valid){
continue;
}
CheckValue<IkReal> x3372=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3372.valid){
continue;
}
CheckValue<IkReal> x3373=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3373.valid){
continue;
}
CheckValue<IkReal> x3374=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3374.valid){
continue;
}
CheckValue<IkReal> x3375=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3375.valid){
continue;
}
CheckValue<IkReal> x3376=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3376.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3377=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3377.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3378=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3378.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3379=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3379.valid){
continue;
}
CheckValue<IkReal> x3380=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3380.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3381=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3381.valid){
continue;
}
CheckValue<IkReal> x3382=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3382.valid){
continue;
}
CheckValue<IkReal> x3383=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3383.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3384=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3384.valid){
continue;
}
CheckValue<IkReal> x3385=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3385.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3386=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3386.valid){
continue;
}
CheckValue<IkReal> x3387=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3387.valid){
continue;
}
CheckValue<IkReal> x3388=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3388.valid){
continue;
}
CheckValue<IkReal> x3334=IKPowWithIntegerCheck(IKsign(((((1.209348403328)*(r12*r12)*(x3335.value)))+(((18.2815445040299)*(pz*pz)*(r02*r02)*(r22*r22)*(x3336.value)))+(((18.2815445078998)*pp*(r02*r02)*(r22*r22)*(x3337.value)))+(((-2.418696806656)*(r12*r12)*(r22*r22)*(x3338.value)))+(((18.2815445078998)*(pz*pz)*(r12*r12)*(x3339.value)))+(((-0.16)*(r12*r12)*(r22*r22)*(x3340.value)))+(((-2.4186968064)*py*pz*r12*r22*(x3341.value)))+(((-18.2815445078998)*pp*(r12*r12)*(x3342.value)))+(((0.16)*(r12*r12)*(x3343.value)))+(((1.209348403328)*(r12*r12)*(r22*r22*r22*r22)*(x3344.value)))+(((0.08)*(py*py)))+(((1.209348403328)*(r02*r02)*(x3345.value)))+(((-0.6220864)*py*r12*(x3346.value)))+(((1.2093484032)*npz*(r12*r12)*(x3347.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.6220864)*px*r02*(r22*r22)*(x3348.value)))+(((0.622086399934157)*pz*r22*(r02*r02)*(x3349.value)))+(((-9.40398993115546)*npz*(r12*r12)*(x3350.value)))+(((0.6220864)*py*r12*(r22*r22)*(x3351.value)))+(((-0.3110432)*(r02*r02)*(x3352.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.622086399934157)*pz*r22*(r12*r12)*(x3353.value)))+(((0.08)*px*r02*(x3354.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.6220864)*px*r02*(x3355.value)))+(((-0.020575920000823)*(r02*r02)*(x3356.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-9.40398993115546)*npz*(r02*r02)*(x3357.value)))+(((0.00529210604850337)*(r02*r02)))+(((2.4186968064)*npz*px*r02*(x3358.value)))+(((1.2093484032)*npz*(r02*r02)*(x3359.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.0411518400016461)*py*r12))+(((0.3110432)*(r12*r12)*(r22*r22)*(x3360.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.16)*(r02*r02)*(r22*r22)*(x3361.value)))+(((-73.1261780238593)*npz*pz*r22*(r02*r02)*(x3362.value)))+(((-9.40398993115546)*pz*(r12*r12)*(r22*r22*r22)*(x3363.value)))+(((0.00529210604850337)*(r12*r12)))+(((18.2815445078998)*pp*(r12*r12)*(r22*r22)*(x3364.value)))+(((9.40398993115546)*pz*r22*(r02*r02)*(x3365.value)))+(((9.40398993115546)*npz*(r12*r12)*(r22*r22)*(x3366.value)))+(((0.08)*(px*px)))+(((-73.1261780238593)*npz*pz*r22*(r12*r12)*(x3367.value)))+(((-0.622086399934157)*npz*(r12*r12)*(x3368.value)))+(((-0.622086399934157)*npz*(r02*r02)*(x3369.value)))+(((18.2815445040299)*(pz*pz)*(r12*r12)*(r22*r22)*(x3370.value)))+(((-18.2815445078998)*pp*(r02*r02)*(x3371.value)))+(((9.40398993115546)*pz*r22*(r12*r12)*(x3372.value)))+(((18.2815445078998)*(pz*pz)*(r02*r02)*(x3373.value)))+(((36.5630890119297)*(npz*npz)*(r02*r02)*(x3374.value)))+(((36.5630890119297)*(npz*npz)*(r12*r12)*(x3375.value)))+(((0.08)*py*r12*(x3376.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.3110432)*(r12*r12)*(x3377.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.3110432)*(r02*r02)*(r22*r22)*(x3378.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((9.40398993115546)*npz*(r02*r02)*(r22*r22)*(x3379.value)))+(((-0.020575920000823)*(r12*r12)*(x3380.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((2.4186968064)*npz*py*r12*(x3381.value)))+(((-2.418696806656)*(r02*r02)*(r22*r22)*(x3382.value)))+(((-1.2093484032)*pz*r22*(r12*r12)*(x3383.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.0411518400016461)*px*r02))+(((0.16)*(r02*r02)*(x3384.value)))+(((-1.2093484032)*pz*r22*(r02*r02)*(x3385.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((1.209348403328)*(r02*r02)*(r22*r22*r22*r22)*(x3386.value)))+(((-2.4186968064)*px*pz*r02*r22*(x3387.value)))+(((-9.40398993115546)*pz*(r02*r02)*(r22*r22*r22)*(x3388.value))))),-1);
if(!x3334.valid){
continue;
}
CheckValue<IkReal> x3390=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3390.valid){
continue;
}
CheckValue<IkReal> x3391=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3391.valid){
continue;
}
CheckValue<IkReal> x3392=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3392.valid){
continue;
}
CheckValue<IkReal> x3393=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3393.valid){
continue;
}
CheckValue<IkReal> x3394=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3394.valid){
continue;
}
CheckValue<IkReal> x3395=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3395.valid){
continue;
}
CheckValue<IkReal> x3396=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3396.valid){
continue;
}
CheckValue<IkReal> x3397=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3397.valid){
continue;
}
CheckValue<IkReal> x3398=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3398.valid){
continue;
}
CheckValue<IkReal> x3399=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3399.valid){
continue;
}
CheckValue<IkReal> x3400=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3400.valid){
continue;
}
CheckValue<IkReal> x3401=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3401.valid){
continue;
}
CheckValue<IkReal> x3402=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3402.valid){
continue;
}
CheckValue<IkReal> x3403=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3403.valid){
continue;
}
CheckValue<IkReal> x3404=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3404.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3405=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3405.valid){
continue;
}
CheckValue<IkReal> x3406=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3406.valid){
continue;
}
CheckValue<IkReal> x3407=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3407.valid){
continue;
}
CheckValue<IkReal> x3408=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3408.valid){
continue;
}
CheckValue<IkReal> x3409=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3409.valid){
continue;
}
CheckValue<IkReal> x3410=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3410.valid){
continue;
}
CheckValue<IkReal> x3411=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3411.valid){
continue;
}
CheckValue<IkReal> x3412=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3412.valid){
continue;
}
CheckValue<IkReal> x3413=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3413.valid){
continue;
}
CheckValue<IkReal> x3414=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3414.valid){
continue;
}
CheckValue<IkReal> x3415=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3415.valid){
continue;
}
CheckValue<IkReal> x3416=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3416.valid){
continue;
}
CheckValue<IkReal> x3417=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3417.valid){
continue;
}
CheckValue<IkReal> x3418=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3418.valid){
continue;
}
CheckValue<IkReal> x3419=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3419.valid){
continue;
}
CheckValue<IkReal> x3420=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3420.valid){
continue;
}
CheckValue<IkReal> x3421=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3421.valid){
continue;
}
CheckValue<IkReal> x3422=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3422.valid){
continue;
}
CheckValue<IkReal> x3423=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3423.valid){
continue;
}
CheckValue<IkReal> x3424=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3424.valid){
continue;
}
CheckValue<IkReal> x3425=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3425.valid){
continue;
}
CheckValue<IkReal> x3426=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3426.valid){
continue;
}
CheckValue<IkReal> x3427=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3427.valid){
continue;
}
CheckValue<IkReal> x3428=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3428.valid){
continue;
}
CheckValue<IkReal> x3429=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3429.valid){
continue;
}
CheckValue<IkReal> x3430=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3430.valid){
continue;
}
CheckValue<IkReal> x3431=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3431.valid){
continue;
}
CheckValue<IkReal> x3432=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3432.valid){
continue;
}
CheckValue<IkReal> x3433=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3433.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3434=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3434.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3435=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3435.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3436=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3436.valid){
continue;
}
CheckValue<IkReal> x3437=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3437.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3438=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3438.valid){
continue;
}
CheckValue<IkReal> x3439=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3439.valid){
continue;
}
CheckValue<IkReal> x3440=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3440.valid){
continue;
}
CheckValue<IkReal> x3441=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3441.valid){
continue;
}
CheckValue<IkReal> x3442=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3442.valid){
continue;
}
CheckValue<IkReal> x3443=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3443.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3444=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3444.valid){
continue;
}
CheckValue<IkReal> x3445=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3445.valid){
continue;
}
CheckValue<IkReal> x3446=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3446.valid){
continue;
}
CheckValue<IkReal> x3447=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3447.valid){
continue;
}
CheckValue<IkReal> x3448=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3448.valid){
continue;
}
CheckValue<IkReal> x3449=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3449.valid){
continue;
}
CheckValue<IkReal> x3450=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3450.valid){
continue;
}
CheckValue<IkReal> x3451=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3451.valid){
continue;
}
CheckValue<IkReal> x3452=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3452.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3453=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3453.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3454=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3454.valid){
continue;
}
CheckValue<IkReal> x3455=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3455.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3456=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3456.valid){
continue;
}
CheckValue<IkReal> x3457=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3457.valid){
continue;
}
CheckValue<IkReal> x3458=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3458.valid){
continue;
}
CheckValue<IkReal> x3459=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3459.valid){
continue;
}
CheckValue<IkReal> x3460=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3460.valid){
continue;
}
CheckValue<IkReal> x3461=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3461.valid){
continue;
}
CheckValue<IkReal> x3462=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3462.valid){
continue;
}
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3463.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3464=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3464.valid){
continue;
}
CheckValue<IkReal> x3465=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3465.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3466=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3466.valid){
continue;
}
CheckValue<IkReal> x3467=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3467.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3468=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3468.valid){
continue;
}
CheckValue<IkReal> x3469=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3469.valid){
continue;
}
CheckValue<IkReal> x3470=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3470.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3471=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3471.valid){
continue;
}
CheckValue<IkReal> x3472=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3472.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3473=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3473.valid){
continue;
}
CheckValue<IkReal> x3474=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3474.valid){
continue;
}
CheckValue<IkReal> x3475=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3475.valid){
continue;
}
CheckValue<IkReal> x3476=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3476.valid){
continue;
}
CheckValue<IkReal> x3477=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3477.valid){
continue;
}
CheckValue<IkReal> x3478=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3478.valid){
continue;
}
CheckValue<IkReal> x3479=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3479.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3480=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3480.valid){
continue;
}
CheckValue<IkReal> x3481=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3481.valid){
continue;
}
CheckValue<IkReal> x3482=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3482.valid){
continue;
}
CheckValue<IkReal> x3483=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3483.valid){
continue;
}
CheckValue<IkReal> x3484=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3484.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3485=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3485.valid){
continue;
}
CheckValue<IkReal> x3486=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3486.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3487=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3487.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3488=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3488.valid){
continue;
}
CheckValue<IkReal> x3489=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3489.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3490=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3490.valid){
continue;
}
CheckValue<IkReal> x3491=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3491.valid){
continue;
}
CheckValue<IkReal> x3492=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3492.valid){
continue;
}
CheckValue<IkReal> x3493=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3493.valid){
continue;
}
CheckValue<IkReal> x3494=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3494.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3495=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3495.valid){
continue;
}
CheckValue<IkReal> x3496=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3496.valid){
continue;
}
CheckValue<IkReal> x3497=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3497.valid){
continue;
}
CheckValue<IkReal> x3498=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3498.valid){
continue;
}
CheckValue<IkReal> x3499=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3499.valid){
continue;
}
CheckValue<IkReal> x3500=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3500.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3501=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3501.valid){
continue;
}
CheckValue<IkReal> x3502=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3502.valid){
continue;
}
CheckValue<IkReal> x3503=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3503.valid){
continue;
}
CheckValue<IkReal> x3504=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3504.valid){
continue;
}
CheckValue<IkReal> x3505=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3505.valid){
continue;
}
CheckValue<IkReal> x3506=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3506.valid){
continue;
}
CheckValue<IkReal> x3507=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3507.valid){
continue;
}
CheckValue<IkReal> x3508=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3508.valid){
continue;
}
CheckValue<IkReal> x3509=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3509.valid){
continue;
}
CheckValue<IkReal> x3510=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3510.valid){
continue;
}
CheckValue<IkReal> x3511=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3511.valid){
continue;
}
CheckValue<IkReal> x3512=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3512.valid){
continue;
}
CheckValue<IkReal> x3513=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3513.valid){
continue;
}
CheckValue<IkReal> x3514=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3514.valid){
continue;
}
CheckValue<IkReal> x3515=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3515.valid){
continue;
}
CheckValue<IkReal> x3516=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3516.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3517=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3517.valid){
continue;
}
CheckValue<IkReal> x3518=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3518.valid){
continue;
}
CheckValue<IkReal> x3519=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3519.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3520=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3520.valid){
continue;
}
CheckValue<IkReal> x3521=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3521.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3522=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3522.valid){
continue;
}
CheckValue<IkReal> x3523=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3523.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3524=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3524.valid){
continue;
}
CheckValue<IkReal> x3525=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3525.valid){
continue;
}
CheckValue<IkReal> x3526=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3526.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3527=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3527.valid){
continue;
}
CheckValue<IkReal> x3528=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3528.valid){
continue;
}
CheckValue<IkReal> x3529=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3529.valid){
continue;
}
CheckValue<IkReal> x3530=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3530.valid){
continue;
}
CheckValue<IkReal> x3531=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3531.valid){
continue;
}
CheckValue<IkReal> x3532=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3532.valid){
continue;
}
CheckValue<IkReal> x3533=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3533.valid){
continue;
}
CheckValue<IkReal> x3534=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3534.valid){
continue;
}
CheckValue<IkReal> x3535=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3535.valid){
continue;
}
CheckValue<IkReal> x3536=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3536.valid){
continue;
}
CheckValue<IkReal> x3537=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3537.valid){
continue;
}
CheckValue<IkReal> x3538=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3538.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3539=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3539.valid){
continue;
}
CheckValue<IkReal> x3540=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3540.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3541=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3541.valid){
continue;
}
CheckValue<IkReal> x3542=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3542.valid){
continue;
}
CheckValue<IkReal> x3543=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3543.valid){
continue;
}
CheckValue<IkReal> x3544=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3544.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3545=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3545.valid){
continue;
}
CheckValue<IkReal> x3546=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3546.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3547=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3547.valid){
continue;
}
CheckValue<IkReal> x3548=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3548.valid){
continue;
}
CheckValue<IkReal> x3549=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3549.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3550=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3550.valid){
continue;
}
CheckValue<IkReal> x3551=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3551.valid){
continue;
}
CheckValue<IkReal> x3552=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3552.valid){
continue;
}
CheckValue<IkReal> x3553=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3553.valid){
continue;
}
CheckValue<IkReal> x3554=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3554.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3555=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3555.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3556=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3556.valid){
continue;
}
CheckValue<IkReal> x3557=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3557.valid){
continue;
}
CheckValue<IkReal> x3558=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3558.valid){
continue;
}
CheckValue<IkReal> x3559=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3559.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3560=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3560.valid){
continue;
}
CheckValue<IkReal> x3561=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3561.valid){
continue;
}
CheckValue<IkReal> x3562=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3562.valid){
continue;
}
CheckValue<IkReal> x3563=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3563.valid){
continue;
}
CheckValue<IkReal> x3564=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3564.valid){
continue;
}
CheckValue<IkReal> x3565=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3565.valid){
continue;
}
CheckValue<IkReal> x3566=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3566.valid){
continue;
}
CheckValue<IkReal> x3567=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3567.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3568=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3568.valid){
continue;
}
CheckValue<IkReal> x3569=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3569.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3570=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3570.valid){
continue;
}
CheckValue<IkReal> x3571=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3571.valid){
continue;
}
CheckValue<IkReal> x3572=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3572.valid){
continue;
}
CheckValue<IkReal> x3573=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3573.valid){
continue;
}
CheckValue<IkReal> x3574=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3574.valid){
continue;
}
CheckValue<IkReal> x3575=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3575.valid){
continue;
}
CheckValue<IkReal> x3576=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3576.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3577=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3577.valid){
continue;
}
CheckValue<IkReal> x3578=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3578.valid){
continue;
}
CheckValue<IkReal> x3579=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3579.valid){
continue;
}
CheckValue<IkReal> x3580=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3580.valid){
continue;
}
CheckValue<IkReal> x3581=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3581.valid){
continue;
}
CheckValue<IkReal> x3582=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3582.valid){
continue;
}
CheckValue<IkReal> x3583=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3583.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3584=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3584.valid){
continue;
}
CheckValue<IkReal> x3585=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3585.valid){
continue;
}
CheckValue<IkReal> x3586=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3586.valid){
continue;
}
CheckValue<IkReal> x3587=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3587.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3588=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3588.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3589=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3589.valid){
continue;
}
CheckValue<IkReal> x3590=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3590.valid){
continue;
}
CheckValue<IkReal> x3591=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3591.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3592=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3592.valid){
continue;
}
CheckValue<IkReal> x3593=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3593.valid){
continue;
}
CheckValue<IkReal> x3594=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3594.valid){
continue;
}
CheckValue<IkReal> x3595=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3595.valid){
continue;
}
CheckValue<IkReal> x3596=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3596.valid){
continue;
}
CheckValue<IkReal> x3597=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3597.valid){
continue;
}
CheckValue<IkReal> x3598=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3598.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3599=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3599.valid){
continue;
}
CheckValue<IkReal> x3600=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3600.valid){
continue;
}
CheckValue<IkReal> x3601=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3601.valid){
continue;
}
CheckValue<IkReal> x3602=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3602.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3603=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3603.valid){
continue;
}
CheckValue<IkReal> x3604=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3604.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3605=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3605.valid){
continue;
}
CheckValue<IkReal> x3606=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3606.valid){
continue;
}
CheckValue<IkReal> x3607=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3607.valid){
continue;
}
CheckValue<IkReal> x3608=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3608.valid){
continue;
}
CheckValue<IkReal> x3609=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3609.valid){
continue;
}
CheckValue<IkReal> x3610=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3610.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3611=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3611.valid){
continue;
}
CheckValue<IkReal> x3612=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3612.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3613=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3613.valid){
continue;
}
CheckValue<IkReal> x3614=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3614.valid){
continue;
}
CheckValue<IkReal> x3615=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3615.valid){
continue;
}
CheckValue<IkReal> x3616=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3616.valid){
continue;
}
CheckValue<IkReal> x3617=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3617.valid){
continue;
}
CheckValue<IkReal> x3618=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3618.valid){
continue;
}
CheckValue<IkReal> x3619=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3619.valid){
continue;
}
CheckValue<IkReal> x3620=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3620.valid){
continue;
}
CheckValue<IkReal> x3621=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3621.valid){
continue;
}
CheckValue<IkReal> x3622=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3622.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3623=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3623.valid){
continue;
}
CheckValue<IkReal> x3624=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3624.valid){
continue;
}
CheckValue<IkReal> x3625=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3625.valid){
continue;
}
CheckValue<IkReal> x3626=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3626.valid){
continue;
}
CheckValue<IkReal> x3627=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3627.valid){
continue;
}
CheckValue<IkReal> x3628=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3628.valid){
continue;
}
CheckValue<IkReal> x3629=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3629.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3630=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3630.valid){
continue;
}
CheckValue<IkReal> x3631=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3631.valid){
continue;
}
CheckValue<IkReal> x3632=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3632.valid){
continue;
}
CheckValue<IkReal> x3633=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3633.valid){
continue;
}
CheckValue<IkReal> x3634=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3634.valid){
continue;
}
CheckValue<IkReal> x3635=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3635.valid){
continue;
}
CheckValue<IkReal> x3636=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3636.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3637=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3637.valid){
continue;
}
CheckValue<IkReal> x3638=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3638.valid){
continue;
}
CheckValue<IkReal> x3639=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3639.valid){
continue;
}
CheckValue<IkReal> x3640=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3640.valid){
continue;
}
CheckValue<IkReal> x3641=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3641.valid){
continue;
}
CheckValue<IkReal> x3642=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3642.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3643=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3643.valid){
continue;
}
CheckValue<IkReal> x3644=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3644.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3645=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3645.valid){
continue;
}
CheckValue<IkReal> x3646=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3646.valid){
continue;
}
CheckValue<IkReal> x3647=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3647.valid){
continue;
}
CheckValue<IkReal> x3648=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3648.valid){
continue;
}
CheckValue<IkReal> x3649=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3649.valid){
continue;
}
CheckValue<IkReal> x3650=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3650.valid){
continue;
}
CheckValue<IkReal> x3651=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3651.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3652=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3652.valid){
continue;
}
CheckValue<IkReal> x3653=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3653.valid){
continue;
}
CheckValue<IkReal> x3654=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3654.valid){
continue;
}
CheckValue<IkReal> x3655=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3655.valid){
continue;
}
CheckValue<IkReal> x3656=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3656.valid){
continue;
}
CheckValue<IkReal> x3657=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3657.valid){
continue;
}
CheckValue<IkReal> x3658=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3658.valid){
continue;
}
CheckValue<IkReal> x3659=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3659.valid){
continue;
}
CheckValue<IkReal> x3660=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3660.valid){
continue;
}
CheckValue<IkReal> x3661=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3661.valid){
continue;
}
CheckValue<IkReal> x3662=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3662.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3663=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3663.valid){
continue;
}
CheckValue<IkReal> x3664=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3664.valid){
continue;
}
CheckValue<IkReal> x3665=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3665.valid){
continue;
}
CheckValue<IkReal> x3666=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3666.valid){
continue;
}
CheckValue<IkReal> x3667=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3667.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3668=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3668.valid){
continue;
}
CheckValue<IkReal> x3669=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3669.valid){
continue;
}
CheckValue<IkReal> x3670=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3670.valid){
continue;
}
CheckValue<IkReal> x3671=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3671.valid){
continue;
}
CheckValue<IkReal> x3672=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3672.valid){
continue;
}
CheckValue<IkReal> x3673=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3673.valid){
continue;
}
CheckValue<IkReal> x3674=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3674.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3675=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3675.valid){
continue;
}
CheckValue<IkReal> x3676=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3676.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3677=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3677.valid){
continue;
}
CheckValue<IkReal> x3678=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3678.valid){
continue;
}
CheckValue<IkReal> x3679=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3679.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3680=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3680.valid){
continue;
}
CheckValue<IkReal> x3681=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3681.valid){
continue;
}
CheckValue<IkReal> x3682=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3682.valid){
continue;
}
CheckValue<IkReal> x3683=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3683.valid){
continue;
}
CheckValue<IkReal> x3684=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3684.valid){
continue;
}
CheckValue<IkReal> x3685=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3685.valid){
continue;
}
CheckValue<IkReal> x3686=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3686.valid){
continue;
}
CheckValue<IkReal> x3687=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3687.valid){
continue;
}
CheckValue<IkReal> x3688=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3688.valid){
continue;
}
CheckValue<IkReal> x3689=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3689.valid){
continue;
}
CheckValue<IkReal> x3690=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3690.valid){
continue;
}
CheckValue<IkReal> x3691=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3691.valid){
continue;
}
CheckValue<IkReal> x3692=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3692.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3693=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3693.valid){
continue;
}
CheckValue<IkReal> x3694=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3694.valid){
continue;
}
CheckValue<IkReal> x3695=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3695.valid){
continue;
}
CheckValue<IkReal> x3696=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3696.valid){
continue;
}
CheckValue<IkReal> x3697=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3697.valid){
continue;
}
CheckValue<IkReal> x3698=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3698.valid){
continue;
}
CheckValue<IkReal> x3699=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3699.valid){
continue;
}
CheckValue<IkReal> x3389 = IKatan2WithCheck(IkReal(((((13817.9729109302)*r12*(npz*npz*npz)*(x3390.value)*(x3391.value)))+(((-2665.47661156855)*r12*(pz*pz)*(x3392.value)*(x3393.value)))+(((30.23371008)*py*(npz*npz)*(x3394.value)))+(((228.519306300373)*py*(pz*pz)*(r22*r22)*(x3395.value)))+(((10363.4796837461)*npz*pp*r12*(r22*r22)*(x3396.value)*(x3397.value)))+(((457.038612600747)*npz*r12*(pz*pz)*(r22*r22)*(x3398.value)))+(((5330.95322257286)*r12*(npz*npz)*(r22*r22)*(x3399.value)*(x3400.value)))+(((-176.324811190502)*r12*(pz*pz)*(r22*r22)*(x3401.value)))+(((10661.9064451457)*npz*pz*r12*r22*(x3402.value)*(x3403.value)))+((npz*py*(x3404.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.103670145984534)*r12))+(((235.099748278886)*r12*(npz*npz)*(r22*r22)*(x3405.value)))+(((58.7749370759425)*r12*(r22*r22*r22*r22*r22*r22)*(x3406.value)*(x3407.value)))+(((31090.4390490445)*npz*r12*(pz*pz)*(r22*r22)*(x3408.value)*(x3409.value)))+(((2665.47661100431)*r12*(pz*pz)*(r22*r22*r22*r22)*(x3410.value)*(x3411.value)))+(((-1.05276856896914)*r12*(r22*r22)*(x3412.value)))+(((-41453.9187327906)*pz*r12*r22*(npz*npz)*(x3413.value)*(x3414.value)))+(((457.038612697495)*npz*pp*r12*(r22*r22)*(x3415.value)))+(((-3.88804)*pp*r12*(x3416.value)))+(((-4.0)*npz*r12*(r22*r22)*(x3417.value)))+(((1.05276856896914)*r12*(x3418.value)))+(((-228.519306348747)*pp*py*(x3419.value)))+(((3.88804)*pp*r12*(r22*r22)*(x3420.value)))+(((-10661.9064451457)*npz*pz*r12*(r22*r22*r22)*(x3421.value)*(x3422.value)))+(((-0.403073674393708)*py))+(((176.324811227827)*r12*(r22*r22)*(x3423.value)*(x3424.value)))+(((-176.324811227827)*r12*(r22*r22*r22*r22)*(x3425.value)*(x3426.value)))+(((-117.549874139443)*npz*py*(x3427.value)))+(((-30.23371008)*npz*py*pz*r22*(x3428.value)))+(((-10363.4796837461)*r12*r22*(pz*pz*pz)*(x3429.value)*(x3430.value)))+(((-0.257199000010288)*pp*r12))+(((120.9348403232)*npz*r12*(x3431.value)))+(((-15.5521599983539)*r12*(npz*npz)*(x3432.value)))+(((11.6641199987654)*pz*r12*r22*(x3433.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-3.0)*r12*(r22*r22)*(x3434.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.257199000010288)*py*(x3435.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612624934)*r12*(npz*npz)*(x3436.value)*(x3437.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((90.70113024)*pz*r12*(r22*r22*r22)*(x3438.value)))+(((-5330.9532231371)*pp*r12*(r22*r22)*(x3439.value)*(x3440.value)))+(((30.2337100832)*npz*r12*(r22*r22*r22*r22)*(x3441.value)))+(((114.259653174374)*r12*(pz*pz)*(x3442.value)*(x3443.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-1371.11583794736)*npz*r12*(r22*r22)*(x3444.value)*(x3445.value)))+(((7.77607999917696)*py*pz*r22*(x3446.value)))+(((0.132302651212584)*npz*r12))+(((-2.0)*py*(r22*r22)*(x3447.value)))+(((-176.324811227827)*r12*(pz*pz)*(x3448.value)))+(((15.5521599983539)*npz*pz*r12*r22*(x3449.value)))+(((-587.749370697216)*r12*(npz*npz)*(x3450.value)))+(((228.519306348747)*pp*py*(r22*r22)*(x3451.value)))+(((-0.514398000020576)*npz*r12*(x3452.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-30.23371008)*npz*pz*r12*r22*(x3453.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811209165)*npz*r12*(x3454.value)*(x3455.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((228.519306348747)*py*(pz*pz)*(x3456.value)))+(((-0.0932063064615264)*npz*r12*(x3457.value)))+(((457.038612697495)*npz*r12*(pz*pz)*(x3458.value)))+(((-90.70113024)*pz*r12*r22*(x3459.value)))+(((23.32824)*r12*(r22*r22)*(x3460.value)))+(((-11.66412)*r12*(r22*r22*r22*r22)*(x3461.value)))+(((114.259653174374)*pp*r12*(r22*r22)*(x3462.value)*(x3463.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((176.324811209165)*npz*r12*(r22*r22)*(x3464.value)*(x3465.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((914.077225298242)*r12*(npz*npz*npz)*(x3466.value)))+(((-19.4401999987654)*npz*r12*(x3467.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((10363.4796837461)*pp*pz*r12*r22*(x3468.value)*(x3469.value)))+(((-0.135385511590562)*r12*(x3470.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-114.259653174374)*pp*r12*(x3471.value)*(x3472.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811227827)*pp*r12*(r22*r22)*(x3473.value)))+(((-685.557918973681)*pz*r12*r22*(x3474.value)*(x3475.value)))+(((176.324811227827)*pp*r12*(x3476.value)))+(((-10363.4796837461)*pp*pz*r12*(r22*r22*r22)*(x3477.value)*(x3478.value)))+(((30.23371008)*r12*(npz*npz)*(x3479.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-3454.4932271841)*r12*(pz*pz*pz)*(r22*r22*r22)*(x3480.value)*(x3481.value)))+(((1371.11583794736)*pz*r12*(r22*r22*r22)*(x3482.value)*(x3483.value)))+(((3.88804)*py*(r22*r22)*(x3484.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((7.77608)*npz*py*(r22*r22)*(x3485.value)))+(((-15.11685504)*py*pz*r22*(x3486.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((7.77608)*npz*r12*(r22*r22)*(x3487.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-11.66412)*r12*(x3488.value)))+(((15.11685504)*npz*py*(x3489.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-10363.4796837461)*npz*pp*r12*(x3490.value)*(x3491.value)))+(((117.549874139443)*py*pz*r22*(x3492.value)))+(((342.77895945056)*r12*(pz*pz)*(r22*r22)*(x3493.value)*(x3494.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((5.64239395899188e-7)*r12*(pz*pz)*(r22*r22)*(x3495.value)*(x3496.value)))+(((15.1168550416)*py*(r22*r22*r22*r22)*(x3497.value)))+(((-30.2337100832)*py*(r22*r22)*(x3498.value)))+(((-45.3505651248)*r12*(r22*r22)*(x3499.value)*(x3500.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.514398000020576)*npz*py))+(((2665.47661156855)*pp*r12*(r22*r22*r22*r22)*(x3501.value)*(x3502.value)))+(((-5330.95322257286)*r12*(npz*npz)*(x3503.value)*(x3504.value)))+(((685.557918973681)*npz*r12*(x3505.value)*(x3506.value)))+(((2665.47661156855)*pp*r12*(x3507.value)*(x3508.value)))+(((-15.11685504)*pp*pz*r12*r22*(x3509.value)))+(((-457.038612697495)*npz*pp*r12*(x3510.value)))+(((2.0)*py*(x3511.value)))+(((-235.099748278886)*npz*pz*r12*(r22*r22*r22)*(x3512.value)))+(((-117.549874139443)*py*pz*(r22*r22*r22)*(x3513.value)))+(((117.549874139443)*npz*py*(r22*r22)*(x3514.value)))+(((-176.324811209165)*pz*r12*(r22*r22*r22)*(x3515.value)*(x3516.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-1828.15445059648)*pz*r12*r22*(npz*npz)*(x3517.value)))+(((-151.1685504064)*npz*r12*(r22*r22)*(x3518.value)))+(((-3.88804)*py*(x3519.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((15.11685504)*npz*pp*r12*(x3520.value)))+(((3.0)*r12*(x3521.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((176.324811209165)*pz*r12*r22*(x3522.value)*(x3523.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-15.552159999177)*npz*py*(x3524.value)))+(((-914.077225249868)*npz*pz*r12*r22*(x3525.value)*(x3526.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-914.077225298242)*npz*py*pz*r22*(x3527.value)))+(((457.038612649121)*py*(npz*npz)*(x3528.value)))+(((10363.4796837461)*npz*r12*(pz*pz)*(x3529.value)*(x3530.value)))+(((4.09320630646153)*pz*r12*r22*(x3531.value)))+(((-685.557918973681)*pz*r12*(r22*r22*r22*r22*r22)*(x3532.value)*(x3533.value)))+(((15.1168550416)*py*(x3534.value)))+(((685.557918973681)*npz*r12*(r22*r22*r22*r22)*(x3535.value)*(x3536.value)))+(((22.6752825624)*r12*(r22*r22*r22*r22)*(x3537.value)*(x3538.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((22.6752825624)*r12*(x3539.value)*(x3540.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+((pp*py))+(((-58.7749370759425)*r12*(x3541.value)*(x3542.value)))+(((940.398993115546)*npz*pz*r12*r22*(x3543.value)))+(((0.5)*pp*r12*(x3544.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))),IkReal(((((-90.70113024)*pz*r02*r22*(x3545.value)))+((npz*px*(x3546.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.0932063064615264)*npz*r02*(x3547.value)))+(((1.05276856896914)*r02*(x3548.value)))+(((0.103670145984534)*r02))+(((-19.4401999987654)*npz*r02*(x3549.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((228.519306348747)*pp*px*(r22*r22)*(x3550.value)))+(((-10363.4796837461)*r02*r22*(pz*pz*pz)*(x3551.value)*(x3552.value)))+(((176.324811209165)*pz*r02*r22*(x3553.value)*(x3554.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.135385511590562)*r02*(x3555.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((23.32824)*r02*(r22*r22)*(x3556.value)))+(((15.1168550416)*px*(x3557.value)))+(((-30.2337100832)*px*(r22*r22)*(x3558.value)))+(((-0.257199000010288)*px*(x3559.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.257199000010288)*pp*r02))+(((15.5521599983539)*npz*pz*r02*r22*(x3560.value)))+(((-235.099748278886)*npz*pz*r02*(r22*r22*r22)*(x3561.value)))+(((-685.557918973681)*pz*r02*(r22*r22*r22*r22*r22)*(x3562.value)*(x3563.value)))+(((15.1168550416)*px*(r22*r22*r22*r22)*(x3564.value)))+(((-0.403073674393708)*px))+(((10661.9064451457)*npz*pz*r02*r22*(x3565.value)*(x3566.value)))+(((0.5)*pp*r02*(x3567.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((176.324811209165)*npz*r02*(r22*r22)*(x3568.value)*(x3569.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-117.549874139443)*px*pz*(r22*r22*r22)*(x3570.value)))+(((-3454.4932271841)*r02*(pz*pz*pz)*(r22*r22*r22)*(x3571.value)*(x3572.value)))+(((10363.4796837461)*npz*r02*(pz*pz)*(x3573.value)*(x3574.value)))+(((22.6752825624)*r02*(x3575.value)*(x3576.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612649121)*px*(npz*npz)*(x3577.value)))+(((2665.47661156855)*pp*r02*(r22*r22*r22*r22)*(x3578.value)*(x3579.value)))+(((-5330.9532231371)*pp*r02*(r22*r22)*(x3580.value)*(x3581.value)))+(((114.259653174374)*r02*(pz*pz)*(x3582.value)*(x3583.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.132302651212584)*npz*r02))+(((7.77607999917696)*px*pz*r22*(x3584.value)))+(((117.549874139443)*npz*px*(r22*r22)*(x3585.value)))+(((90.70113024)*pz*r02*(r22*r22*r22)*(x3586.value)))+(((-3.88804)*px*(x3587.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((3.0)*r02*(x3588.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((1371.11583794736)*pz*r02*(r22*r22*r22)*(x3589.value)*(x3590.value)))+(((-3.0)*r02*(r22*r22)*(x3591.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-58.7749370759425)*r02*(x3592.value)*(x3593.value)))+(((235.099748278886)*r02*(npz*npz)*(r22*r22)*(x3594.value)))+(((-10661.9064451457)*npz*pz*r02*(r22*r22*r22)*(x3595.value)*(x3596.value)))+(((22.6752825624)*r02*(r22*r22*r22*r22)*(x3597.value)*(x3598.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((15.11685504)*npz*pp*r02*(x3599.value)))+(((-15.11685504)*pp*pz*r02*r22*(x3600.value)))+(((120.9348403232)*npz*r02*(x3601.value)))+(((30.23371008)*r02*(npz*npz)*(x3602.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811209165)*npz*r02*(x3603.value)*(x3604.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612697495)*npz*pp*r02*(r22*r22)*(x3605.value)))+(((-3.88804)*pp*r02*(x3606.value)))+(((-117.549874139443)*npz*px*(x3607.value)))+(((914.077225298242)*r02*(npz*npz*npz)*(x3608.value)))+(((342.77895945056)*r02*(pz*pz)*(r22*r22)*(x3609.value)*(x3610.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612624934)*r02*(npz*npz)*(x3611.value)*(x3612.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-15.5521599983539)*r02*(npz*npz)*(x3613.value)))+(((-587.749370697216)*r02*(npz*npz)*(x3614.value)))+(((30.23371008)*px*(npz*npz)*(x3615.value)))+(((2.0)*px*(x3616.value)))+(((457.038612600747)*npz*r02*(pz*pz)*(r22*r22)*(x3617.value)))+(((176.324811227827)*pp*r02*(x3618.value)))+(((176.324811227827)*r02*(r22*r22)*(x3619.value)*(x3620.value)))+(((-4.0)*npz*r02*(r22*r22)*(x3621.value)))+(((-0.514398000020576)*npz*r02*(x3622.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-457.038612697495)*npz*pp*r02*(x3623.value)))+(((-10363.4796837461)*npz*pp*r02*(x3624.value)*(x3625.value)))+(((685.557918973681)*npz*r02*(r22*r22*r22*r22)*(x3626.value)*(x3627.value)))+(((-45.3505651248)*r02*(r22*r22)*(x3628.value)*(x3629.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((940.398993115546)*npz*pz*r02*r22*(x3630.value)))+(((4.09320630646153)*pz*r02*r22*(x3631.value)))+(((13817.9729109302)*r02*(npz*npz*npz)*(x3632.value)*(x3633.value)))+(((-176.324811190502)*r02*(pz*pz)*(r22*r22)*(x3634.value)))+(((228.519306348747)*px*(pz*pz)*(x3635.value)))+(((-30.23371008)*npz*pz*r02*r22*(x3636.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-685.557918973681)*pz*r02*r22*(x3637.value)*(x3638.value)))+(((-2665.47661156855)*r02*(pz*pz)*(x3639.value)*(x3640.value)))+(((114.259653174374)*pp*r02*(r22*r22)*(x3641.value)*(x3642.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((7.77608)*npz*px*(r22*r22)*(x3643.value)))+(((3.88804)*px*(r22*r22)*(x3644.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-10363.4796837461)*pp*pz*r02*(r22*r22*r22)*(x3645.value)*(x3646.value)))+(((117.549874139443)*px*pz*r22*(x3647.value)))+(((2665.47661100431)*r02*(pz*pz)*(r22*r22*r22*r22)*(x3648.value)*(x3649.value)))+(((-914.077225249868)*npz*pz*r02*r22*(x3650.value)*(x3651.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-914.077225298242)*npz*px*pz*r22*(x3652.value)))+(((-1371.11583794736)*npz*r02*(r22*r22)*(x3653.value)*(x3654.value)))+(((-30.23371008)*npz*px*pz*r22*(x3655.value)))+(((-0.514398000020576)*npz*px))+(((10363.4796837461)*npz*pp*r02*(r22*r22)*(x3656.value)*(x3657.value)))+(((-41453.9187327906)*pz*r02*r22*(npz*npz)*(x3658.value)*(x3659.value)))+(((-11.66412)*r02*(x3660.value)))+(((-176.324811209165)*pz*r02*(r22*r22*r22)*(x3661.value)*(x3662.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((3.88804)*pp*r02*(r22*r22)*(x3663.value)))+(((2665.47661156855)*pp*r02*(x3664.value)*(x3665.value)))+(((-176.324811227827)*pp*r02*(r22*r22)*(x3666.value)))+(((-15.11685504)*px*pz*r22*(x3667.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-1828.15445059648)*pz*r02*r22*(npz*npz)*(x3668.value)))+(((-2.0)*px*(r22*r22)*(x3669.value)))+(((5.64239395899188e-7)*r02*(pz*pz)*(r22*r22)*(x3670.value)*(x3671.value)))+(((-11.66412)*r02*(r22*r22*r22*r22)*(x3672.value)))+(((-114.259653174374)*pp*r02*(x3673.value)*(x3674.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-151.1685504064)*npz*r02*(r22*r22)*(x3675.value)))+(((7.77608)*npz*r02*(r22*r22)*(x3676.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-5330.95322257286)*r02*(npz*npz)*(x3677.value)*(x3678.value)))+(((11.6641199987654)*pz*r02*r22*(x3679.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811227827)*r02*(r22*r22*r22*r22)*(x3680.value)*(x3681.value)))+(((10363.4796837461)*pp*pz*r02*r22*(x3682.value)*(x3683.value)))+(((-15.552159999177)*npz*px*(x3684.value)))+(((-1.05276856896914)*r02*(r22*r22)*(x3685.value)))+(((30.2337100832)*npz*r02*(r22*r22*r22*r22)*(x3686.value)))+(((-176.324811227827)*r02*(pz*pz)*(x3687.value)))+(((-228.519306348747)*pp*px*(x3688.value)))+(((685.557918973681)*npz*r02*(x3689.value)*(x3690.value)))+(((457.038612697495)*npz*r02*(pz*pz)*(x3691.value)))+(((15.11685504)*npz*px*(x3692.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((31090.4390490445)*npz*r02*(pz*pz)*(r22*r22)*(x3693.value)*(x3694.value)))+((pp*px))+(((58.7749370759425)*r02*(r22*r22*r22*r22*r22*r22)*(x3695.value)*(x3696.value)))+(((228.519306300373)*px*(pz*pz)*(r22*r22)*(x3697.value)))+(((5330.95322257286)*r02*(npz*npz)*(r22*r22)*(x3698.value)*(x3699.value))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3389.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3334.value)))+(x3389.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3700=IKsin(j0);
IkReal x3701=r22*r22;
IkReal x3702=IKcos(j0);
IkReal x3703=((914.077225394989)*pp);
IkReal x3704=((15.11685504)*npz);
IkReal x3705=((1.0)*x3702);
IkReal x3706=((15.11685504)*pz*r22);
IkReal x3707=((0.257199000010288)*x3700);
IkReal x3708=((3.88804)*x3701);
IkReal x3709=((0.257199000010288)*x3702);
IkReal x3710=((3.88804)*x3700);
IkReal x3711=((3.88804)*x3702);
IkReal x3712=x2969;
IkReal x3713=(r12*x3712);
IkReal x3714=(r02*x3712);
if((((((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((-1.0)*x3703))+(((914.077225394989)*(pz*pz)))+((x3701*x3703)))) < -0.00001)
continue;
IkReal x3715=IKsqrt(((((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((-1.0)*x3703))+(((914.077225394989)*(pz*pz)))+((x3701*x3703))));
IkReal x3716=((0.5)*x3702*x3715);
IkReal x3717=((0.5)*x3700*x3715);
evalcond[0]=(((x3711*x3713))+((r12*x3709))+(((-1.0)*r02*x3707))+(((-1.0)*x3713*x3716))+(((-1.0)*x3702*x3704*x3713))+((x3702*x3706*x3713))+(((-1.0)*x3710*x3714))+((x3714*x3717))+((x3700*x3708*x3714))+((x3700*x3704*x3714))+((px*x3700))+(((-1.0)*x3702*x3708*x3713))+(((-1.0)*py*x3705))+(((-1.0)*x3700*x3706*x3714)));
evalcond[1]=(((x3710*x3713))+((x3711*x3714))+((r12*x3707))+((x3700*x3706*x3713))+(((-1.0)*x3713*x3717))+(((-1.0)*x3702*x3704*x3714))+(((-1.0)*x3714*x3716))+((x3702*x3706*x3714))+(((-1.0)*px*x3705))+(((-1.0)*x3702*x3708*x3714))+(((-1.0)*x3700*x3704*x3713))+((r02*x3709))+(((-1.0)*x3700*x3708*x3713))+(((-1.0)*py*x3700)));
CheckValue<IkReal> x3718=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3718.valid){
continue;
}
CheckValue<IkReal> x3719=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3719.valid){
continue;
}
CheckValue<IkReal> x3720=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3720.valid){
continue;
}
CheckValue<IkReal> x3721=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3721.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3722=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3722.valid){
continue;
}
CheckValue<IkReal> x3723=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3723.valid){
continue;
}
CheckValue<IkReal> x3724=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3724.valid){
continue;
}
CheckValue<IkReal> x3725=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3725.valid){
continue;
}
CheckValue<IkReal> x3726=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3726.valid){
continue;
}
CheckValue<IkReal> x3727=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3727.valid){
continue;
}
CheckValue<IkReal> x3728=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3728.valid){
continue;
}
CheckValue<IkReal> x3729=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3729.valid){
continue;
}
CheckValue<IkReal> x3730=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3730.valid){
continue;
}
CheckValue<IkReal> x3731=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3731.valid){
continue;
}
CheckValue<IkReal> x3732=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3732.valid){
continue;
}
CheckValue<IkReal> x3733=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3733.valid){
continue;
}
CheckValue<IkReal> x3734=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3734.valid){
continue;
}
CheckValue<IkReal> x3735=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3735.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3736=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3736.valid){
continue;
}
CheckValue<IkReal> x3737=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3737.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3738=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3738.valid){
continue;
}
CheckValue<IkReal> x3739=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3739.valid){
continue;
}
CheckValue<IkReal> x3740=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3740.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3741=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3741.valid){
continue;
}
CheckValue<IkReal> x3742=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3742.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3743=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3743.valid){
continue;
}
CheckValue<IkReal> x3744=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3744.valid){
continue;
}
CheckValue<IkReal> x3745=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3745.valid){
continue;
}
CheckValue<IkReal> x3746=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3746.valid){
continue;
}
CheckValue<IkReal> x3747=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3747.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3748=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3748.valid){
continue;
}
CheckValue<IkReal> x3749=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3749.valid){
continue;
}
CheckValue<IkReal> x3750=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3750.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3751=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3751.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3752=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3752.valid){
continue;
}
CheckValue<IkReal> x3753=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3753.valid){
continue;
}
evalcond[2]=((0.403073674393708)+(((-0.3110432)*r02*(x3718.value)*(IKcos(j0))))+(((-30.23371008)*(npz*npz)*(x3719.value)))+(((-15.1168550416)*(x3720.value)))+(((0.04)*r02*(x3721.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKcos(j0))))+(((-228.519306300373)*(pz*pz)*(r22*r22)*(x3722.value)))+(((30.2337100832)*(r22*r22)*(x3723.value)))+(((15.552159999177)*npz*(x3724.value)))+(((-1.2093484032)*pz*r02*r22*(x3725.value)*(IKcos(j0))))+(((-0.3110432)*r12*(x3726.value)*(IKsin(j0))))+(((-228.519306348747)*pp*(r22*r22)*(x3727.value)))+(((-0.020575920000823)*r12*(IKsin(j0))))+(((-2.0)*(x3728.value)))+(((2.0)*(r22*r22)*(x3729.value)))+(((1.2093484032)*npz*r02*(x3730.value)*(IKcos(j0))))+(((0.3110432)*r02*(r22*r22)*(x3731.value)*(IKcos(j0))))+(((-117.549874139443)*npz*(r22*r22)*(x3732.value)))+(((0.3110432)*r12*(r22*r22)*(x3733.value)*(IKsin(j0))))+(((228.519306348747)*pp*(x3734.value)))+(((-1.0)*pp))+(((-15.11685504)*npz*(x3735.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.514398000020576)*npz))+(((-7.77608)*npz*(r22*r22)*(x3736.value)))+(((-0.020575920000823)*r02*(IKcos(j0))))+(((0.257199000010288)*(x3737.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-15.1168550416)*(r22*r22*r22*r22)*(x3738.value)))+(((1.2093484032)*npz*r12*(x3739.value)*(IKsin(j0))))+(((3.88804)*(x3740.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((117.549874139443)*npz*(x3741.value)))+(((15.11685504)*pz*r22*(x3742.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-457.038612649121)*(npz*npz)*(x3743.value)))+(((-1.2093484032)*pz*r12*r22*(x3744.value)*(IKsin(j0))))+(((-228.519306348747)*(pz*pz)*(x3745.value)))+(((-117.549874139443)*pz*r22*(x3746.value)))+(((-1.0)*npz*(x3747.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-7.77607999917696)*pz*r22*(x3748.value)))+(((30.23371008)*npz*pz*r22*(x3749.value)))+(((-3.88804)*(r22*r22)*(x3750.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.04)*r12*(x3751.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKsin(j0))))+(((117.549874139443)*pz*(r22*r22*r22)*(x3752.value)))+(((0.08)*px*(IKcos(j0))))+(((0.08)*py*(IKsin(j0))))+(((914.077225298242)*npz*pz*r22*(x3753.value))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x3754=r22*r22;
IkReal x3755=((914.077225394989)*pp);
IkReal x3756=(pz*r22);
IkReal x3757=x2969;
IkReal x3758=((3.88804)*x3757);
IkReal x3759=((15.11685504)*x3757);
IkReal x3760=((15.1168550416)*x3757);
IkReal x3761=(x3754*x3758);
if(((((x3754*x3755))+(((914.077225394989)*(npz*npz)))+(((-1.0)*x3755))+(((914.077225394989)*(pz*pz)))+(((-1828.15445078998)*npz*x3756)))) < -0.00001)
continue;
IkReal x3762=((0.5)*x3757*(IKsqrt((((x3754*x3755))+(((914.077225394989)*(npz*npz)))+(((-1.0)*x3755))+(((914.077225394989)*(pz*pz)))+(((-1828.15445078998)*npz*x3756))))));
IkReal x3763=(x3761+x3762);
sj6=gconst4;
cj6=gconst5;
j6=((((-1.0)*npz*x3759))+x3758+((x3756*x3759))+(((-1.0)*x3763)));
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal gconst3=(((x3756*x3760))+(((-1.0)*npz*x3760))+x3758+(((-1.0)*x3763)));
CheckValue<IkReal> x3764=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3764.valid){
continue;
}
CheckValue<IkReal> x3765=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3765.valid){
continue;
}
CheckValue<IkReal> x3766=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3766.valid){
continue;
}
CheckValue<IkReal> x3767=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3767.valid){
continue;
}
CheckValue<IkReal> x3768=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3768.valid){
continue;
}
CheckValue<IkReal> x3769=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3769.valid){
continue;
}
CheckValue<IkReal> x3770=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3770.valid){
continue;
}
CheckValue<IkReal> x3771=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3771.valid){
continue;
}
CheckValue<IkReal> x3772=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3772.valid){
continue;
}
CheckValue<IkReal> x3773=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3773.valid){
continue;
}
CheckValue<IkReal> x3774=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3774.valid){
continue;
}
CheckValue<IkReal> x3775=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3775.valid){
continue;
}
CheckValue<IkReal> x3776=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3776.valid){
continue;
}
CheckValue<IkReal> x3777=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3777.valid){
continue;
}
CheckValue<IkReal> x3778=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3778.valid){
continue;
}
CheckValue<IkReal> x3779=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3779.valid){
continue;
}
CheckValue<IkReal> x3780=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3780.valid){
continue;
}
CheckValue<IkReal> x3781=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3781.valid){
continue;
}
CheckValue<IkReal> x3782=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3782.valid){
continue;
}
CheckValue<IkReal> x3783=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3783.valid){
continue;
}
CheckValue<IkReal> x3784=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3784.valid){
continue;
}
CheckValue<IkReal> x3785=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3785.valid){
continue;
}
CheckValue<IkReal> x3786=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3786.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3787=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3787.valid){
continue;
}
CheckValue<IkReal> x3788=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3788.valid){
continue;
}
CheckValue<IkReal> x3789=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3789.valid){
continue;
}
CheckValue<IkReal> x3790=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3790.valid){
continue;
}
CheckValue<IkReal> x3791=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3791.valid){
continue;
}
CheckValue<IkReal> x3792=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3792.valid){
continue;
}
CheckValue<IkReal> x3793=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3793.valid){
continue;
}
CheckValue<IkReal> x3794=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3794.valid){
continue;
}
CheckValue<IkReal> x3795=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3795.valid){
continue;
}
CheckValue<IkReal> x3796=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3796.valid){
continue;
}
CheckValue<IkReal> x3797=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3797.valid){
continue;
}
CheckValue<IkReal> x3798=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3798.valid){
continue;
}
CheckValue<IkReal> x3799=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3799.valid){
continue;
}
CheckValue<IkReal> x3800=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3800.valid){
continue;
}
CheckValue<IkReal> x3801=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3801.valid){
continue;
}
CheckValue<IkReal> x3802=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3802.valid){
continue;
}
CheckValue<IkReal> x3803=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3803.valid){
continue;
}
CheckValue<IkReal> x3804=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3804.valid){
continue;
}
CheckValue<IkReal> x3805=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3805.valid){
continue;
}
CheckValue<IkReal> x3806=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3806.valid){
continue;
}
CheckValue<IkReal> x3807=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3807.valid){
continue;
}
CheckValue<IkReal> x3808=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3808.valid){
continue;
}
CheckValue<IkReal> x3809=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3809.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst4=((((((((-1.0)*(((((((((IKcos(((15.1168550416)*npz*(x3764.value))))*(IKsin(((3.88804)*(r22*r22)*(x3765.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3766.value))))*(IKsin(((15.1168550416)*npz*(x3767.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3768.value))))))+(((((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3769.value))))*(IKsin(((15.1168550416)*npz*(x3770.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3771.value))))*(IKcos(((15.1168550416)*npz*(x3772.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3773.value))))))))*(IKcos(((3.88804)*(x3774.value))))))+(((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3775.value))))*(IKcos(((15.1168550416)*npz*(x3776.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3777.value))))*(IKsin(((15.1168550416)*npz*(x3778.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3779.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3780.value))))*(IKsin(((3.88804)*(r22*r22)*(x3781.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3782.value))))*(IKsin(((15.1168550416)*npz*(x3783.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3784.value))))))))*(IKsin(((3.88804)*(x3785.value))))))))*(IKsin(((0.5)*(x3786.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3787.value))))*(IKcos(((15.1168550416)*npz*(x3788.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3789.value))))*(IKsin(((15.1168550416)*npz*(x3790.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3791.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3792.value))))*(IKsin(((3.88804)*(r22*r22)*(x3793.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3794.value))))*(IKsin(((15.1168550416)*npz*(x3795.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3796.value))))))))*(IKcos(((3.88804)*(x3797.value))))))+(((-1.0)*(((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x3798.value))))*(IKsin(((3.88804)*(r22*r22)*(x3799.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3800.value))))*(IKsin(((15.1168550416)*npz*(x3801.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3802.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3803.value))))*(IKsin(((15.1168550416)*npz*(x3804.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3805.value))))*(IKcos(((15.1168550416)*npz*(x3806.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3807.value))))))))*(IKsin(((3.88804)*(x3808.value))))))))*(IKcos(((0.5)*(x3809.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
CheckValue<IkReal> x3810=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3810.valid){
continue;
}
CheckValue<IkReal> x3811=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3811.valid){
continue;
}
CheckValue<IkReal> x3812=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3812.valid){
continue;
}
CheckValue<IkReal> x3813=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3813.valid){
continue;
}
CheckValue<IkReal> x3814=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3814.valid){
continue;
}
CheckValue<IkReal> x3815=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3815.valid){
continue;
}
CheckValue<IkReal> x3816=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3816.valid){
continue;
}
CheckValue<IkReal> x3817=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3817.valid){
continue;
}
CheckValue<IkReal> x3818=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3818.valid){
continue;
}
CheckValue<IkReal> x3819=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3819.valid){
continue;
}
CheckValue<IkReal> x3820=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3820.valid){
continue;
}
CheckValue<IkReal> x3821=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3821.valid){
continue;
}
CheckValue<IkReal> x3822=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3822.valid){
continue;
}
CheckValue<IkReal> x3823=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3823.valid){
continue;
}
CheckValue<IkReal> x3824=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3824.valid){
continue;
}
CheckValue<IkReal> x3825=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3825.valid){
continue;
}
CheckValue<IkReal> x3826=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3826.valid){
continue;
}
CheckValue<IkReal> x3827=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3827.valid){
continue;
}
CheckValue<IkReal> x3828=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3828.valid){
continue;
}
CheckValue<IkReal> x3829=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3829.valid){
continue;
}
CheckValue<IkReal> x3830=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3830.valid){
continue;
}
CheckValue<IkReal> x3831=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3831.valid){
continue;
}
CheckValue<IkReal> x3832=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3832.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3833=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3833.valid){
continue;
}
CheckValue<IkReal> x3834=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3834.valid){
continue;
}
CheckValue<IkReal> x3835=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3835.valid){
continue;
}
CheckValue<IkReal> x3836=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3836.valid){
continue;
}
CheckValue<IkReal> x3837=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3837.valid){
continue;
}
CheckValue<IkReal> x3838=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3838.valid){
continue;
}
CheckValue<IkReal> x3839=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3839.valid){
continue;
}
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3840.valid){
continue;
}
CheckValue<IkReal> x3841=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3841.valid){
continue;
}
CheckValue<IkReal> x3842=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3842.valid){
continue;
}
CheckValue<IkReal> x3843=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3843.valid){
continue;
}
CheckValue<IkReal> x3844=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3844.valid){
continue;
}
CheckValue<IkReal> x3845=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3845.valid){
continue;
}
CheckValue<IkReal> x3846=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3846.valid){
continue;
}
CheckValue<IkReal> x3847=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3847.valid){
continue;
}
CheckValue<IkReal> x3848=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3848.valid){
continue;
}
CheckValue<IkReal> x3849=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3849.valid){
continue;
}
CheckValue<IkReal> x3850=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3850.valid){
continue;
}
CheckValue<IkReal> x3851=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3851.valid){
continue;
}
CheckValue<IkReal> x3852=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3852.valid){
continue;
}
CheckValue<IkReal> x3853=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3853.valid){
continue;
}
CheckValue<IkReal> x3854=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3854.valid){
continue;
}
CheckValue<IkReal> x3855=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3855.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
IkReal gconst5=((((((((((((((((IKcos(((15.1168550416)*npz*(x3810.value))))*(IKsin(((3.88804)*(r22*r22)*(x3811.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3812.value))))*(IKsin(((15.1168550416)*npz*(x3813.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3814.value))))))+(((((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3815.value))))*(IKsin(((15.1168550416)*npz*(x3816.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3817.value))))*(IKcos(((15.1168550416)*npz*(x3818.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3819.value))))))))*(IKcos(((3.88804)*(x3820.value))))))+(((((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3821.value))))*(IKcos(((15.1168550416)*npz*(x3822.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3823.value))))*(IKsin(((15.1168550416)*npz*(x3824.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3825.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3826.value))))*(IKsin(((3.88804)*(r22*r22)*(x3827.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3828.value))))*(IKsin(((15.1168550416)*npz*(x3829.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3830.value))))))))*(IKsin(((3.88804)*(x3831.value))))))))*(IKcos(((0.5)*(x3832.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(((3.88804)*(r22*r22)*(x3833.value))))*(IKcos(((15.1168550416)*npz*(x3834.value))))))+(((1.0)*(IKsin(((3.88804)*(r22*r22)*(x3835.value))))*(IKsin(((15.1168550416)*npz*(x3836.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3837.value))))))+(((((((IKcos(((15.1168550416)*npz*(x3838.value))))*(IKsin(((3.88804)*(r22*r22)*(x3839.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3840.value))))*(IKsin(((15.1168550416)*npz*(x3841.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3842.value))))))))*(IKcos(((3.88804)*(x3843.value))))))+(((-1.0)*(((((-1.0)*(((((IKcos(((15.1168550416)*npz*(x3844.value))))*(IKsin(((3.88804)*(r22*r22)*(x3845.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3846.value))))*(IKsin(((15.1168550416)*npz*(x3847.value))))))))*(IKsin(((15.1168550416)*pz*r22*(x3848.value))))))+(((-1.0)*(((((-1.0)*(IKsin(((3.88804)*(r22*r22)*(x3849.value))))*(IKsin(((15.1168550416)*npz*(x3850.value))))))+(((IKcos(((3.88804)*(r22*r22)*(x3851.value))))*(IKcos(((15.1168550416)*npz*(x3852.value))))))))*(IKcos(((15.1168550416)*pz*r22*(x3853.value))))))))*(IKsin(((3.88804)*(x3854.value))))))))*(IKsin(((0.5)*(x3855.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))))));
IkReal x3856=r22*r22;
j0eval[0]=((-1.0)+x3856);
j0eval[1]=((1.0)+(((-2.0)*x3856))+(x3856*x3856));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3858=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3858.valid){
continue;
}
CheckValue<IkReal> x3859=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3859.valid){
continue;
}
CheckValue<IkReal> x3860=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3860.valid){
continue;
}
CheckValue<IkReal> x3861=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3861.valid){
continue;
}
CheckValue<IkReal> x3862=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3862.valid){
continue;
}
CheckValue<IkReal> x3863=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3863.valid){
continue;
}
CheckValue<IkReal> x3864=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3864.valid){
continue;
}
CheckValue<IkReal> x3865=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3865.valid){
continue;
}
CheckValue<IkReal> x3866=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3866.valid){
continue;
}
CheckValue<IkReal> x3867=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3867.valid){
continue;
}
CheckValue<IkReal> x3868=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3868.valid){
continue;
}
CheckValue<IkReal> x3869=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3869.valid){
continue;
}
CheckValue<IkReal> x3870=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3870.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3871=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3871.valid){
continue;
}
CheckValue<IkReal> x3872=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3872.valid){
continue;
}
CheckValue<IkReal> x3873=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3873.valid){
continue;
}
CheckValue<IkReal> x3874=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3874.valid){
continue;
}
CheckValue<IkReal> x3875=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3875.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3876=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3876.valid){
continue;
}
CheckValue<IkReal> x3877=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3877.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3878=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3878.valid){
continue;
}
CheckValue<IkReal> x3879=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3879.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3880=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3880.valid){
continue;
}
CheckValue<IkReal> x3881=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3881.valid){
continue;
}
CheckValue<IkReal> x3882=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3882.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3883=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3883.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3884=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3884.valid){
continue;
}
CheckValue<IkReal> x3885=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3885.valid){
continue;
}
CheckValue<IkReal> x3886=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3886.valid){
continue;
}
CheckValue<IkReal> x3887=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3887.valid){
continue;
}
CheckValue<IkReal> x3888=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3888.valid){
continue;
}
CheckValue<IkReal> x3889=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3889.valid){
continue;
}
CheckValue<IkReal> x3890=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3890.valid){
continue;
}
CheckValue<IkReal> x3891=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3891.valid){
continue;
}
CheckValue<IkReal> x3892=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3892.valid){
continue;
}
CheckValue<IkReal> x3893=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3893.valid){
continue;
}
CheckValue<IkReal> x3894=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3894.valid){
continue;
}
CheckValue<IkReal> x3895=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3895.valid){
continue;
}
CheckValue<IkReal> x3896=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3896.valid){
continue;
}
CheckValue<IkReal> x3897=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3897.valid){
continue;
}
CheckValue<IkReal> x3898=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3898.valid){
continue;
}
CheckValue<IkReal> x3899=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3899.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3900=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3900.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3901=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3901.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3902=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3902.valid){
continue;
}
CheckValue<IkReal> x3903=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3903.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3904=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3904.valid){
continue;
}
CheckValue<IkReal> x3905=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3905.valid){
continue;
}
CheckValue<IkReal> x3906=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3906.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3907=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3907.valid){
continue;
}
CheckValue<IkReal> x3908=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3908.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3909=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3909.valid){
continue;
}
CheckValue<IkReal> x3910=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3910.valid){
continue;
}
CheckValue<IkReal> x3911=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3911.valid){
continue;
}
CheckValue<IkReal> x3857=IKPowWithIntegerCheck(IKsign(((((1.209348403328)*(r12*r12)*(x3858.value)))+(((18.2815445040299)*(pz*pz)*(r02*r02)*(r22*r22)*(x3859.value)))+(((18.2815445078998)*pp*(r02*r02)*(r22*r22)*(x3860.value)))+(((-2.418696806656)*(r12*r12)*(r22*r22)*(x3861.value)))+(((18.2815445078998)*(pz*pz)*(r12*r12)*(x3862.value)))+(((-0.16)*(r12*r12)*(r22*r22)*(x3863.value)))+(((-2.4186968064)*py*pz*r12*r22*(x3864.value)))+(((-18.2815445078998)*pp*(r12*r12)*(x3865.value)))+(((0.16)*(r12*r12)*(x3866.value)))+(((1.209348403328)*(r12*r12)*(r22*r22*r22*r22)*(x3867.value)))+(((0.08)*(py*py)))+(((1.209348403328)*(r02*r02)*(x3868.value)))+(((-0.6220864)*py*r12*(x3869.value)))+(((1.2093484032)*npz*(r12*r12)*(x3870.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.6220864)*px*r02*(r22*r22)*(x3871.value)))+(((0.622086399934157)*pz*r22*(r02*r02)*(x3872.value)))+(((-9.40398993115546)*npz*(r12*r12)*(x3873.value)))+(((0.6220864)*py*r12*(r22*r22)*(x3874.value)))+(((-0.3110432)*(r02*r02)*(x3875.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.622086399934157)*pz*r22*(r12*r12)*(x3876.value)))+(((0.08)*px*r02*(x3877.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.6220864)*px*r02*(x3878.value)))+(((-0.020575920000823)*(r02*r02)*(x3879.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-9.40398993115546)*npz*(r02*r02)*(x3880.value)))+(((0.00529210604850337)*(r02*r02)))+(((2.4186968064)*npz*px*r02*(x3881.value)))+(((1.2093484032)*npz*(r02*r02)*(x3882.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.0411518400016461)*py*r12))+(((0.3110432)*(r12*r12)*(r22*r22)*(x3883.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.16)*(r02*r02)*(r22*r22)*(x3884.value)))+(((-73.1261780238593)*npz*pz*r22*(r02*r02)*(x3885.value)))+(((-9.40398993115546)*pz*(r12*r12)*(r22*r22*r22)*(x3886.value)))+(((0.00529210604850337)*(r12*r12)))+(((18.2815445078998)*pp*(r12*r12)*(r22*r22)*(x3887.value)))+(((9.40398993115546)*pz*r22*(r02*r02)*(x3888.value)))+(((9.40398993115546)*npz*(r12*r12)*(r22*r22)*(x3889.value)))+(((0.08)*(px*px)))+(((-73.1261780238593)*npz*pz*r22*(r12*r12)*(x3890.value)))+(((-0.622086399934157)*npz*(r12*r12)*(x3891.value)))+(((-0.622086399934157)*npz*(r02*r02)*(x3892.value)))+(((18.2815445040299)*(pz*pz)*(r12*r12)*(r22*r22)*(x3893.value)))+(((-18.2815445078998)*pp*(r02*r02)*(x3894.value)))+(((9.40398993115546)*pz*r22*(r12*r12)*(x3895.value)))+(((18.2815445078998)*(pz*pz)*(r02*r02)*(x3896.value)))+(((36.5630890119297)*(npz*npz)*(r02*r02)*(x3897.value)))+(((36.5630890119297)*(npz*npz)*(r12*r12)*(x3898.value)))+(((0.08)*py*r12*(x3899.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.3110432)*(r12*r12)*(x3900.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.3110432)*(r02*r02)*(r22*r22)*(x3901.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((9.40398993115546)*npz*(r02*r02)*(r22*r22)*(x3902.value)))+(((-0.020575920000823)*(r12*r12)*(x3903.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((2.4186968064)*npz*py*r12*(x3904.value)))+(((-2.418696806656)*(r02*r02)*(r22*r22)*(x3905.value)))+(((-1.2093484032)*pz*r22*(r12*r12)*(x3906.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.0411518400016461)*px*r02))+(((0.16)*(r02*r02)*(x3907.value)))+(((-1.2093484032)*pz*r22*(r02*r02)*(x3908.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((1.209348403328)*(r02*r02)*(r22*r22*r22*r22)*(x3909.value)))+(((-2.4186968064)*px*pz*r02*r22*(x3910.value)))+(((-9.40398993115546)*pz*(r02*r02)*(r22*r22*r22)*(x3911.value))))),-1);
if(!x3857.valid){
continue;
}
CheckValue<IkReal> x3913=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3913.valid){
continue;
}
CheckValue<IkReal> x3914=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3914.valid){
continue;
}
CheckValue<IkReal> x3915=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3915.valid){
continue;
}
CheckValue<IkReal> x3916=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3916.valid){
continue;
}
CheckValue<IkReal> x3917=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3917.valid){
continue;
}
CheckValue<IkReal> x3918=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3918.valid){
continue;
}
CheckValue<IkReal> x3919=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3919.valid){
continue;
}
CheckValue<IkReal> x3920=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3920.valid){
continue;
}
CheckValue<IkReal> x3921=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3921.valid){
continue;
}
CheckValue<IkReal> x3922=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3922.valid){
continue;
}
CheckValue<IkReal> x3923=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3923.valid){
continue;
}
CheckValue<IkReal> x3924=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3924.valid){
continue;
}
CheckValue<IkReal> x3925=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3925.valid){
continue;
}
CheckValue<IkReal> x3926=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3926.valid){
continue;
}
CheckValue<IkReal> x3927=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3927.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3928=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3928.valid){
continue;
}
CheckValue<IkReal> x3929=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3929.valid){
continue;
}
CheckValue<IkReal> x3930=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3930.valid){
continue;
}
CheckValue<IkReal> x3931=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3931.valid){
continue;
}
CheckValue<IkReal> x3932=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3932.valid){
continue;
}
CheckValue<IkReal> x3933=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3933.valid){
continue;
}
CheckValue<IkReal> x3934=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3934.valid){
continue;
}
CheckValue<IkReal> x3935=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3935.valid){
continue;
}
CheckValue<IkReal> x3936=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3936.valid){
continue;
}
CheckValue<IkReal> x3937=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3937.valid){
continue;
}
CheckValue<IkReal> x3938=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3938.valid){
continue;
}
CheckValue<IkReal> x3939=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3939.valid){
continue;
}
CheckValue<IkReal> x3940=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3940.valid){
continue;
}
CheckValue<IkReal> x3941=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3941.valid){
continue;
}
CheckValue<IkReal> x3942=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3942.valid){
continue;
}
CheckValue<IkReal> x3943=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3943.valid){
continue;
}
CheckValue<IkReal> x3944=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3944.valid){
continue;
}
CheckValue<IkReal> x3945=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3945.valid){
continue;
}
CheckValue<IkReal> x3946=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3946.valid){
continue;
}
CheckValue<IkReal> x3947=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3947.valid){
continue;
}
CheckValue<IkReal> x3948=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3948.valid){
continue;
}
CheckValue<IkReal> x3949=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3949.valid){
continue;
}
CheckValue<IkReal> x3950=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3950.valid){
continue;
}
CheckValue<IkReal> x3951=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3951.valid){
continue;
}
CheckValue<IkReal> x3952=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3952.valid){
continue;
}
CheckValue<IkReal> x3953=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3953.valid){
continue;
}
CheckValue<IkReal> x3954=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3954.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3955=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3955.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3956=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3956.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3957=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3957.valid){
continue;
}
CheckValue<IkReal> x3958=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3958.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3959=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3959.valid){
continue;
}
CheckValue<IkReal> x3960=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3960.valid){
continue;
}
CheckValue<IkReal> x3961=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3961.valid){
continue;
}
CheckValue<IkReal> x3962=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3962.valid){
continue;
}
CheckValue<IkReal> x3963=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3963.valid){
continue;
}
CheckValue<IkReal> x3964=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3964.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3965=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3965.valid){
continue;
}
CheckValue<IkReal> x3966=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3966.valid){
continue;
}
CheckValue<IkReal> x3967=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3967.valid){
continue;
}
CheckValue<IkReal> x3968=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3968.valid){
continue;
}
CheckValue<IkReal> x3969=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3969.valid){
continue;
}
CheckValue<IkReal> x3970=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3970.valid){
continue;
}
CheckValue<IkReal> x3971=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3971.valid){
continue;
}
CheckValue<IkReal> x3972=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3972.valid){
continue;
}
CheckValue<IkReal> x3973=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3973.valid){
continue;
}
CheckValue<IkReal> x3974=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3974.valid){
continue;
}
CheckValue<IkReal> x3975=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3975.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3976=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3976.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3977=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3977.valid){
continue;
}
CheckValue<IkReal> x3978=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3978.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3979=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3979.valid){
continue;
}
CheckValue<IkReal> x3980=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3980.valid){
continue;
}
CheckValue<IkReal> x3981=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3981.valid){
continue;
}
CheckValue<IkReal> x3982=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3982.valid){
continue;
}
CheckValue<IkReal> x3983=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3983.valid){
continue;
}
CheckValue<IkReal> x3984=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3984.valid){
continue;
}
CheckValue<IkReal> x3985=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3985.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3986=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3986.valid){
continue;
}
CheckValue<IkReal> x3987=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3987.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3988=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3988.valid){
continue;
}
CheckValue<IkReal> x3989=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3989.valid){
continue;
}
CheckValue<IkReal> x3990=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3990.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3991=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3991.valid){
continue;
}
CheckValue<IkReal> x3992=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3992.valid){
continue;
}
CheckValue<IkReal> x3993=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3993.valid){
continue;
}
CheckValue<IkReal> x3994=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3994.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x3995=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3995.valid){
continue;
}
CheckValue<IkReal> x3996=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3996.valid){
continue;
}
CheckValue<IkReal> x3997=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3997.valid){
continue;
}
CheckValue<IkReal> x3998=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x3998.valid){
continue;
}
CheckValue<IkReal> x3999=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x3999.valid){
continue;
}
CheckValue<IkReal> x4000=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4000.valid){
continue;
}
CheckValue<IkReal> x4001=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4001.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4002=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4002.valid){
continue;
}
CheckValue<IkReal> x4003=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4003.valid){
continue;
}
CheckValue<IkReal> x4004=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4004.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4005=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4005.valid){
continue;
}
CheckValue<IkReal> x4006=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4006.valid){
continue;
}
CheckValue<IkReal> x4007=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4007.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4008=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4008.valid){
continue;
}
CheckValue<IkReal> x4009=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4009.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4010=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4010.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4011=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4011.valid){
continue;
}
CheckValue<IkReal> x4012=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4012.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4013=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4013.valid){
continue;
}
CheckValue<IkReal> x4014=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4014.valid){
continue;
}
CheckValue<IkReal> x4015=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4015.valid){
continue;
}
CheckValue<IkReal> x4016=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4016.valid){
continue;
}
CheckValue<IkReal> x4017=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4017.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4018=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4018.valid){
continue;
}
CheckValue<IkReal> x4019=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4019.valid){
continue;
}
CheckValue<IkReal> x4020=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4020.valid){
continue;
}
CheckValue<IkReal> x4021=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4021.valid){
continue;
}
CheckValue<IkReal> x4022=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4022.valid){
continue;
}
CheckValue<IkReal> x4023=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4023.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4024=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4024.valid){
continue;
}
CheckValue<IkReal> x4025=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4025.valid){
continue;
}
CheckValue<IkReal> x4026=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4026.valid){
continue;
}
CheckValue<IkReal> x4027=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4027.valid){
continue;
}
CheckValue<IkReal> x4028=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4028.valid){
continue;
}
CheckValue<IkReal> x4029=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4029.valid){
continue;
}
CheckValue<IkReal> x4030=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4030.valid){
continue;
}
CheckValue<IkReal> x4031=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4031.valid){
continue;
}
CheckValue<IkReal> x4032=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4032.valid){
continue;
}
CheckValue<IkReal> x4033=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4033.valid){
continue;
}
CheckValue<IkReal> x4034=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4034.valid){
continue;
}
CheckValue<IkReal> x4035=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4035.valid){
continue;
}
CheckValue<IkReal> x4036=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4036.valid){
continue;
}
CheckValue<IkReal> x4037=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4037.valid){
continue;
}
CheckValue<IkReal> x4038=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4038.valid){
continue;
}
CheckValue<IkReal> x4039=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4039.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4040=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4040.valid){
continue;
}
CheckValue<IkReal> x4041=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4041.valid){
continue;
}
CheckValue<IkReal> x4042=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4042.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4043=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4043.valid){
continue;
}
CheckValue<IkReal> x4044=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4044.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4045=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4045.valid){
continue;
}
CheckValue<IkReal> x4046=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4046.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4047=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4047.valid){
continue;
}
CheckValue<IkReal> x4048=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4048.valid){
continue;
}
CheckValue<IkReal> x4049=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4049.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4050=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4050.valid){
continue;
}
CheckValue<IkReal> x4051=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4051.valid){
continue;
}
CheckValue<IkReal> x4052=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4052.valid){
continue;
}
CheckValue<IkReal> x4053=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4053.valid){
continue;
}
CheckValue<IkReal> x4054=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4054.valid){
continue;
}
CheckValue<IkReal> x4055=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4055.valid){
continue;
}
CheckValue<IkReal> x4056=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4056.valid){
continue;
}
CheckValue<IkReal> x4057=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4057.valid){
continue;
}
CheckValue<IkReal> x4058=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4058.valid){
continue;
}
CheckValue<IkReal> x4059=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4059.valid){
continue;
}
CheckValue<IkReal> x4060=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4060.valid){
continue;
}
CheckValue<IkReal> x4061=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4061.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4062=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4062.valid){
continue;
}
CheckValue<IkReal> x4063=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4063.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4064=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4064.valid){
continue;
}
CheckValue<IkReal> x4065=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4065.valid){
continue;
}
CheckValue<IkReal> x4066=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4066.valid){
continue;
}
CheckValue<IkReal> x4067=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4067.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4068=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4068.valid){
continue;
}
CheckValue<IkReal> x4069=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4069.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4070=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4070.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4071=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4071.valid){
continue;
}
CheckValue<IkReal> x4072=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4072.valid){
continue;
}
CheckValue<IkReal> x4073=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4073.valid){
continue;
}
CheckValue<IkReal> x4074=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4074.valid){
continue;
}
CheckValue<IkReal> x4075=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4075.valid){
continue;
}
CheckValue<IkReal> x4076=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4076.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4077=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4077.valid){
continue;
}
CheckValue<IkReal> x4078=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4078.valid){
continue;
}
CheckValue<IkReal> x4079=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4079.valid){
continue;
}
CheckValue<IkReal> x4080=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4080.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4081=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4081.valid){
continue;
}
CheckValue<IkReal> x4082=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4082.valid){
continue;
}
CheckValue<IkReal> x4083=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4083.valid){
continue;
}
CheckValue<IkReal> x4084=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4084.valid){
continue;
}
CheckValue<IkReal> x4085=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4085.valid){
continue;
}
CheckValue<IkReal> x4086=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4086.valid){
continue;
}
CheckValue<IkReal> x4087=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4087.valid){
continue;
}
CheckValue<IkReal> x4088=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4088.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4089=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4089.valid){
continue;
}
CheckValue<IkReal> x4090=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4090.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4091=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4091.valid){
continue;
}
CheckValue<IkReal> x4092=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4092.valid){
continue;
}
CheckValue<IkReal> x4093=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4093.valid){
continue;
}
CheckValue<IkReal> x4094=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4094.valid){
continue;
}
CheckValue<IkReal> x4095=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4095.valid){
continue;
}
CheckValue<IkReal> x4096=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4096.valid){
continue;
}
CheckValue<IkReal> x4097=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4097.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4098=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4098.valid){
continue;
}
CheckValue<IkReal> x4099=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4099.valid){
continue;
}
CheckValue<IkReal> x4100=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4100.valid){
continue;
}
CheckValue<IkReal> x4101=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4101.valid){
continue;
}
CheckValue<IkReal> x4102=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4102.valid){
continue;
}
CheckValue<IkReal> x4103=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4103.valid){
continue;
}
CheckValue<IkReal> x4104=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4104.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4105=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4105.valid){
continue;
}
CheckValue<IkReal> x4106=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4106.valid){
continue;
}
CheckValue<IkReal> x4107=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4107.valid){
continue;
}
CheckValue<IkReal> x4108=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4108.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4109=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4109.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4110=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4110.valid){
continue;
}
CheckValue<IkReal> x4111=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4111.valid){
continue;
}
CheckValue<IkReal> x4112=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4112.valid){
continue;
}
CheckValue<IkReal> x4113=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4113.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4114=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4114.valid){
continue;
}
CheckValue<IkReal> x4115=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4115.valid){
continue;
}
CheckValue<IkReal> x4116=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4116.valid){
continue;
}
CheckValue<IkReal> x4117=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4117.valid){
continue;
}
CheckValue<IkReal> x4118=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4118.valid){
continue;
}
CheckValue<IkReal> x4119=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4119.valid){
continue;
}
CheckValue<IkReal> x4120=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4120.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4121=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4121.valid){
continue;
}
CheckValue<IkReal> x4122=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4122.valid){
continue;
}
CheckValue<IkReal> x4123=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4123.valid){
continue;
}
CheckValue<IkReal> x4124=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4124.valid){
continue;
}
CheckValue<IkReal> x4125=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4125.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4126=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4126.valid){
continue;
}
CheckValue<IkReal> x4127=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4127.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4128=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4128.valid){
continue;
}
CheckValue<IkReal> x4129=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4129.valid){
continue;
}
CheckValue<IkReal> x4130=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4130.valid){
continue;
}
CheckValue<IkReal> x4131=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4131.valid){
continue;
}
CheckValue<IkReal> x4132=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4132.valid){
continue;
}
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4133.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4134=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4134.valid){
continue;
}
CheckValue<IkReal> x4135=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4135.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4136=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4136.valid){
continue;
}
CheckValue<IkReal> x4137=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4137.valid){
continue;
}
CheckValue<IkReal> x4138=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4138.valid){
continue;
}
CheckValue<IkReal> x4139=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4139.valid){
continue;
}
CheckValue<IkReal> x4140=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4140.valid){
continue;
}
CheckValue<IkReal> x4141=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4141.valid){
continue;
}
CheckValue<IkReal> x4142=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4142.valid){
continue;
}
CheckValue<IkReal> x4143=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4143.valid){
continue;
}
CheckValue<IkReal> x4144=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4144.valid){
continue;
}
CheckValue<IkReal> x4145=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4145.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4146=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4146.valid){
continue;
}
CheckValue<IkReal> x4147=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4147.valid){
continue;
}
CheckValue<IkReal> x4148=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4148.valid){
continue;
}
CheckValue<IkReal> x4149=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4149.valid){
continue;
}
CheckValue<IkReal> x4150=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4150.valid){
continue;
}
CheckValue<IkReal> x4151=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4151.valid){
continue;
}
CheckValue<IkReal> x4152=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4152.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4153=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4153.valid){
continue;
}
CheckValue<IkReal> x4154=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4154.valid){
continue;
}
CheckValue<IkReal> x4155=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4155.valid){
continue;
}
CheckValue<IkReal> x4156=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4156.valid){
continue;
}
CheckValue<IkReal> x4157=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4157.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4158=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4158.valid){
continue;
}
CheckValue<IkReal> x4159=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4159.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4160=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4160.valid){
continue;
}
CheckValue<IkReal> x4161=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4161.valid){
continue;
}
CheckValue<IkReal> x4162=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4162.valid){
continue;
}
CheckValue<IkReal> x4163=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4163.valid){
continue;
}
CheckValue<IkReal> x4164=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4164.valid){
continue;
}
CheckValue<IkReal> x4165=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4165.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4166=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4166.valid){
continue;
}
CheckValue<IkReal> x4167=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4167.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4168=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4168.valid){
continue;
}
CheckValue<IkReal> x4169=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4169.valid){
continue;
}
CheckValue<IkReal> x4170=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4170.valid){
continue;
}
CheckValue<IkReal> x4171=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4171.valid){
continue;
}
CheckValue<IkReal> x4172=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4172.valid){
continue;
}
CheckValue<IkReal> x4173=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4173.valid){
continue;
}
CheckValue<IkReal> x4174=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4174.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4175=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4175.valid){
continue;
}
CheckValue<IkReal> x4176=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4176.valid){
continue;
}
CheckValue<IkReal> x4177=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4177.valid){
continue;
}
CheckValue<IkReal> x4178=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4178.valid){
continue;
}
CheckValue<IkReal> x4179=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4179.valid){
continue;
}
CheckValue<IkReal> x4180=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4180.valid){
continue;
}
CheckValue<IkReal> x4181=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4181.valid){
continue;
}
CheckValue<IkReal> x4182=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4182.valid){
continue;
}
CheckValue<IkReal> x4183=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4183.valid){
continue;
}
CheckValue<IkReal> x4184=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4184.valid){
continue;
}
CheckValue<IkReal> x4185=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4185.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4186=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4186.valid){
continue;
}
CheckValue<IkReal> x4187=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4187.valid){
continue;
}
CheckValue<IkReal> x4188=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4188.valid){
continue;
}
CheckValue<IkReal> x4189=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4189.valid){
continue;
}
CheckValue<IkReal> x4190=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4190.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4191=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4191.valid){
continue;
}
CheckValue<IkReal> x4192=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4192.valid){
continue;
}
CheckValue<IkReal> x4193=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4193.valid){
continue;
}
CheckValue<IkReal> x4194=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4194.valid){
continue;
}
CheckValue<IkReal> x4195=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4195.valid){
continue;
}
CheckValue<IkReal> x4196=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4196.valid){
continue;
}
CheckValue<IkReal> x4197=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4197.valid){
continue;
}
CheckValue<IkReal> x4198=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4198.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4199=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4199.valid){
continue;
}
CheckValue<IkReal> x4200=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4200.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4201=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4201.valid){
continue;
}
CheckValue<IkReal> x4202=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4202.valid){
continue;
}
CheckValue<IkReal> x4203=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4203.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4204=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4204.valid){
continue;
}
CheckValue<IkReal> x4205=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4205.valid){
continue;
}
CheckValue<IkReal> x4206=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4206.valid){
continue;
}
CheckValue<IkReal> x4207=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4207.valid){
continue;
}
CheckValue<IkReal> x4208=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4208.valid){
continue;
}
CheckValue<IkReal> x4209=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4209.valid){
continue;
}
CheckValue<IkReal> x4210=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4210.valid){
continue;
}
CheckValue<IkReal> x4211=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4211.valid){
continue;
}
CheckValue<IkReal> x4212=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4212.valid){
continue;
}
CheckValue<IkReal> x4213=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4213.valid){
continue;
}
CheckValue<IkReal> x4214=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4214.valid){
continue;
}
CheckValue<IkReal> x4215=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4215.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4216=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4216.valid){
continue;
}
CheckValue<IkReal> x4217=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4217.valid){
continue;
}
CheckValue<IkReal> x4218=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4218.valid){
continue;
}
CheckValue<IkReal> x4219=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4219.valid){
continue;
}
CheckValue<IkReal> x4220=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4220.valid){
continue;
}
CheckValue<IkReal> x4221=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4221.valid){
continue;
}
CheckValue<IkReal> x4222=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4222.valid){
continue;
}
CheckValue<IkReal> x3912 = IKatan2WithCheck(IkReal(((((13817.9729109302)*r12*(npz*npz*npz)*(x3913.value)*(x3914.value)))+(((-2665.47661156855)*r12*(pz*pz)*(x3915.value)*(x3916.value)))+(((30.23371008)*py*(npz*npz)*(x3917.value)))+(((228.519306300373)*py*(pz*pz)*(r22*r22)*(x3918.value)))+(((10363.4796837461)*npz*pp*r12*(r22*r22)*(x3919.value)*(x3920.value)))+(((457.038612600747)*npz*r12*(pz*pz)*(r22*r22)*(x3921.value)))+(((5330.95322257286)*r12*(npz*npz)*(r22*r22)*(x3922.value)*(x3923.value)))+(((-176.324811190502)*r12*(pz*pz)*(r22*r22)*(x3924.value)))+(((10661.9064451457)*npz*pz*r12*r22*(x3925.value)*(x3926.value)))+((npz*py*(x3927.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((235.099748278886)*r12*(npz*npz)*(r22*r22)*(x3928.value)))+(((58.7749370759425)*r12*(r22*r22*r22*r22*r22*r22)*(x3929.value)*(x3930.value)))+(((31090.4390490445)*npz*r12*(pz*pz)*(r22*r22)*(x3931.value)*(x3932.value)))+(((2665.47661100431)*r12*(pz*pz)*(r22*r22*r22*r22)*(x3933.value)*(x3934.value)))+(((-41453.9187327906)*pz*r12*r22*(npz*npz)*(x3935.value)*(x3936.value)))+(((457.038612697495)*npz*pp*r12*(r22*r22)*(x3937.value)))+(((-3.88804)*pp*r12*(x3938.value)))+(((-4.0)*npz*r12*(r22*r22)*(x3939.value)))+(((-228.519306348747)*pp*py*(x3940.value)))+(((3.88804)*pp*r12*(r22*r22)*(x3941.value)))+(((-10661.9064451457)*npz*pz*r12*(r22*r22*r22)*(x3942.value)*(x3943.value)))+(((176.324811227827)*r12*(r22*r22)*(x3944.value)*(x3945.value)))+(((-176.324811227827)*r12*(r22*r22*r22*r22)*(x3946.value)*(x3947.value)))+(((-117.549874139443)*npz*py*(x3948.value)))+(((-30.23371008)*npz*py*pz*r22*(x3949.value)))+(((-10363.4796837461)*r12*r22*(pz*pz*pz)*(x3950.value)*(x3951.value)))+(((-0.257199000010288)*pp*r12))+(((120.9348403232)*npz*r12*(x3952.value)))+(((-15.5521599983539)*r12*(npz*npz)*(x3953.value)))+(((11.6641199987654)*pz*r12*r22*(x3954.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-3.0)*r12*(r22*r22)*(x3955.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.257199000010288)*py*(x3956.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612624934)*r12*(npz*npz)*(x3957.value)*(x3958.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((90.70113024)*pz*r12*(r22*r22*r22)*(x3959.value)))+(((0.0661263256062921)*py))+(((-5330.9532231371)*pp*r12*(r22*r22)*(x3960.value)*(x3961.value)))+(((30.2337100832)*npz*r12*(r22*r22*r22*r22)*(x3962.value)))+(((114.259653174374)*r12*(pz*pz)*(x3963.value)*(x3964.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-1371.11583794736)*npz*r12*(r22*r22)*(x3965.value)*(x3966.value)))+(((7.77607999917696)*py*pz*r22*(x3967.value)))+(((0.132302651212584)*npz*r12))+(((-2.0)*py*(r22*r22)*(x3968.value)))+(((-176.324811227827)*r12*(pz*pz)*(x3969.value)))+(((15.5521599983539)*npz*pz*r12*r22*(x3970.value)))+(((-587.749370697216)*r12*(npz*npz)*(x3971.value)))+(((228.519306348747)*pp*py*(r22*r22)*(x3972.value)))+(((6.99962207830647)*npz*r12*(x3973.value)))+(((-2.99962207830647)*pz*r12*r22*(x3974.value)))+(((-0.514398000020576)*npz*r12*(x3975.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-30.23371008)*npz*pz*r12*r22*(x3976.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811209165)*npz*r12*(x3977.value)*(x3978.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((228.519306348747)*py*(pz*pz)*(x3979.value)))+(((457.038612697495)*npz*r12*(pz*pz)*(x3980.value)))+(((-90.70113024)*pz*r12*r22*(x3981.value)))+(((23.32824)*r12*(r22*r22)*(x3982.value)))+(((-11.66412)*r12*(r22*r22*r22*r22)*(x3983.value)))+(((114.259653174374)*pp*r12*(r22*r22)*(x3984.value)*(x3985.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((176.324811209165)*npz*r12*(r22*r22)*(x3986.value)*(x3987.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((914.077225298242)*r12*(npz*npz*npz)*(x3988.value)))+(((-0.017007624820293)*r12))+(((0.771499799030864)*r12*(r22*r22)*(x3989.value)))+(((-19.4401999987654)*npz*r12*(x3990.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((10363.4796837461)*pp*pz*r12*r22*(x3991.value)*(x3992.value)))+(((-114.259653174374)*pp*r12*(x3993.value)*(x3994.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811227827)*pp*r12*(r22*r22)*(x3995.value)))+(((-685.557918973681)*pz*r12*r22*(x3996.value)*(x3997.value)))+(((176.324811227827)*pp*r12*(x3998.value)))+(((-10363.4796837461)*pp*pz*r12*(r22*r22*r22)*(x3999.value)*(x4000.value)))+(((30.23371008)*r12*(npz*npz)*(x4001.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-3454.4932271841)*r12*(pz*pz*pz)*(r22*r22*r22)*(x4002.value)*(x4003.value)))+(((0.0992144884094382)*r12*(x4004.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((1371.11583794736)*pz*r12*(r22*r22*r22)*(x4005.value)*(x4006.value)))+(((3.88804)*py*(r22*r22)*(x4007.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((7.77608)*npz*py*(r22*r22)*(x4008.value)))+(((-15.11685504)*py*pz*r22*(x4009.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((7.77608)*npz*r12*(r22*r22)*(x4010.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-11.66412)*r12*(x4011.value)))+(((15.11685504)*npz*py*(x4012.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-10363.4796837461)*npz*pp*r12*(x4013.value)*(x4014.value)))+(((117.549874139443)*py*pz*r22*(x4015.value)))+(((342.77895945056)*r12*(pz*pz)*(r22*r22)*(x4016.value)*(x4017.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((5.64239395899188e-7)*r12*(pz*pz)*(r22*r22)*(x4018.value)*(x4019.value)))+(((15.1168550416)*py*(r22*r22*r22*r22)*(x4020.value)))+(((-30.2337100832)*py*(r22*r22)*(x4021.value)))+(((-45.3505651248)*r12*(r22*r22)*(x4022.value)*(x4023.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.514398000020576)*npz*py))+(((2665.47661156855)*pp*r12*(r22*r22*r22*r22)*(x4024.value)*(x4025.value)))+(((-5330.95322257286)*r12*(npz*npz)*(x4026.value)*(x4027.value)))+(((685.557918973681)*npz*r12*(x4028.value)*(x4029.value)))+(((2665.47661156855)*pp*r12*(x4030.value)*(x4031.value)))+(((-15.11685504)*pp*pz*r12*r22*(x4032.value)))+(((-457.038612697495)*npz*pp*r12*(x4033.value)))+(((2.0)*py*(x4034.value)))+(((-235.099748278886)*npz*pz*r12*(r22*r22*r22)*(x4035.value)))+(((-117.549874139443)*py*pz*(r22*r22*r22)*(x4036.value)))+(((117.549874139443)*npz*py*(r22*r22)*(x4037.value)))+(((-176.324811209165)*pz*r12*(r22*r22*r22)*(x4038.value)*(x4039.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-1828.15445059648)*pz*r12*r22*(npz*npz)*(x4040.value)))+(((-151.1685504064)*npz*r12*(r22*r22)*(x4041.value)))+(((-3.88804)*py*(x4042.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((15.11685504)*npz*pp*r12*(x4043.value)))+(((3.0)*r12*(x4044.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((176.324811209165)*pz*r12*r22*(x4045.value)*(x4046.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-15.552159999177)*npz*py*(x4047.value)))+(((-914.077225249868)*npz*pz*r12*r22*(x4048.value)*(x4049.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-914.077225298242)*npz*py*pz*r22*(x4050.value)))+(((457.038612649121)*py*(npz*npz)*(x4051.value)))+(((-0.771499799030864)*r12*(x4052.value)))+(((10363.4796837461)*npz*r12*(pz*pz)*(x4053.value)*(x4054.value)))+(((-685.557918973681)*pz*r12*(r22*r22*r22*r22*r22)*(x4055.value)*(x4056.value)))+(((15.1168550416)*py*(x4057.value)))+(((685.557918973681)*npz*r12*(r22*r22*r22*r22)*(x4058.value)*(x4059.value)))+(((22.6752825624)*r12*(r22*r22*r22*r22)*(x4060.value)*(x4061.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((22.6752825624)*r12*(x4062.value)*(x4063.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+((pp*py))+(((-58.7749370759425)*r12*(x4064.value)*(x4065.value)))+(((940.398993115546)*npz*pz*r12*r22*(x4066.value)))+(((0.5)*pp*r12*(x4067.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp))))))))),IkReal(((((-90.70113024)*pz*r02*r22*(x4068.value)))+((npz*px*(x4069.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-19.4401999987654)*npz*r02*(x4070.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((228.519306348747)*pp*px*(r22*r22)*(x4071.value)))+(((6.99962207830647)*npz*r02*(x4072.value)))+(((-10363.4796837461)*r02*r22*(pz*pz*pz)*(x4073.value)*(x4074.value)))+(((176.324811209165)*pz*r02*r22*(x4075.value)*(x4076.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((23.32824)*r02*(r22*r22)*(x4077.value)))+(((15.1168550416)*px*(x4078.value)))+(((-30.2337100832)*px*(r22*r22)*(x4079.value)))+(((-0.257199000010288)*px*(x4080.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-0.257199000010288)*pp*r02))+(((15.5521599983539)*npz*pz*r02*r22*(x4081.value)))+(((-235.099748278886)*npz*pz*r02*(r22*r22*r22)*(x4082.value)))+(((-685.557918973681)*pz*r02*(r22*r22*r22*r22*r22)*(x4083.value)*(x4084.value)))+(((15.1168550416)*px*(r22*r22*r22*r22)*(x4085.value)))+(((10661.9064451457)*npz*pz*r02*r22*(x4086.value)*(x4087.value)))+(((0.5)*pp*r02*(x4088.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((176.324811209165)*npz*r02*(r22*r22)*(x4089.value)*(x4090.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-117.549874139443)*px*pz*(r22*r22*r22)*(x4091.value)))+(((-3454.4932271841)*r02*(pz*pz*pz)*(r22*r22*r22)*(x4092.value)*(x4093.value)))+(((10363.4796837461)*npz*r02*(pz*pz)*(x4094.value)*(x4095.value)))+(((22.6752825624)*r02*(x4096.value)*(x4097.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612649121)*px*(npz*npz)*(x4098.value)))+(((2665.47661156855)*pp*r02*(r22*r22*r22*r22)*(x4099.value)*(x4100.value)))+(((-5330.9532231371)*pp*r02*(r22*r22)*(x4101.value)*(x4102.value)))+(((114.259653174374)*r02*(pz*pz)*(x4103.value)*(x4104.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.132302651212584)*npz*r02))+(((0.0661263256062921)*px))+(((7.77607999917696)*px*pz*r22*(x4105.value)))+(((117.549874139443)*npz*px*(r22*r22)*(x4106.value)))+(((90.70113024)*pz*r02*(r22*r22*r22)*(x4107.value)))+(((-3.88804)*px*(x4108.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((3.0)*r02*(x4109.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-2.99962207830647)*pz*r02*r22*(x4110.value)))+(((1371.11583794736)*pz*r02*(r22*r22*r22)*(x4111.value)*(x4112.value)))+(((-3.0)*r02*(r22*r22)*(x4113.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-58.7749370759425)*r02*(x4114.value)*(x4115.value)))+(((235.099748278886)*r02*(npz*npz)*(r22*r22)*(x4116.value)))+(((-10661.9064451457)*npz*pz*r02*(r22*r22*r22)*(x4117.value)*(x4118.value)))+(((-0.017007624820293)*r02))+(((22.6752825624)*r02*(r22*r22*r22*r22)*(x4119.value)*(x4120.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((15.11685504)*npz*pp*r02*(x4121.value)))+(((-15.11685504)*pp*pz*r02*r22*(x4122.value)))+(((120.9348403232)*npz*r02*(x4123.value)))+(((0.771499799030864)*r02*(r22*r22)*(x4124.value)))+(((30.23371008)*r02*(npz*npz)*(x4125.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811209165)*npz*r02*(x4126.value)*(x4127.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612697495)*npz*pp*r02*(r22*r22)*(x4128.value)))+(((-3.88804)*pp*r02*(x4129.value)))+(((-117.549874139443)*npz*px*(x4130.value)))+(((914.077225298242)*r02*(npz*npz*npz)*(x4131.value)))+(((342.77895945056)*r02*(pz*pz)*(r22*r22)*(x4132.value)*(x4133.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((457.038612624934)*r02*(npz*npz)*(x4134.value)*(x4135.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-15.5521599983539)*r02*(npz*npz)*(x4136.value)))+(((-587.749370697216)*r02*(npz*npz)*(x4137.value)))+(((30.23371008)*px*(npz*npz)*(x4138.value)))+(((2.0)*px*(x4139.value)))+(((457.038612600747)*npz*r02*(pz*pz)*(r22*r22)*(x4140.value)))+(((176.324811227827)*pp*r02*(x4141.value)))+(((176.324811227827)*r02*(r22*r22)*(x4142.value)*(x4143.value)))+(((-4.0)*npz*r02*(r22*r22)*(x4144.value)))+(((-0.514398000020576)*npz*r02*(x4145.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-457.038612697495)*npz*pp*r02*(x4146.value)))+(((-10363.4796837461)*npz*pp*r02*(x4147.value)*(x4148.value)))+(((685.557918973681)*npz*r02*(r22*r22*r22*r22)*(x4149.value)*(x4150.value)))+(((-45.3505651248)*r02*(r22*r22)*(x4151.value)*(x4152.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((940.398993115546)*npz*pz*r02*r22*(x4153.value)))+(((13817.9729109302)*r02*(npz*npz*npz)*(x4154.value)*(x4155.value)))+(((-176.324811190502)*r02*(pz*pz)*(r22*r22)*(x4156.value)))+(((0.0992144884094382)*r02*(x4157.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((228.519306348747)*px*(pz*pz)*(x4158.value)))+(((-30.23371008)*npz*pz*r02*r22*(x4159.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-685.557918973681)*pz*r02*r22*(x4160.value)*(x4161.value)))+(((-2665.47661156855)*r02*(pz*pz)*(x4162.value)*(x4163.value)))+(((114.259653174374)*pp*r02*(r22*r22)*(x4164.value)*(x4165.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((7.77608)*npz*px*(r22*r22)*(x4166.value)))+(((3.88804)*px*(r22*r22)*(x4167.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-10363.4796837461)*pp*pz*r02*(r22*r22*r22)*(x4168.value)*(x4169.value)))+(((117.549874139443)*px*pz*r22*(x4170.value)))+(((2665.47661100431)*r02*(pz*pz)*(r22*r22*r22*r22)*(x4171.value)*(x4172.value)))+(((-914.077225249868)*npz*pz*r02*r22*(x4173.value)*(x4174.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-914.077225298242)*npz*px*pz*r22*(x4175.value)))+(((-1371.11583794736)*npz*r02*(r22*r22)*(x4176.value)*(x4177.value)))+(((-30.23371008)*npz*px*pz*r22*(x4178.value)))+(((-0.514398000020576)*npz*px))+(((10363.4796837461)*npz*pp*r02*(r22*r22)*(x4179.value)*(x4180.value)))+(((-41453.9187327906)*pz*r02*r22*(npz*npz)*(x4181.value)*(x4182.value)))+(((-11.66412)*r02*(x4183.value)))+(((-176.324811209165)*pz*r02*(r22*r22*r22)*(x4184.value)*(x4185.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((3.88804)*pp*r02*(r22*r22)*(x4186.value)))+(((2665.47661156855)*pp*r02*(x4187.value)*(x4188.value)))+(((-176.324811227827)*pp*r02*(r22*r22)*(x4189.value)))+(((-15.11685504)*px*pz*r22*(x4190.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-1828.15445059648)*pz*r02*r22*(npz*npz)*(x4191.value)))+(((-2.0)*px*(r22*r22)*(x4192.value)))+(((5.64239395899188e-7)*r02*(pz*pz)*(r22*r22)*(x4193.value)*(x4194.value)))+(((-11.66412)*r02*(r22*r22*r22*r22)*(x4195.value)))+(((-0.771499799030864)*r02*(x4196.value)))+(((-114.259653174374)*pp*r02*(x4197.value)*(x4198.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-151.1685504064)*npz*r02*(r22*r22)*(x4199.value)))+(((7.77608)*npz*r02*(r22*r22)*(x4200.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-5330.95322257286)*r02*(npz*npz)*(x4201.value)*(x4202.value)))+(((11.6641199987654)*pz*r02*r22*(x4203.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-176.324811227827)*r02*(r22*r22*r22*r22)*(x4204.value)*(x4205.value)))+(((10363.4796837461)*pp*pz*r02*r22*(x4206.value)*(x4207.value)))+(((-15.552159999177)*npz*px*(x4208.value)))+(((30.2337100832)*npz*r02*(r22*r22*r22*r22)*(x4209.value)))+(((-176.324811227827)*r02*(pz*pz)*(x4210.value)))+(((-228.519306348747)*pp*px*(x4211.value)))+(((685.557918973681)*npz*r02*(x4212.value)*(x4213.value)))+(((457.038612697495)*npz*r02*(pz*pz)*(x4214.value)))+(((15.11685504)*npz*px*(x4215.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((31090.4390490445)*npz*r02*(pz*pz)*(r22*r22)*(x4216.value)*(x4217.value)))+((pp*px))+(((58.7749370759425)*r02*(r22*r22*r22*r22*r22*r22)*(x4218.value)*(x4219.value)))+(((228.519306300373)*px*(pz*pz)*(r22*r22)*(x4220.value)))+(((5330.95322257286)*r02*(npz*npz)*(r22*r22)*(x4221.value)*(x4222.value))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3912.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3857.value)))+(x3912.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4223=IKsin(j0);
IkReal x4224=r22*r22;
IkReal x4225=IKcos(j0);
IkReal x4226=((914.077225394989)*pp);
IkReal x4227=((15.11685504)*npz);
IkReal x4228=((1.0)*x4225);
IkReal x4229=((15.11685504)*pz*r22);
IkReal x4230=((0.257199000010288)*x4223);
IkReal x4231=((3.88804)*x4224);
IkReal x4232=((0.257199000010288)*x4225);
IkReal x4233=((3.88804)*x4223);
IkReal x4234=((3.88804)*x4225);
IkReal x4235=x2969;
IkReal x4236=(r12*x4235);
IkReal x4237=(r02*x4235);
if(((((x4224*x4226))+(((-1.0)*x4226))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz))))) < -0.00001)
continue;
IkReal x4238=IKsqrt((((x4224*x4226))+(((-1.0)*x4226))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))));
IkReal x4239=((0.5)*x4225*x4238);
IkReal x4240=((0.5)*x4223*x4238);
evalcond[0]=(((r12*x4232))+(((-1.0)*x4225*x4227*x4236))+((x4223*x4231*x4237))+((x4237*x4240))+(((-1.0)*x4225*x4231*x4236))+(((-1.0)*py*x4228))+(((-1.0)*x4233*x4237))+(((-1.0)*r02*x4230))+(((-1.0)*x4236*x4239))+((px*x4223))+((x4223*x4227*x4237))+((x4225*x4229*x4236))+(((-1.0)*x4223*x4229*x4237))+((x4234*x4236)));
evalcond[1]=(((r12*x4230))+(((-1.0)*x4225*x4227*x4237))+((x4223*x4229*x4236))+(((-1.0)*px*x4228))+((r02*x4232))+(((-1.0)*x4225*x4231*x4237))+(((-1.0)*x4237*x4239))+(((-1.0)*x4236*x4240))+(((-1.0)*x4223*x4227*x4236))+((x4233*x4236))+(((-1.0)*x4223*x4231*x4236))+(((-1.0)*py*x4223))+((x4225*x4229*x4237))+((x4234*x4237)));
CheckValue<IkReal> x4241=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4241.valid){
continue;
}
CheckValue<IkReal> x4242=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4242.valid){
continue;
}
CheckValue<IkReal> x4243=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4243.valid){
continue;
}
CheckValue<IkReal> x4244=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4244.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4245=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4245.valid){
continue;
}
CheckValue<IkReal> x4246=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4246.valid){
continue;
}
CheckValue<IkReal> x4247=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4247.valid){
continue;
}
CheckValue<IkReal> x4248=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4248.valid){
continue;
}
CheckValue<IkReal> x4249=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4249.valid){
continue;
}
CheckValue<IkReal> x4250=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4250.valid){
continue;
}
CheckValue<IkReal> x4251=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4251.valid){
continue;
}
CheckValue<IkReal> x4252=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4252.valid){
continue;
}
CheckValue<IkReal> x4253=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4253.valid){
continue;
}
CheckValue<IkReal> x4254=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4254.valid){
continue;
}
CheckValue<IkReal> x4255=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4255.valid){
continue;
}
CheckValue<IkReal> x4256=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4256.valid){
continue;
}
CheckValue<IkReal> x4257=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4257.valid){
continue;
}
CheckValue<IkReal> x4258=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4258.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4259=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4259.valid){
continue;
}
CheckValue<IkReal> x4260=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4260.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4261=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4261.valid){
continue;
}
CheckValue<IkReal> x4262=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4262.valid){
continue;
}
CheckValue<IkReal> x4263=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4263.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4264=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4264.valid){
continue;
}
CheckValue<IkReal> x4265=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4265.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4266=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4266.valid){
continue;
}
CheckValue<IkReal> x4267=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4267.valid){
continue;
}
CheckValue<IkReal> x4268=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4268.valid){
continue;
}
CheckValue<IkReal> x4269=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4269.valid){
continue;
}
CheckValue<IkReal> x4270=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4270.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4271=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4271.valid){
continue;
}
CheckValue<IkReal> x4272=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4272.valid){
continue;
}
CheckValue<IkReal> x4273=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4273.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4274=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4274.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4275=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4275.valid){
continue;
}
CheckValue<IkReal> x4276=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4276.valid){
continue;
}
evalcond[2]=((-0.0661263256062921)+(((-0.3110432)*r02*(x4241.value)*(IKcos(j0))))+(((-30.23371008)*(npz*npz)*(x4242.value)))+(((-15.1168550416)*(x4243.value)))+(((0.04)*r02*(x4244.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKcos(j0))))+(((-228.519306300373)*(pz*pz)*(r22*r22)*(x4245.value)))+(((30.2337100832)*(r22*r22)*(x4246.value)))+(((15.552159999177)*npz*(x4247.value)))+(((-1.2093484032)*pz*r02*r22*(x4248.value)*(IKcos(j0))))+(((-0.3110432)*r12*(x4249.value)*(IKsin(j0))))+(((-228.519306348747)*pp*(r22*r22)*(x4250.value)))+(((-0.020575920000823)*r12*(IKsin(j0))))+(((-2.0)*(x4251.value)))+(((2.0)*(r22*r22)*(x4252.value)))+(((1.2093484032)*npz*r02*(x4253.value)*(IKcos(j0))))+(((0.3110432)*r02*(r22*r22)*(x4254.value)*(IKcos(j0))))+(((-117.549874139443)*npz*(r22*r22)*(x4255.value)))+(((0.3110432)*r12*(r22*r22)*(x4256.value)*(IKsin(j0))))+(((228.519306348747)*pp*(x4257.value)))+(((-1.0)*pp))+(((-15.11685504)*npz*(x4258.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.514398000020576)*npz))+(((-7.77608)*npz*(r22*r22)*(x4259.value)))+(((-0.020575920000823)*r02*(IKcos(j0))))+(((0.257199000010288)*(x4260.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-15.1168550416)*(r22*r22*r22*r22)*(x4261.value)))+(((1.2093484032)*npz*r12*(x4262.value)*(IKsin(j0))))+(((3.88804)*(x4263.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((117.549874139443)*npz*(x4264.value)))+(((15.11685504)*pz*r22*(x4265.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-457.038612649121)*(npz*npz)*(x4266.value)))+(((-1.2093484032)*pz*r12*r22*(x4267.value)*(IKsin(j0))))+(((-228.519306348747)*(pz*pz)*(x4268.value)))+(((-117.549874139443)*pz*r22*(x4269.value)))+(((-1.0)*npz*(x4270.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-7.77607999917696)*pz*r22*(x4271.value)))+(((30.23371008)*npz*pz*r22*(x4272.value)))+(((-3.88804)*(r22*r22)*(x4273.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.04)*r12*(x4274.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKsin(j0))))+(((117.549874139443)*pz*(r22*r22*r22)*(x4275.value)))+(((0.08)*px*(IKcos(j0))))+(((0.08)*py*(IKsin(j0))))+(((914.077225298242)*npz*pz*r22*(x4276.value))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4277=r22*r22;
IkReal x4278=((15.11685504)*npz);
IkReal x4279=(pz*r22);
IkReal x4280=((914.077225394989)*pp);
IkReal x4281=x2969;
IkReal x4282=(r02*x4281);
IkReal x4283=(r12*x4281);
IkReal x4284=((3.88804)*x4283);
if((((((-1.0)*x4280))+(((-1828.15445078998)*npz*x4279))+(((914.077225394989)*(npz*npz)))+((x4277*x4280))+(((914.077225394989)*(pz*pz))))) < -0.00001)
continue;
IkReal x4285=IKsqrt(((((-1.0)*x4280))+(((-1828.15445078998)*npz*x4279))+(((914.077225394989)*(npz*npz)))+((x4277*x4280))+(((914.077225394989)*(pz*pz)))));
IkReal x4286=((0.5)*x4285);
CheckValue<IkReal> x4287=IKPowWithIntegerCheck(IKsign(((0.04)+(((0.34)*sj1*sj2))+(((0.04)*cj2*sj1))+(((0.345)*sj1))+(((0.34)*cj1*cj2))+(((-0.04)*cj1*sj2)))),-1);
if(!x4287.valid){
continue;
}
CheckValue<IkReal> x4288 = IKatan2WithCheck(IkReal(((((-1.0)*x4284))+((x4283*x4286))+((x4278*x4283))+((x4277*x4284))+py+(((-0.257199000010288)*r12))+(((-15.11685504)*x4279*x4283)))),IkReal((((x4282*x4286))+((x4278*x4282))+(((-3.88804)*x4282))+(((-0.257199000010288)*r02))+px+(((3.88804)*x4277*x4282))+(((-15.11685504)*x4279*x4282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4288.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4287.value)))+(x4288.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4289=IKcos(j0);
IkReal x4290=r22*r22;
IkReal x4291=IKsin(j0);
IkReal x4292=((1.0)*py);
IkReal x4293=((0.257199000010288)*r02);
IkReal x4294=((914.077225394989)*pp);
IkReal x4295=((0.345)*sj1);
IkReal x4296=((15.11685504)*npz);
IkReal x4297=((1.0)*px);
IkReal x4298=((0.04)*cj2*sj1);
IkReal x4299=((0.34)*cj1*cj2);
IkReal x4300=(r12*x4290);
IkReal x4301=(r12*x4291);
IkReal x4302=(r12*x4289);
IkReal x4303=(r02*x4289);
IkReal x4304=((0.34)*sj1*sj2);
IkReal x4305=((0.04)*cj1*sj2);
IkReal x4306=(r02*x4291);
IkReal x4307=x2969;
IkReal x4308=((3.88804)*x4307);
IkReal x4309=(r02*x4307);
IkReal x4310=(x4296*x4307);
IkReal x4311=((15.11685504)*pz*r22*x4307);
IkReal x4312=x4285;
IkReal x4313=((0.5)*x4312);
evalcond[0]=((((-1.0)*x4289*x4305))+(((-1.0)*x4296*x4309))+((r02*x4308))+((x4289*x4298))+((x4289*x4299))+((x4289*x4295))+(((-1.0)*r02*x4290*x4308))+(((-1.0)*x4297))+(((-1.0)*x4309*x4313))+(((15.11685504)*pz*r22*x4309))+((x4289*x4304))+x4293+(((0.04)*x4289)));
evalcond[1]=(((r12*x4308))+(((-1.0)*x4291*x4305))+(((-1.0)*r12*x4307*x4313))+(((0.04)*x4291))+(((-1.0)*x4292))+((r12*x4311))+((x4291*x4298))+((x4291*x4299))+((x4291*x4295))+(((-1.0)*r12*x4310))+(((0.257199000010288)*r12))+(((-1.0)*x4300*x4308))+((x4291*x4304)));
evalcond[2]=((((-1.0)*x4306*x4311))+(((-1.0)*x4289*x4300*x4308))+(((-1.0)*x4291*x4293))+(((-1.0)*x4289*x4292))+((px*x4291))+(((0.257199000010288)*x4302))+((x4290*x4306*x4308))+((x4306*x4307*x4313))+((x4302*x4311))+(((-1.0)*x4302*x4307*x4313))+((x4306*x4310))+(((-1.0)*x4306*x4308))+((x4302*x4308))+(((-1.0)*x4302*x4310)));
evalcond[3]=((0.04)+((x4301*x4308))+(((-1.0)*x4301*x4310))+(((-1.0)*x4290*x4303*x4308))+(((-1.0)*x4303*x4307*x4313))+(((-1.0)*x4291*x4292))+(((-1.0)*x4291*x4300*x4308))+(((-1.0)*x4289*x4297))+((x4289*x4293))+(((0.257199000010288)*x4301))+((x4301*x4311))+(((-1.0)*x4303*x4310))+x4299+x4298+x4295+x4304+((x4303*x4308))+(((-1.0)*x4301*x4307*x4313))+((x4303*x4311))+(((-1.0)*x4305)));
CheckValue<IkReal> x4314=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4314.valid){
continue;
}
CheckValue<IkReal> x4315=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4315.valid){
continue;
}
CheckValue<IkReal> x4316=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4316.valid){
continue;
}
CheckValue<IkReal> x4317=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4317.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4318=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4318.valid){
continue;
}
CheckValue<IkReal> x4319=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4319.valid){
continue;
}
CheckValue<IkReal> x4320=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4320.valid){
continue;
}
CheckValue<IkReal> x4321=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4321.valid){
continue;
}
CheckValue<IkReal> x4322=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4322.valid){
continue;
}
CheckValue<IkReal> x4323=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4323.valid){
continue;
}
CheckValue<IkReal> x4324=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4324.valid){
continue;
}
CheckValue<IkReal> x4325=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4325.valid){
continue;
}
CheckValue<IkReal> x4326=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4326.valid){
continue;
}
CheckValue<IkReal> x4327=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4327.valid){
continue;
}
CheckValue<IkReal> x4328=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4328.valid){
continue;
}
CheckValue<IkReal> x4329=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4329.valid){
continue;
}
CheckValue<IkReal> x4330=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4330.valid){
continue;
}
CheckValue<IkReal> x4331=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4331.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4332=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4332.valid){
continue;
}
CheckValue<IkReal> x4333=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4333.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4334=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4334.valid){
continue;
}
CheckValue<IkReal> x4335=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4335.valid){
continue;
}
CheckValue<IkReal> x4336=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4336.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4337=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4337.valid){
continue;
}
CheckValue<IkReal> x4338=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4338.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4339=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4339.valid){
continue;
}
CheckValue<IkReal> x4340=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4340.valid){
continue;
}
CheckValue<IkReal> x4341=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4341.valid){
continue;
}
CheckValue<IkReal> x4342=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4342.valid){
continue;
}
CheckValue<IkReal> x4343=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4343.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4344=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4344.valid){
continue;
}
CheckValue<IkReal> x4345=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4345.valid){
continue;
}
CheckValue<IkReal> x4346=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4346.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4347=IKPowWithIntegerCheck(((-15.1168550416)+(((15.1168550416)*(r22*r22)))),-1);
if(!x4347.valid){
continue;
}
if((((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))) < -0.00001)
continue;
CheckValue<IkReal> x4348=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4348.valid){
continue;
}
CheckValue<IkReal> x4349=IKPowWithIntegerCheck(((228.519306348747)+(((228.519306348747)*(r22*r22*r22*r22)))+(((-457.038612697495)*(r22*r22)))),-1);
if(!x4349.valid){
continue;
}
evalcond[4]=((0.168473674393708)+(((-0.3110432)*r02*(x4314.value)*(IKcos(j0))))+(((-30.23371008)*(npz*npz)*(x4315.value)))+(((-15.1168550416)*(x4316.value)))+(((0.04)*r02*(x4317.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKcos(j0))))+(((-228.519306300373)*(pz*pz)*(r22*r22)*(x4318.value)))+(((30.2337100832)*(r22*r22)*(x4319.value)))+(((15.552159999177)*npz*(x4320.value)))+(((-1.2093484032)*pz*r02*r22*(x4321.value)*(IKcos(j0))))+(((-0.3110432)*r12*(x4322.value)*(IKsin(j0))))+(((-228.519306348747)*pp*(r22*r22)*(x4323.value)))+(((-0.020575920000823)*r12*(IKsin(j0))))+(((0.2346)*sj2))+(((-2.0)*(x4324.value)))+(((0.0276)*cj2))+(((2.0)*(r22*r22)*(x4325.value)))+(((1.2093484032)*npz*r02*(x4326.value)*(IKcos(j0))))+(((0.3110432)*r02*(r22*r22)*(x4327.value)*(IKcos(j0))))+(((-117.549874139443)*npz*(r22*r22)*(x4328.value)))+(((0.3110432)*r12*(r22*r22)*(x4329.value)*(IKsin(j0))))+(((228.519306348747)*pp*(x4330.value)))+(((-1.0)*pp))+(((-15.11685504)*npz*(x4331.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.514398000020576)*npz))+(((-7.77608)*npz*(r22*r22)*(x4332.value)))+(((-0.020575920000823)*r02*(IKcos(j0))))+(((0.257199000010288)*(x4333.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-15.1168550416)*(r22*r22*r22*r22)*(x4334.value)))+(((1.2093484032)*npz*r12*(x4335.value)*(IKsin(j0))))+(((3.88804)*(x4336.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((117.549874139443)*npz*(x4337.value)))+(((15.11685504)*pz*r22*(x4338.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-457.038612649121)*(npz*npz)*(x4339.value)))+(((-1.2093484032)*pz*r12*r22*(x4340.value)*(IKsin(j0))))+(((-228.519306348747)*(pz*pz)*(x4341.value)))+(((-117.549874139443)*pz*r22*(x4342.value)))+(((-1.0)*npz*(x4343.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((-7.77607999917696)*pz*r22*(x4344.value)))+(((30.23371008)*npz*pz*r22*(x4345.value)))+(((-3.88804)*(r22*r22)*(x4346.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))))+(((0.04)*r12*(x4347.value)*(IKsqrt(((((914.077225394989)*pp*(r22*r22)))+(((-1828.15445078998)*npz*pz*r22))+(((914.077225394989)*(npz*npz)))+(((914.077225394989)*(pz*pz)))+(((-914.077225394989)*pp)))))*(IKsin(j0))))+(((117.549874139443)*pz*(r22*r22*r22)*(x4348.value)))+(((0.08)*px*(IKcos(j0))))+(((0.08)*py*(IKsin(j0))))+(((914.077225298242)*npz*pz*r22*(x4349.value))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x4350=j6*j6;
IkReal x4351=r22*r22;
IkReal x4352=pz*pz;
IkReal x4353=(j6*npz);
IkReal x4354=((0.0411518400016461)*j6);
IkReal x4355=(pz*r22);
IkReal x4356=((7.77608)*j6);
IkReal x4357=((15.1168550416)*x4350);
IkReal x4358=((0.08)*x4350);
j0eval[0]=((1.0)+(((-30.2337100832)*x4353))+(((-1.0)*x4351*x4356))+(((-1.0)*x4351*x4357))+(((30.2337100832)*j6*x4355))+(((-7.77608)*npz))+(((-15.1168550416)*x4352))+x4356+x4357+(((7.77608)*x4355))+(((-1.0)*x4351))+(((15.1168550416)*pp)));
j0eval[1]=IKsign(((0.00529210604850337)+(((-0.16)*x4353))+(((0.16)*j6*x4355))+(((-0.00529210604850337)*x4351))+(((-0.08)*x4352))+(((-1.0)*x4351*x4354))+(((-1.0)*x4351*x4358))+(((0.0411518400016461)*x4355))+x4358+x4354+(((-0.0411518400016461)*npz))+(((0.08)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4359=j6*j6;
IkReal x4360=j6*j6*j6;
IkReal x4361=((0.0411518400016461)*j6);
IkReal x4362=((0.16)*j6);
IkReal x4363=((0.132302651212584)*npz);
IkReal x4364=((0.514398000020576)*px);
IkReal x4365=((1.0)*r12);
IkReal x4366=(j6*pp);
IkReal x4367=(j6*py);
IkReal x4368=((2.0)*npz);
IkReal x4369=((1.0)*r02);
IkReal x4370=((0.270771023181124)*j6);
IkReal x4371=((0.257199000010288)*pp);
IkReal x4372=((0.08)*x4359);
IkReal x4373=((0.771597000030864)*x4359);
IkReal x4374=((1.02879600004115)*j6*npz);
IkReal x4375=(x4359*x4368);
IkReal x4376=(x4372+x4361);
CheckValue<IkReal> x4377=IKPowWithIntegerCheck(IKsign(((0.00529210604850337)+(((r22*r22)*(((-0.00529210604850337)+(((-1.0)*x4376))))))+((pz*r22*(((0.0411518400016461)+x4362))))+((npz*(((-0.0411518400016461)+(((-1.0)*x4362))))))+x4376+(((0.08)*pp))+(((-0.08)*(pz*pz))))),-1);
if(!x4377.valid){
continue;
}
CheckValue<IkReal> x4378 = IKatan2WithCheck(IkReal(((((0.103670145984534)*r12))+(((-1.0)*x4360*x4365))+(((-0.403073674393708)*py))+((r12*x4370))+((r12*x4374))+((r12*x4375))+((r12*x4363))+(((-1.0)*x4365*x4366))+(((0.514398000020576)*x4367))+(((-0.514398000020576)*npz*py))+((py*x4359))+(((-1.0)*r12*x4371))+(((-1.0)*r12*x4373))+(((-1.0)*x4367*x4368))+((pp*py)))),IkReal(((((0.103670145984534)*r02))+((r02*x4374))+((r02*x4375))+((r02*x4370))+((px*x4359))+(((-1.0)*x4360*x4369))+(((-0.403073674393708)*px))+(((-1.0)*r02*x4373))+(((-1.0)*r02*x4371))+(((-1.0)*x4366*x4369))+(((-1.0)*j6*px*x4368))+((j6*x4364))+(((-1.0)*npz*x4364))+((pp*px))+((r02*x4363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4378.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4377.value)))+(x4378.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4379=IKcos(j0);
IkReal x4380=IKsin(j0);
IkReal x4381=((0.257199000010288)*r02);
IkReal x4382=(px*x4379);
IkReal x4383=(j6*x4379);
IkReal x4384=(r12*x4380);
IkReal x4385=(py*x4380);
evalcond[0]=((((-1.0)*x4380*x4381))+((px*x4380))+(((-1.0)*py*x4379))+(((-1.0)*j6*r02*x4380))+(((0.257199000010288)*r12*x4379))+((r12*x4383)));
evalcond[1]=((((-1.0)*x4385))+(((-1.0)*x4382))+((r02*x4383))+((j6*x4384))+((x4379*x4381))+(((0.257199000010288)*x4384)));
evalcond[2]=((0.403073674393708)+(((-0.020575920000823)*x4384))+(((-0.08)*j6*x4384))+(((2.0)*j6*npz))+(((-0.08)*r02*x4383))+(((-1.0)*(j6*j6)))+(((-1.0)*pp))+(((0.514398000020576)*npz))+(((-0.514398000020576)*j6))+(((-0.020575920000823)*r02*x4379))+(((0.08)*x4382))+(((0.08)*x4385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x4386=j6*j6;
IkReal x4387=r22*r22;
IkReal x4388=pz*pz;
IkReal x4389=(j6*npz);
IkReal x4390=((0.0411518400016461)*j6);
IkReal x4391=(pz*r22);
IkReal x4392=((7.77608)*j6);
IkReal x4393=((15.1168550416)*x4386);
IkReal x4394=((0.08)*x4386);
j0eval[0]=((1.0)+(((-1.0)*x4387*x4393))+(((-1.0)*x4387*x4392))+(((-1.0)*x4387))+(((-15.1168550416)*x4388))+(((-7.77608)*npz))+x4392+x4393+(((-30.2337100832)*x4389))+(((30.2337100832)*j6*x4391))+(((15.1168550416)*pp))+(((7.77608)*x4391)));
j0eval[1]=IKsign(((0.00529210604850337)+(((-0.16)*x4389))+(((-1.0)*x4387*x4394))+(((-1.0)*x4387*x4390))+(((0.16)*j6*x4391))+(((-0.00529210604850337)*x4387))+(((-0.08)*x4388))+(((0.0411518400016461)*x4391))+x4390+x4394+(((-0.0411518400016461)*npz))+(((0.08)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4395=j6*j6;
IkReal x4396=j6*j6*j6;
IkReal x4397=((0.0411518400016461)*j6);
IkReal x4398=((0.16)*j6);
IkReal x4399=((0.132302651212584)*npz);
IkReal x4400=((0.198428976818876)*j6);
IkReal x4401=((0.514398000020576)*px);
IkReal x4402=((1.0)*r12);
IkReal x4403=(j6*pp);
IkReal x4404=((1.0)*r02);
IkReal x4405=((0.514398000020576)*py);
IkReal x4406=((0.257199000010288)*pp);
IkReal x4407=((0.08)*x4395);
IkReal x4408=((0.771597000030864)*x4395);
IkReal x4409=((2.0)*j6*npz);
IkReal x4410=((1.02879600004115)*j6*npz);
IkReal x4411=((2.0)*npz*x4395);
IkReal x4412=(x4407+x4397);
CheckValue<IkReal> x4413=IKPowWithIntegerCheck(IKsign(((0.00529210604850337)+x4412+(((r22*r22)*(((-0.00529210604850337)+(((-1.0)*x4412))))))+((npz*(((-0.0411518400016461)+(((-1.0)*x4398))))))+((pz*r22*(((0.0411518400016461)+x4398))))+(((0.08)*pp))+(((-0.08)*(pz*pz))))),-1);
if(!x4413.valid){
continue;
}
CheckValue<IkReal> x4414 = IKatan2WithCheck(IkReal((((j6*x4405))+((r12*x4410))+((r12*x4411))+(((0.0661263256062921)*py))+(((-1.0)*py*x4409))+(((-1.0)*x4396*x4402))+(((-1.0)*r12*x4406))+(((-1.0)*r12*x4408))+(((-1.0)*r12*x4400))+(((-1.0)*npz*x4405))+(((-0.017007624820293)*r12))+(((-1.0)*x4402*x4403))+((py*x4395))+((pp*py))+((r12*x4399)))),IkReal((((j6*x4401))+((px*x4395))+(((0.0661263256062921)*px))+(((-1.0)*x4403*x4404))+(((-1.0)*x4396*x4404))+(((-1.0)*npz*x4401))+(((-0.017007624820293)*r02))+((r02*x4399))+(((-1.0)*r02*x4400))+(((-1.0)*r02*x4406))+(((-1.0)*r02*x4408))+((r02*x4411))+((r02*x4410))+(((-1.0)*px*x4409))+((pp*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4414.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4413.value)))+(x4414.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4415=IKcos(j0);
IkReal x4416=IKsin(j0);
IkReal x4417=((0.257199000010288)*r02);
IkReal x4418=(px*x4415);
IkReal x4419=(j6*x4415);
IkReal x4420=(r12*x4416);
IkReal x4421=(py*x4416);
evalcond[0]=(((r12*x4419))+((px*x4416))+(((-1.0)*py*x4415))+(((-1.0)*x4416*x4417))+(((-1.0)*j6*r02*x4416))+(((0.257199000010288)*r12*x4415)));
evalcond[1]=((((0.257199000010288)*x4420))+((x4415*x4417))+(((-1.0)*x4418))+(((-1.0)*x4421))+((r02*x4419))+((j6*x4420)));
evalcond[2]=((-0.0661263256062921)+(((0.08)*x4418))+(((-0.08)*j6*x4420))+(((2.0)*j6*npz))+(((-0.020575920000823)*r02*x4415))+(((-1.0)*(j6*j6)))+(((-1.0)*pp))+(((0.08)*x4421))+(((0.514398000020576)*npz))+(((-0.020575920000823)*x4420))+(((-0.08)*r02*x4419))+(((-0.514398000020576)*j6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4422=(j6*r02);
IkReal x4423=((0.257199000010288)*r02);
IkReal x4424=((0.04)*px);
IkReal x4425=(cj1*sj2);
IkReal x4426=(px*sj1);
IkReal x4427=((0.34)*sj2);
IkReal x4428=(cj2*r02);
IkReal x4429=(r02*r12);
IkReal x4430=((0.0102879600004115)*r02);
IkReal x4431=((0.345)*sj1);
IkReal x4432=(px*r12);
IkReal x4433=(r02*sj1);
IkReal x4434=((0.34)*cj1*cj2);
IkReal x4435=((0.04)*cj2*sj1);
CheckValue<IkReal> x4436=IKPowWithIntegerCheck(((((-0.0874476600034979)*sj2*x4433))+(((-0.0102879600004115)*sj1*x4428))+(((0.345)*x4426))+x4424+(((-1.0)*x4430))+((x4426*x4427))+(((-0.04)*x4422))+((px*x4434))+((cj2*sj1*x4424))+((x4425*x4430))+(((-1.0)*sj1*x4422*x4427))+(((-1.0)*x4424*x4425))+(((-1.0)*x4422*x4435))+(((-1.0)*x4422*x4431))+(((-1.0)*x4422*x4434))+(((0.04)*x4422*x4425))+(((-0.0887336550035493)*x4433))+(((-0.0874476600034979)*cj1*x4428))),-1);
if(!x4436.valid){
continue;
}
CheckValue<IkReal> x4437=IKPowWithIntegerCheck(((0.04)+x4435+x4434+x4431+(((-0.04)*x4425))+((sj1*x4427))),-1);
if(!x4437.valid){
continue;
}
if( IKabs(((x4436.value)*(((((-1.0)*py*x4423))+((j6*r12*x4422))+(((0.514398000020576)*r12*x4422))+(((-1.0)*py*x4422))+(((-0.257199000010288)*x4432))+((px*py))+(((0.0661513256062921)*x4429))+(((-1.0)*j6*x4432)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4437.value)*(((((-1.0)*x4423))+px+(((-1.0)*x4422)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4436.value)*(((((-1.0)*py*x4423))+((j6*r12*x4422))+(((0.514398000020576)*r12*x4422))+(((-1.0)*py*x4422))+(((-0.257199000010288)*x4432))+((px*py))+(((0.0661513256062921)*x4429))+(((-1.0)*j6*x4432))))))+IKsqr(((x4437.value)*(((((-1.0)*x4423))+px+(((-1.0)*x4422))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4436.value)*(((((-1.0)*py*x4423))+((j6*r12*x4422))+(((0.514398000020576)*r12*x4422))+(((-1.0)*py*x4422))+(((-0.257199000010288)*x4432))+((px*py))+(((0.0661513256062921)*x4429))+(((-1.0)*j6*x4432))))), ((x4437.value)*(((((-1.0)*x4423))+px+(((-1.0)*x4422))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4438=IKcos(j0);
IkReal x4439=IKsin(j0);
IkReal x4440=((1.0)*px);
IkReal x4441=((1.0)*py);
IkReal x4442=((0.257199000010288)*r02);
IkReal x4443=((0.345)*sj1);
IkReal x4444=((0.257199000010288)*r12);
IkReal x4445=(j6*r02);
IkReal x4446=((0.04)*cj2*sj1);
IkReal x4447=((0.34)*cj1*cj2);
IkReal x4448=(j6*x4438);
IkReal x4449=(r12*x4439);
IkReal x4450=((0.34)*sj1*sj2);
IkReal x4451=((0.04)*cj1*sj2);
evalcond[0]=(((px*x4439))+((x4438*x4444))+(((-1.0)*x4439*x4445))+(((-1.0)*x4439*x4442))+((r12*x4448))+(((-1.0)*x4438*x4441)));
evalcond[1]=(x4442+x4445+(((-1.0)*x4440))+(((0.04)*x4438))+((x4438*x4443))+((x4438*x4446))+((x4438*x4447))+((x4438*x4450))+(((-1.0)*x4438*x4451)));
evalcond[2]=(x4444+(((-1.0)*x4441))+(((0.04)*x4439))+((x4439*x4446))+((x4439*x4447))+((x4439*x4443))+(((-1.0)*x4439*x4451))+((x4439*x4450))+((j6*r12)));
evalcond[3]=((0.04)+(((-1.0)*x4451))+x4443+x4446+x4447+x4450+((j6*x4449))+((x4438*x4445))+((x4438*x4442))+((x4439*x4444))+(((-1.0)*x4439*x4441))+(((-1.0)*x4438*x4440)));
evalcond[4]=((0.168473674393708)+(((0.08)*px*x4438))+(((-0.020575920000823)*r02*x4438))+(((2.0)*j6*npz))+(((-0.08)*j6*x4449))+(((0.2346)*sj2))+(((-0.020575920000823)*x4449))+(((0.0276)*cj2))+(((-1.0)*(j6*j6)))+(((-1.0)*pp))+(((0.514398000020576)*npz))+(((-0.514398000020576)*j6))+(((0.08)*py*x4439))+(((-0.08)*x4438*x4445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4452=((2.0)*j6);
IkReal x4453=((0.514398000020576)*j6);
IkReal x4454=j6*j6;
IkReal x4455=(cj1*cj2);
IkReal x4456=(j6*r02);
IkReal x4457=((0.04)*px);
IkReal x4458=(r12*sj1);
IkReal x4459=((0.0102879600004115)*r12);
IkReal x4460=(cj1*sj2);
IkReal x4461=((0.0874476600034979)*r02);
IkReal x4462=(cj2*sj1);
IkReal x4463=((0.345)*sj1);
IkReal x4464=((0.04)*py);
IkReal x4465=((0.0102879600004115)*r02);
IkReal x4466=((0.34)*j6);
IkReal x4467=((0.04)*j6);
IkReal x4468=((0.34)*sj1*sj2);
CheckValue<IkReal> x4469 = IKatan2WithCheck(IkReal(((((-1.0)*py*x4463))+(((-1.0)*py*x4468))+x4459+(((0.0102879600004115)*cj2*x4458))+(((-1.0)*x4462*x4464))+((r12*x4455*x4466))+((r12*x4467))+(((-0.34)*py*x4455))+(((0.345)*j6*x4458))+(((-1.0)*r12*x4460*x4467))+(((-1.0)*x4459*x4460))+((sj2*x4458*x4466))+(((-1.0)*x4464))+(((0.0887336550035493)*x4458))+(((0.0874476600034979)*r12*x4455))+((cj2*x4458*x4467))+((x4460*x4464))+(((0.0874476600034979)*sj2*x4458)))),IkReal((((x4455*x4461))+(((-1.0)*x4457))+x4465+(((-0.34)*px*x4455))+(((0.04)*x4456*x4462))+((sj1*sj2*x4461))+(((0.04)*x4456))+(((0.0887336550035493)*r02*sj1))+(((0.34)*x4455*x4456))+(((-1.0)*x4457*x4462))+((x4457*x4460))+(((-1.0)*x4460*x4465))+(((-1.0)*px*x4463))+(((-1.0)*px*x4468))+(((-0.04)*x4456*x4460))+((x4456*x4468))+((x4456*x4463))+((x4462*x4465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4469.valid){
continue;
}
CheckValue<IkReal> x4470=IKPowWithIntegerCheck(IKsign(((-0.0661513256062921)+(((-1.0)*x4453))+((pz*r22*(((-0.514398000020576)+(((-1.0)*x4452))))))+(((r22*r22)*(((0.0661513256062921)+x4453+x4454))))+(((-1.0)*x4454))+(((-1.0)*pp))+(pz*pz)+((npz*(((0.514398000020576)+x4452)))))),-1);
if(!x4470.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4469.value)+(((1.5707963267949)*(x4470.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4471=IKcos(j0);
IkReal x4472=IKsin(j0);
IkReal x4473=((1.0)*px);
IkReal x4474=((1.0)*py);
IkReal x4475=((0.257199000010288)*r02);
IkReal x4476=((0.345)*sj1);
IkReal x4477=((0.257199000010288)*r12);
IkReal x4478=(j6*r02);
IkReal x4479=((0.04)*cj2*sj1);
IkReal x4480=((0.34)*cj1*cj2);
IkReal x4481=(j6*x4471);
IkReal x4482=(r12*x4472);
IkReal x4483=((0.34)*sj1*sj2);
IkReal x4484=((0.04)*cj1*sj2);
evalcond[0]=(((x4471*x4477))+(((-1.0)*x4472*x4475))+(((-1.0)*x4472*x4478))+((px*x4472))+(((-1.0)*x4471*x4474))+((r12*x4481)));
evalcond[1]=((((-1.0)*x4473))+((x4471*x4476))+((x4471*x4479))+((x4471*x4483))+((x4471*x4480))+x4478+x4475+(((-1.0)*x4471*x4484))+(((0.04)*x4471)));
evalcond[2]=((((-1.0)*x4474))+(((-1.0)*x4472*x4484))+x4477+(((0.04)*x4472))+((x4472*x4479))+((x4472*x4476))+((x4472*x4483))+((x4472*x4480))+((j6*r12)));
evalcond[3]=((0.04)+((x4471*x4475))+((x4471*x4478))+x4479+x4476+x4480+x4483+(((-1.0)*x4472*x4474))+(((-1.0)*x4471*x4473))+((x4472*x4477))+((j6*x4482))+(((-1.0)*x4484)));
evalcond[4]=((0.168473674393708)+(((0.08)*py*x4472))+(((2.0)*j6*npz))+(((0.2346)*sj2))+(((0.0276)*cj2))+(((-1.0)*(j6*j6)))+(((-0.08)*j6*x4482))+(((-1.0)*pp))+(((-0.020575920000823)*x4482))+(((0.514398000020576)*npz))+(((-0.514398000020576)*j6))+(((0.08)*px*x4471))+(((-0.020575920000823)*r02*x4471))+(((-0.08)*x4471*x4478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4485=((1.0)*j6);
CheckValue<IkReal> x4486=IKPowWithIntegerCheck(IKsign(((0.04)+(((0.34)*sj1*sj2))+(((0.04)*cj2*sj1))+(((0.345)*sj1))+(((0.34)*cj1*cj2))+(((-0.04)*cj1*sj2)))),-1);
if(!x4486.valid){
continue;
}
CheckValue<IkReal> x4487 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4485))+py+(((-0.257199000010288)*r12)))),IkReal(((((-0.257199000010288)*r02))+px+(((-1.0)*r02*x4485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4487.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4486.value)))+(x4487.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4488=IKcos(j0);
IkReal x4489=IKsin(j0);
IkReal x4490=((1.0)*px);
IkReal x4491=((1.0)*py);
IkReal x4492=((0.257199000010288)*r02);
IkReal x4493=((0.345)*sj1);
IkReal x4494=((0.257199000010288)*r12);
IkReal x4495=(j6*r02);
IkReal x4496=((0.04)*cj2*sj1);
IkReal x4497=((0.34)*cj1*cj2);
IkReal x4498=(j6*x4488);
IkReal x4499=(r12*x4489);
IkReal x4500=((0.34)*sj1*sj2);
IkReal x4501=((0.04)*cj1*sj2);
evalcond[0]=((((-1.0)*x4489*x4492))+((r12*x4498))+((x4488*x4494))+(((-1.0)*x4489*x4495))+(((-1.0)*x4488*x4491))+((px*x4489)));
evalcond[1]=(((x4488*x4493))+((x4488*x4496))+((x4488*x4497))+x4495+x4492+((x4488*x4500))+(((-1.0)*x4488*x4501))+(((0.04)*x4488))+(((-1.0)*x4490)));
evalcond[2]=((((-1.0)*x4489*x4501))+x4494+((x4489*x4500))+(((0.04)*x4489))+((j6*r12))+(((-1.0)*x4491))+((x4489*x4493))+((x4489*x4497))+((x4489*x4496)));
evalcond[3]=((0.04)+(((-1.0)*x4489*x4491))+((x4488*x4492))+((x4488*x4495))+x4497+x4496+x4493+(((-1.0)*x4501))+x4500+(((-1.0)*x4488*x4490))+((j6*x4499))+((x4489*x4494)));
evalcond[4]=((0.168473674393708)+(((2.0)*j6*npz))+(((0.08)*py*x4489))+(((0.2346)*sj2))+(((0.0276)*cj2))+(((-1.0)*(j6*j6)))+(((-0.08)*x4488*x4495))+(((-1.0)*pp))+(((-0.08)*j6*x4499))+(((0.514398000020576)*npz))+(((-0.020575920000823)*x4499))+(((-0.514398000020576)*j6))+(((-0.020575920000823)*r02*x4488))+(((0.08)*px*x4488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
    }

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x964=((1.0)*cj0);
IkReal x965=(sj1*sj2);
IkReal x966=(r10*sj0);
IkReal x967=((1.0)*sj0);
IkReal x968=((1.0)*cj1);
IkReal x969=(cj0*r00);
IkReal x970=((1.0)*r22);
IkReal x971=((1.0)*r21);
IkReal x972=(((cj2*sj1))+(((-1.0)*sj2*x968)));
IkReal x973=(((cj1*cj2))+x965);
IkReal x974=(sj0*x972);
IkReal x975=((1.0)*x972);
IkReal x976=((((-1.0)*cj2*x968))+(((-1.0)*x965)));
new_r00=(((x969*x972))+((x966*x972))+((r20*x973)));
new_r01=((((-1.0)*r11*x967*x972))+(((-1.0)*x971*x973))+(((-1.0)*r01*x964*x972)));
new_r02=((((-1.0)*r12*x967*x972))+(((-1.0)*r02*x964*x972))+(((-1.0)*x970*x973)));
new_r10=((((-1.0)*r00*x967))+((cj0*r10)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x964)));
new_r12=(((r02*sj0))+(((-1.0)*r12*x964)));
new_r20=(((x969*x976))+((x966*x976))+((r20*x972)));
new_r21=((((-1.0)*r11*x967*x976))+(((-1.0)*x971*x972))+(((-1.0)*r01*x964*x976)));
new_r22=((((-1.0)*r12*x967*x976))+(((-1.0)*r02*x964*x976))+(((-1.0)*x970*x972)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=new_r12;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j5mul = 1;
j5=0;
j3mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].fmul = j3mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j5mul = 1;
j5=0;
j3mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].fmul = j3mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x977=new_r22*new_r22;
IkReal x978=((16.0)*new_r10);
IkReal x979=((16.0)*new_r01);
IkReal x980=((16.0)*new_r22);
IkReal x981=((8.0)*new_r11);
IkReal x982=((8.0)*new_r00);
IkReal x983=(x977*x978);
IkReal x984=(x977*x979);
j3eval[0]=((IKabs(((((-1.0)*x982))+((new_r22*x981)))))+(IKabs(((((-1.0)*x984))+x979)))+(IKabs(((((-1.0)*x983))+x978)))+(IKabs((((new_r00*x980))+(((16.0)*new_r11*x977))+(((-32.0)*new_r11)))))+(IKabs((((new_r22*x982))+(((-1.0)*x977*x981)))))+(IKabs(((((16.0)*new_r00))+(((-32.0)*new_r00*x977))+((new_r11*x980)))))+(IKabs((x984+(((-1.0)*x979)))))+(IKabs((x983+(((-1.0)*x978))))));
if( IKabs(j3eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j5]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j3evalpoly[1];
IkReal x985=new_r22*new_r22;
IkReal x986=((16.0)*new_r10);
IkReal x987=(new_r11*new_r22);
IkReal x988=(x985*x986);
IkReal x989=((((8.0)*x987))+(((-8.0)*new_r00)));
op[0]=x989;
op[1]=((((-1.0)*x988))+x986);
op[2]=((((16.0)*x987))+(((16.0)*new_r00))+(((-32.0)*new_r00*x985)));
op[3]=((((-1.0)*x986))+x988);
op[4]=x989;
polyroots4(op,zeror,numroots);
IkReal j3array[4], cj3array[4], sj3array[4], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[4]={true,true,true,true};
_nj3 = 4;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

IkReal x990=((16.0)*new_r01);
IkReal x991=new_r22*new_r22;
IkReal x992=(new_r00*new_r22);
IkReal x993=((8.0)*x992);
IkReal x994=(new_r11*x991);
IkReal x995=(x990*x991);
IkReal x996=((8.0)*x994);
j3evalpoly[0]=(((htj3*(((((-1.0)*x990))+x995))))+(((htj3*htj3*htj3*htj3)*(((((-1.0)*x996))+x993))))+(((htj3*htj3*htj3)*(((((-1.0)*x995))+x990))))+(((-1.0)*x996))+x993+(((htj3*htj3)*(((((16.0)*x994))+(((16.0)*x992))+(((-32.0)*new_r11)))))));
if( IKabs(j3evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j5eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x997=cj3*cj3;
IkReal x998=(cj3*new_r22);
IkReal x999=((-1.0)+(((-1.0)*x997*(new_r22*new_r22)))+x997);
j5eval[0]=x999;
j5eval[1]=((IKabs((((new_r00*sj3))+((new_r01*x998)))))+(IKabs((((new_r01*sj3))+(((-1.0)*new_r00*x998))))));
j5eval[2]=IKsign(x999);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j5eval[0]=new_r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j5eval[0]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1000=IKsin(j5);
IkReal x1001=IKcos(j5);
evalcond[0]=x1000;
evalcond[1]=((-1.0)*x1001);
evalcond[2]=(x1000+(((-1.0)*new_r10)));
evalcond[3]=(x1001+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1002=IKsin(j5);
IkReal x1003=IKcos(j5);
evalcond[0]=x1002;
evalcond[1]=(x1002+new_r10);
evalcond[2]=(x1003+new_r11);
evalcond[3]=((-1.0)*x1003);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x1004=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x1004.valid){
continue;
}
if((x1004.value) < -0.00001)
continue;
IkReal gconst42=((-1.0)*(IKsqrt(x1004.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((((-1.0)*gconst42))+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst42*gconst42))))) < -0.00001)
continue;
sj3=IKsqrt(((1.0)+(((-1.0)*(gconst42*gconst42)))));
cj3=gconst42;
if( (gconst42) < -1-IKFAST_SINCOS_THRESH || (gconst42) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKacos(gconst42);
CheckValue<IkReal> x1005=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x1005.valid){
continue;
}
if((x1005.value) < -0.00001)
continue;
IkReal gconst42=((-1.0)*(IKsqrt(x1005.value)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst42*gconst42))))) < -0.00001)
continue;
CheckValue<IkReal> x1006=IKPowWithIntegerCheck(gconst42,-1);
if(!x1006.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst42*gconst42))))))))+((gconst42*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x1006.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst42*gconst42))))))))+((gconst42*new_r10))))+IKsqr((new_r11*(x1006.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst42*gconst42))))))))+((gconst42*new_r10))), (new_r11*(x1006.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1007=IKcos(j5);
IkReal x1008=IKsin(j5);
IkReal x1009=((1.0)*gconst42);
if((((1.0)+(((-1.0)*gconst42*x1009)))) < -0.00001)
continue;
IkReal x1010=IKsqrt(((1.0)+(((-1.0)*gconst42*x1009))));
evalcond[0]=x1008;
evalcond[1]=((-1.0)*x1007);
evalcond[2]=((((-1.0)*x1007*x1009))+new_r11);
evalcond[3]=((((-1.0)*x1008*x1009))+new_r10);
evalcond[4]=(new_r01+((x1007*x1010)));
evalcond[5]=(new_r00+((x1008*x1010)));
evalcond[6]=(x1008+((new_r00*x1010))+(((-1.0)*new_r10*x1009)));
evalcond[7]=(x1007+(((-1.0)*new_r11*x1009))+((new_r01*x1010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1011=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x1011.valid){
continue;
}
CheckValue<IkReal> x1012 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1012.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1011.value)))+(x1012.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1013=IKcos(j5);
IkReal x1014=IKsin(j5);
IkReal x1015=((1.0)*gconst42);
if((((1.0)+(((-1.0)*gconst42*x1015)))) < -0.00001)
continue;
IkReal x1016=IKsqrt(((1.0)+(((-1.0)*gconst42*x1015))));
evalcond[0]=x1014;
evalcond[1]=((-1.0)*x1013);
evalcond[2]=((((-1.0)*x1013*x1015))+new_r11);
evalcond[3]=((((-1.0)*x1014*x1015))+new_r10);
evalcond[4]=(((x1013*x1016))+new_r01);
evalcond[5]=(((x1014*x1016))+new_r00);
evalcond[6]=(x1014+(((-1.0)*new_r10*x1015))+((new_r00*x1016)));
evalcond[7]=(x1013+(((-1.0)*new_r11*x1015))+((new_r01*x1016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x1017=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x1017.valid){
continue;
}
if((x1017.value) < -0.00001)
continue;
IkReal gconst42=((-1.0)*(IKsqrt(x1017.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst42))+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst42*gconst42))))) < -0.00001)
continue;
sj3=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst42*gconst42)))))));
cj3=gconst42;
if( (gconst42) < -1-IKFAST_SINCOS_THRESH || (gconst42) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKacos(gconst42)));
CheckValue<IkReal> x1018=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x1018.valid){
continue;
}
if((x1018.value) < -0.00001)
continue;
IkReal gconst42=((-1.0)*(IKsqrt(x1018.value)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst42*gconst42))))) < -0.00001)
continue;
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(gconst42,-1);
if(!x1019.valid){
continue;
}
if( IKabs((((gconst42*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst42*gconst42)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x1019.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst42*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst42*gconst42))))))))))+IKsqr((new_r11*(x1019.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((gconst42*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst42*gconst42))))))))), (new_r11*(x1019.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1020=IKcos(j5);
IkReal x1021=IKsin(j5);
IkReal x1022=((1.0)*gconst42);
if((((1.0)+(((-1.0)*gconst42*x1022)))) < -0.00001)
continue;
IkReal x1023=IKsqrt(((1.0)+(((-1.0)*gconst42*x1022))));
IkReal x1024=((1.0)*x1023);
evalcond[0]=x1021;
evalcond[1]=((-1.0)*x1020);
evalcond[2]=((((-1.0)*x1020*x1022))+new_r11);
evalcond[3]=((((-1.0)*x1021*x1022))+new_r10);
evalcond[4]=((((-1.0)*x1020*x1024))+new_r01);
evalcond[5]=((((-1.0)*x1021*x1024))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x1024))+x1021+(((-1.0)*new_r10*x1022)));
evalcond[7]=(x1020+(((-1.0)*new_r11*x1022))+(((-1.0)*new_r01*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1025=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x1025.valid){
continue;
}
CheckValue<IkReal> x1026 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1026.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1025.value)))+(x1026.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1027=IKcos(j5);
IkReal x1028=IKsin(j5);
IkReal x1029=((1.0)*gconst42);
if((((1.0)+(((-1.0)*gconst42*x1029)))) < -0.00001)
continue;
IkReal x1030=IKsqrt(((1.0)+(((-1.0)*gconst42*x1029))));
IkReal x1031=((1.0)*x1030);
evalcond[0]=x1028;
evalcond[1]=((-1.0)*x1027);
evalcond[2]=(new_r11+(((-1.0)*x1027*x1029)));
evalcond[3]=((((-1.0)*x1028*x1029))+new_r10);
evalcond[4]=((((-1.0)*x1027*x1031))+new_r01);
evalcond[5]=((((-1.0)*x1028*x1031))+new_r00);
evalcond[6]=(x1028+(((-1.0)*new_r10*x1029))+(((-1.0)*new_r00*x1031)));
evalcond[7]=(x1027+(((-1.0)*new_r11*x1029))+(((-1.0)*new_r01*x1031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x1032.valid){
continue;
}
if((x1032.value) < -0.00001)
continue;
IkReal gconst43=IKsqrt(x1032.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst43))+cj3)))+(IKabs(((-1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst43*gconst43))))) < -0.00001)
continue;
sj3=IKsqrt(((1.0)+(((-1.0)*(gconst43*gconst43)))));
cj3=gconst43;
if( (gconst43) < -1-IKFAST_SINCOS_THRESH || (gconst43) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKacos(gconst43);
CheckValue<IkReal> x1033=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x1033.valid){
continue;
}
if((x1033.value) < -0.00001)
continue;
IkReal gconst43=IKsqrt(x1033.value);
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst43*gconst43))))) < -0.00001)
continue;
CheckValue<IkReal> x1034=IKPowWithIntegerCheck(gconst43,-1);
if(!x1034.valid){
continue;
}
if( IKabs((((gconst43*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst43*gconst43)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x1034.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst43*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst43*gconst43))))))))))+IKsqr((new_r11*(x1034.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((gconst43*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst43*gconst43))))))))), (new_r11*(x1034.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1035=IKcos(j5);
IkReal x1036=IKsin(j5);
IkReal x1037=((1.0)*gconst43);
if((((1.0)+(((-1.0)*gconst43*x1037)))) < -0.00001)
continue;
IkReal x1038=IKsqrt(((1.0)+(((-1.0)*gconst43*x1037))));
evalcond[0]=x1036;
evalcond[1]=((-1.0)*x1035);
evalcond[2]=((((-1.0)*x1035*x1037))+new_r11);
evalcond[3]=((((-1.0)*x1036*x1037))+new_r10);
evalcond[4]=(((x1035*x1038))+new_r01);
evalcond[5]=(((x1036*x1038))+new_r00);
evalcond[6]=(x1036+(((-1.0)*new_r10*x1037))+((new_r00*x1038)));
evalcond[7]=(x1035+(((-1.0)*new_r11*x1037))+((new_r01*x1038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1039=IKPowWithIntegerCheck(IKsign(gconst43),-1);
if(!x1039.valid){
continue;
}
CheckValue<IkReal> x1040 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1040.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1039.value)))+(x1040.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1041=IKcos(j5);
IkReal x1042=IKsin(j5);
IkReal x1043=((1.0)*gconst43);
if((((1.0)+(((-1.0)*gconst43*x1043)))) < -0.00001)
continue;
IkReal x1044=IKsqrt(((1.0)+(((-1.0)*gconst43*x1043))));
evalcond[0]=x1042;
evalcond[1]=((-1.0)*x1041);
evalcond[2]=((((-1.0)*x1041*x1043))+new_r11);
evalcond[3]=((((-1.0)*x1042*x1043))+new_r10);
evalcond[4]=(((x1041*x1044))+new_r01);
evalcond[5]=(((x1042*x1044))+new_r00);
evalcond[6]=(x1042+((new_r00*x1044))+(((-1.0)*new_r10*x1043)));
evalcond[7]=(x1041+((new_r01*x1044))+(((-1.0)*new_r11*x1043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x1045=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x1045.valid){
continue;
}
if((x1045.value) < -0.00001)
continue;
IkReal gconst43=IKsqrt(x1045.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst43))+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst43*gconst43))))) < -0.00001)
continue;
sj3=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst43*gconst43)))))));
cj3=gconst43;
if( (gconst43) < -1-IKFAST_SINCOS_THRESH || (gconst43) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKacos(gconst43)));
CheckValue<IkReal> x1046=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x1046.valid){
continue;
}
if((x1046.value) < -0.00001)
continue;
IkReal gconst43=IKsqrt(x1046.value);
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst43*gconst43))))) < -0.00001)
continue;
CheckValue<IkReal> x1047=IKPowWithIntegerCheck(gconst43,-1);
if(!x1047.valid){
continue;
}
if( IKabs((((gconst43*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst43*gconst43)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x1047.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst43*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst43*gconst43))))))))))+IKsqr((new_r11*(x1047.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((gconst43*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst43*gconst43))))))))), (new_r11*(x1047.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1048=IKcos(j5);
IkReal x1049=IKsin(j5);
IkReal x1050=((1.0)*gconst43);
if((((1.0)+(((-1.0)*gconst43*x1050)))) < -0.00001)
continue;
IkReal x1051=IKsqrt(((1.0)+(((-1.0)*gconst43*x1050))));
IkReal x1052=((1.0)*x1051);
evalcond[0]=x1049;
evalcond[1]=((-1.0)*x1048);
evalcond[2]=((((-1.0)*x1048*x1050))+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x1049*x1050)));
evalcond[4]=((((-1.0)*x1048*x1052))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x1049*x1052)));
evalcond[6]=(x1049+(((-1.0)*new_r00*x1052))+(((-1.0)*new_r10*x1050)));
evalcond[7]=(x1048+(((-1.0)*new_r01*x1052))+(((-1.0)*new_r11*x1050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1053=IKPowWithIntegerCheck(IKsign(gconst43),-1);
if(!x1053.valid){
continue;
}
CheckValue<IkReal> x1054 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1054.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1053.value)))+(x1054.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1055=IKcos(j5);
IkReal x1056=IKsin(j5);
IkReal x1057=((1.0)*gconst43);
if((((1.0)+(((-1.0)*gconst43*x1057)))) < -0.00001)
continue;
IkReal x1058=IKsqrt(((1.0)+(((-1.0)*gconst43*x1057))));
IkReal x1059=((1.0)*x1058);
evalcond[0]=x1056;
evalcond[1]=((-1.0)*x1055);
evalcond[2]=((((-1.0)*x1055*x1057))+new_r11);
evalcond[3]=((((-1.0)*x1056*x1057))+new_r10);
evalcond[4]=((((-1.0)*x1055*x1059))+new_r01);
evalcond[5]=((((-1.0)*x1056*x1059))+new_r00);
evalcond[6]=(x1056+(((-1.0)*new_r00*x1059))+(((-1.0)*new_r10*x1057)));
evalcond[7]=(x1055+(((-1.0)*new_r01*x1059))+(((-1.0)*new_r11*x1057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1060=(new_r00*sj3);
CheckValue<IkReal> x1061=IKPowWithIntegerCheck(sj3,-1);
if(!x1061.valid){
continue;
}
if( IKabs((((cj3*new_r10))+(((-1.0)*x1060)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1061.value)*((((cj3*new_r22*x1060))+(((-1.0)*new_r01))+(((-1.0)*new_r10*new_r22*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r10))+(((-1.0)*x1060))))+IKsqr(((x1061.value)*((((cj3*new_r22*x1060))+(((-1.0)*new_r01))+(((-1.0)*new_r10*new_r22*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r10))+(((-1.0)*x1060))), ((x1061.value)*((((cj3*new_r22*x1060))+(((-1.0)*new_r01))+(((-1.0)*new_r10*new_r22*(cj3*cj3)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x1062=IKsin(j5);
IkReal x1063=IKcos(j5);
IkReal x1064=((1.0)*cj3);
IkReal x1065=(cj3*new_r00);
IkReal x1066=(cj3*new_r22);
IkReal x1067=(new_r22*sj3);
IkReal x1068=(new_r22*x1063);
IkReal x1069=(sj3*x1062);
evalcond[0]=((((-1.0)*new_r10*x1064))+x1062+((new_r00*sj3)));
evalcond[1]=(x1063+((new_r01*sj3))+(((-1.0)*new_r11*x1064)));
evalcond[2]=(((new_r11*sj3))+((cj3*new_r01))+((new_r22*x1062)));
evalcond[3]=(x1062+((new_r01*x1066))+((new_r11*x1067)));
evalcond[4]=(((sj3*x1063))+((x1062*x1066))+new_r01);
evalcond[5]=(x1065+((new_r10*sj3))+(((-1.0)*x1068)));
evalcond[6]=(x1069+new_r00+(((-1.0)*x1064*x1068)));
evalcond[7]=((((-1.0)*x1063*x1064))+((x1062*x1067))+new_r11);
evalcond[8]=(((new_r10*x1067))+(((-1.0)*x1063))+((new_r22*x1065)));
evalcond[9]=((((-1.0)*x1062*x1064))+new_r10+(((-1.0)*x1063*x1067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1070=((1.0)*new_r01);
CheckValue<IkReal> x1071=IKPowWithIntegerCheck(new_r22,-1);
if(!x1071.valid){
continue;
}
if( IKabs(((x1071.value)*(((((-1.0)*new_r11*sj3))+(((-1.0)*cj3*x1070)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x1070))+((cj3*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1071.value)*(((((-1.0)*new_r11*sj3))+(((-1.0)*cj3*x1070))))))+IKsqr(((((-1.0)*sj3*x1070))+((cj3*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1071.value)*(((((-1.0)*new_r11*sj3))+(((-1.0)*cj3*x1070))))), ((((-1.0)*sj3*x1070))+((cj3*new_r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x1072=IKsin(j5);
IkReal x1073=IKcos(j5);
IkReal x1074=((1.0)*cj3);
IkReal x1075=(cj3*new_r00);
IkReal x1076=(cj3*new_r22);
IkReal x1077=(new_r22*sj3);
IkReal x1078=(new_r22*x1073);
IkReal x1079=(sj3*x1072);
evalcond[0]=(x1072+((new_r00*sj3))+(((-1.0)*new_r10*x1074)));
evalcond[1]=((((-1.0)*new_r11*x1074))+x1073+((new_r01*sj3)));
evalcond[2]=(((new_r11*sj3))+((cj3*new_r01))+((new_r22*x1072)));
evalcond[3]=(x1072+((new_r01*x1076))+((new_r11*x1077)));
evalcond[4]=(((sj3*x1073))+((x1072*x1076))+new_r01);
evalcond[5]=(x1075+((new_r10*sj3))+(((-1.0)*x1078)));
evalcond[6]=((((-1.0)*x1074*x1078))+x1079+new_r00);
evalcond[7]=((((-1.0)*x1073*x1074))+((x1072*x1077))+new_r11);
evalcond[8]=(((new_r10*x1077))+(((-1.0)*x1073))+((new_r22*x1075)));
evalcond[9]=((((-1.0)*x1072*x1074))+new_r10+(((-1.0)*x1073*x1077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1080=cj3*cj3;
IkReal x1081=(cj3*new_r22);
CheckValue<IkReal> x1082 = IKatan2WithCheck(IkReal((((new_r01*x1081))+((new_r00*sj3)))),IkReal((((new_r01*sj3))+(((-1.0)*new_r00*x1081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1082.valid){
continue;
}
CheckValue<IkReal> x1083=IKPowWithIntegerCheck(IKsign(((-1.0)+x1080+(((-1.0)*x1080*(new_r22*new_r22))))),-1);
if(!x1083.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1082.value)+(((1.5707963267949)*(x1083.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x1084=IKsin(j5);
IkReal x1085=IKcos(j5);
IkReal x1086=((1.0)*cj3);
IkReal x1087=(cj3*new_r00);
IkReal x1088=(cj3*new_r22);
IkReal x1089=(new_r22*sj3);
IkReal x1090=(new_r22*x1085);
IkReal x1091=(sj3*x1084);
evalcond[0]=(x1084+(((-1.0)*new_r10*x1086))+((new_r00*sj3)));
evalcond[1]=(x1085+((new_r01*sj3))+(((-1.0)*new_r11*x1086)));
evalcond[2]=(((new_r11*sj3))+((new_r22*x1084))+((cj3*new_r01)));
evalcond[3]=(x1084+((new_r01*x1088))+((new_r11*x1089)));
evalcond[4]=(((sj3*x1085))+new_r01+((x1084*x1088)));
evalcond[5]=(x1087+((new_r10*sj3))+(((-1.0)*x1090)));
evalcond[6]=((((-1.0)*x1086*x1090))+x1091+new_r00);
evalcond[7]=((((-1.0)*x1085*x1086))+new_r11+((x1084*x1089)));
evalcond[8]=(((new_r22*x1087))+(((-1.0)*x1085))+((new_r10*x1089)));
evalcond[9]=((((-1.0)*x1085*x1089))+(((-1.0)*x1084*x1086))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1093=IKPowWithIntegerCheck(sj4,-1);
if(!x1093.valid){
continue;
}
IkReal x1092=x1093.value;
CheckValue<IkReal> x1094=IKPowWithIntegerCheck(new_r12,-1);
if(!x1094.valid){
continue;
}
if( IKabs((x1092*(x1094.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x1092)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1092*(x1094.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))))+IKsqr(((-1.0)*new_r02*x1092))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1092*(x1094.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))), ((-1.0)*new_r02*x1092));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1095=IKcos(j3);
IkReal x1096=IKsin(j3);
IkReal x1097=((1.0)*cj4);
IkReal x1098=(new_r02*x1095);
IkReal x1099=(sj4*x1096);
IkReal x1100=(sj4*x1095);
IkReal x1101=(new_r12*x1096);
evalcond[0]=(x1100+new_r02);
evalcond[1]=(x1099+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1096))+((new_r12*x1095)));
evalcond[3]=(x1101+sj4+x1098);
evalcond[4]=(((cj4*x1098))+((cj4*x1101))+((new_r22*sj4)));
evalcond[5]=((((-1.0)*new_r20*x1097))+((new_r10*x1099))+((new_r00*x1100)));
evalcond[6]=((((-1.0)*new_r21*x1097))+((new_r11*x1099))+((new_r01*x1100)));
evalcond[7]=((1.0)+((sj4*x1098))+(((-1.0)*new_r22*x1097))+((new_r12*x1099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1102=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x1102)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x1102))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x1102))))+IKsqr(((((-1.0)*sj3*x1102))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x1102))), ((((-1.0)*sj3*x1102))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1103=IKsin(j5);
IkReal x1104=IKcos(j5);
IkReal x1105=((1.0)*cj3);
IkReal x1106=(sj3*x1103);
IkReal x1107=((1.0)*x1104);
IkReal x1108=(x1104*x1105);
evalcond[0]=(x1103+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=(x1103+((new_r00*sj3))+(((-1.0)*new_r10*x1105)));
evalcond[2]=(x1104+((new_r01*sj3))+(((-1.0)*new_r11*x1105)));
evalcond[3]=(((sj3*x1104))+new_r01+((cj3*x1103)));
evalcond[4]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x1107)));
evalcond[5]=(x1106+new_r00+(((-1.0)*x1108)));
evalcond[6]=(x1106+new_r11+(((-1.0)*x1108)));
evalcond[7]=((((-1.0)*x1103*x1105))+(((-1.0)*sj3*x1107))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1109=((1.0)*sj3);
if( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x1109)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x1109)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x1109))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x1109))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x1109))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x1109))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1110=IKcos(j5);
IkReal x1111=IKsin(j5);
IkReal x1112=((1.0)*cj3);
IkReal x1113=(sj3*x1110);
IkReal x1114=((1.0)*x1111);
IkReal x1115=(x1111*x1112);
evalcond[0]=(x1110+((new_r10*sj3))+((cj3*new_r00)));
evalcond[1]=(x1111+((new_r00*sj3))+(((-1.0)*new_r10*x1112)));
evalcond[2]=(x1110+((new_r01*sj3))+(((-1.0)*new_r11*x1112)));
evalcond[3]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x1114)));
evalcond[4]=(((sj3*x1111))+new_r00+((cj3*x1110)));
evalcond[5]=(x1113+new_r01+(((-1.0)*x1115)));
evalcond[6]=(x1113+new_r10+(((-1.0)*x1115)));
evalcond[7]=((((-1.0)*sj3*x1114))+new_r11+(((-1.0)*x1110*x1112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1116=IKsin(j5);
IkReal x1117=IKcos(j5);
IkReal x1118=((1.0)*x1117);
evalcond[0]=(x1116+new_r00);
evalcond[1]=(x1117+new_r01);
evalcond[2]=(((sj4*x1116))+new_r21);
evalcond[3]=(((cj4*x1116))+new_r11);
evalcond[4]=(new_r20+(((-1.0)*sj4*x1118)));
evalcond[5]=((((-1.0)*cj4*x1118))+new_r10);
evalcond[6]=(x1116+((cj4*new_r11))+((new_r21*sj4)));
evalcond[7]=(((new_r20*sj4))+((cj4*new_r10))+(((-1.0)*x1118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1119=IKsin(j5);
IkReal x1120=IKcos(j5);
IkReal x1121=((1.0)*cj4);
IkReal x1122=((1.0)*x1120);
evalcond[0]=(((sj4*x1119))+new_r21);
evalcond[1]=(x1119+(((-1.0)*new_r00)));
evalcond[2]=(x1120+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*sj4*x1122))+new_r20);
evalcond[4]=(((cj4*x1119))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x1120*x1121)));
evalcond[6]=(x1119+(((-1.0)*new_r11*x1121))+((new_r21*sj4)));
evalcond[7]=(((new_r20*sj4))+(((-1.0)*new_r10*x1121))+(((-1.0)*x1122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1123=IKcos(j5);
IkReal x1124=IKsin(j5);
IkReal x1125=((1.0)*x1123);
evalcond[0]=(((new_r02*x1123))+new_r20);
evalcond[1]=(x1124+(((-1.0)*new_r10)));
evalcond[2]=(x1123+(((-1.0)*new_r11)));
evalcond[3]=(((cj4*x1124))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x1124))+new_r21);
evalcond[5]=((((-1.0)*cj4*x1125))+new_r00);
evalcond[6]=(x1124+((cj4*new_r01))+((new_r21*sj4)));
evalcond[7]=(((new_r20*sj4))+((cj4*new_r00))+(((-1.0)*x1125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1126=IKsin(j5);
IkReal x1127=IKcos(j5);
IkReal x1128=((1.0)*new_r00);
IkReal x1129=((1.0)*new_r01);
IkReal x1130=((1.0)*x1127);
evalcond[0]=(x1126+new_r10);
evalcond[1]=(x1127+new_r11);
evalcond[2]=(((new_r02*x1126))+new_r21);
evalcond[3]=((((-1.0)*new_r02*x1130))+new_r20);
evalcond[4]=(((cj4*x1126))+(((-1.0)*x1129)));
evalcond[5]=((((-1.0)*cj4*x1130))+(((-1.0)*x1128)));
evalcond[6]=(x1126+(((-1.0)*cj4*x1129))+((new_r21*sj4)));
evalcond[7]=(((new_r20*sj4))+(((-1.0)*cj4*x1128))+(((-1.0)*x1130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1132=IKPowWithIntegerCheck(sj4,-1);
if(!x1132.valid){
continue;
}
IkReal x1131=x1132.value;
CheckValue<IkReal> x1133=IKPowWithIntegerCheck(cj3,-1);
if(!x1133.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1131)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1131*(x1133.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1131))+IKsqr((x1131*(x1133.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21*x1131), (x1131*(x1133.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x1134=IKsin(j5);
IkReal x1135=IKcos(j5);
IkReal x1136=(cj3*new_r00);
IkReal x1137=(cj3*cj4);
IkReal x1138=(cj4*sj3);
IkReal x1139=((1.0)*cj3);
IkReal x1140=(sj3*x1134);
IkReal x1141=((1.0)*x1135);
evalcond[0]=(((sj4*x1134))+new_r21);
evalcond[1]=((((-1.0)*sj4*x1141))+new_r20);
evalcond[2]=(x1134+(((-1.0)*new_r10*x1139))+((new_r00*sj3)));
evalcond[3]=(x1135+((new_r01*sj3))+(((-1.0)*new_r11*x1139)));
evalcond[4]=(((new_r11*sj3))+((cj4*x1134))+((cj3*new_r01)));
evalcond[5]=(((x1134*x1137))+new_r01+((sj3*x1135)));
evalcond[6]=(x1136+((new_r10*sj3))+(((-1.0)*cj4*x1141)));
evalcond[7]=(x1140+(((-1.0)*x1137*x1141))+new_r00);
evalcond[8]=(((x1134*x1138))+(((-1.0)*x1135*x1139))+new_r11);
evalcond[9]=((((-1.0)*x1134*x1139))+new_r10+(((-1.0)*x1138*x1141)));
evalcond[10]=(x1134+((new_r11*x1138))+((new_r01*x1137))+((new_r21*sj4)));
evalcond[11]=(((new_r20*sj4))+(((-1.0)*x1141))+((cj4*x1136))+((new_r10*x1138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1143=IKPowWithIntegerCheck(sj4,-1);
if(!x1143.valid){
continue;
}
IkReal x1142=x1143.value;
CheckValue<IkReal> x1144=IKPowWithIntegerCheck(sj3,-1);
if(!x1144.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1142)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1142*(x1144.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1142))+IKsqr((x1142*(x1144.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21*x1142), (x1142*(x1144.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x1145=IKsin(j5);
IkReal x1146=IKcos(j5);
IkReal x1147=(cj3*new_r00);
IkReal x1148=(cj3*cj4);
IkReal x1149=(cj4*sj3);
IkReal x1150=((1.0)*cj3);
IkReal x1151=(sj3*x1145);
IkReal x1152=((1.0)*x1146);
evalcond[0]=(((sj4*x1145))+new_r21);
evalcond[1]=((((-1.0)*sj4*x1152))+new_r20);
evalcond[2]=(x1145+((new_r00*sj3))+(((-1.0)*new_r10*x1150)));
evalcond[3]=(x1146+((new_r01*sj3))+(((-1.0)*new_r11*x1150)));
evalcond[4]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x1145)));
evalcond[5]=(((x1145*x1148))+((sj3*x1146))+new_r01);
evalcond[6]=(x1147+((new_r10*sj3))+(((-1.0)*cj4*x1152)));
evalcond[7]=(x1151+(((-1.0)*x1148*x1152))+new_r00);
evalcond[8]=(((x1145*x1149))+(((-1.0)*x1146*x1150))+new_r11);
evalcond[9]=((((-1.0)*x1149*x1152))+new_r10+(((-1.0)*x1145*x1150)));
evalcond[10]=(x1145+((new_r01*x1148))+((new_r21*sj4))+((new_r11*x1149)));
evalcond[11]=(((new_r20*sj4))+(((-1.0)*x1152))+((cj4*x1147))+((new_r10*x1149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1153 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1153.valid){
continue;
}
CheckValue<IkReal> x1154=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1154.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1153.value)+(((1.5707963267949)*(x1154.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x1155=IKsin(j5);
IkReal x1156=IKcos(j5);
IkReal x1157=(cj3*new_r00);
IkReal x1158=(cj3*cj4);
IkReal x1159=(cj4*sj3);
IkReal x1160=((1.0)*cj3);
IkReal x1161=(sj3*x1155);
IkReal x1162=((1.0)*x1156);
evalcond[0]=(new_r21+((sj4*x1155)));
evalcond[1]=((((-1.0)*sj4*x1162))+new_r20);
evalcond[2]=(x1155+(((-1.0)*new_r10*x1160))+((new_r00*sj3)));
evalcond[3]=(x1156+((new_r01*sj3))+(((-1.0)*new_r11*x1160)));
evalcond[4]=(((new_r11*sj3))+((cj4*x1155))+((cj3*new_r01)));
evalcond[5]=(((sj3*x1156))+new_r01+((x1155*x1158)));
evalcond[6]=((((-1.0)*cj4*x1162))+x1157+((new_r10*sj3)));
evalcond[7]=(x1161+(((-1.0)*x1158*x1162))+new_r00);
evalcond[8]=((((-1.0)*x1156*x1160))+new_r11+((x1155*x1159)));
evalcond[9]=((((-1.0)*x1159*x1162))+(((-1.0)*x1155*x1160))+new_r10);
evalcond[10]=(((new_r11*x1159))+x1155+((new_r01*x1158))+((new_r21*sj4)));
evalcond[11]=(((new_r10*x1159))+((new_r20*sj4))+((cj4*x1157))+(((-1.0)*x1162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1163.valid){
continue;
}
CheckValue<IkReal> x1164 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1164.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1163.value)))+(x1164.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1165=IKcos(j3);
IkReal x1166=IKsin(j3);
IkReal x1167=((1.0)*cj4);
IkReal x1168=(new_r02*x1165);
IkReal x1169=(sj4*x1166);
IkReal x1170=(sj4*x1165);
IkReal x1171=(new_r12*x1166);
evalcond[0]=(x1170+new_r02);
evalcond[1]=(x1169+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1166))+((new_r12*x1165)));
evalcond[3]=(x1168+x1171+sj4);
evalcond[4]=(((cj4*x1171))+((cj4*x1168))+((new_r22*sj4)));
evalcond[5]=((((-1.0)*new_r20*x1167))+((new_r10*x1169))+((new_r00*x1170)));
evalcond[6]=(((new_r11*x1169))+((new_r01*x1170))+(((-1.0)*new_r21*x1167)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x1167))+((sj4*x1168))+((new_r12*x1169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1172=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x1172))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x1172))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x1172))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x1172))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x1172))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x1172))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1173=IKsin(j5);
IkReal x1174=IKcos(j5);
IkReal x1175=((1.0)*cj3);
IkReal x1176=(sj3*x1173);
IkReal x1177=((1.0)*x1174);
IkReal x1178=(x1174*x1175);
evalcond[0]=(x1173+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=(x1173+(((-1.0)*new_r10*x1175))+((new_r00*sj3)));
evalcond[2]=(x1174+(((-1.0)*new_r11*x1175))+((new_r01*sj3)));
evalcond[3]=(((sj3*x1174))+((cj3*x1173))+new_r01);
evalcond[4]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x1177)));
evalcond[5]=(x1176+(((-1.0)*x1178))+new_r00);
evalcond[6]=(x1176+(((-1.0)*x1178))+new_r11);
evalcond[7]=((((-1.0)*x1173*x1175))+(((-1.0)*sj3*x1177))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1179=((1.0)*sj3);
if( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x1179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x1179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x1179))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x1179))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x1179))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x1179))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1180=IKcos(j5);
IkReal x1181=IKsin(j5);
IkReal x1182=((1.0)*cj3);
IkReal x1183=(sj3*x1180);
IkReal x1184=((1.0)*x1181);
IkReal x1185=(x1181*x1182);
evalcond[0]=(x1180+((new_r10*sj3))+((cj3*new_r00)));
evalcond[1]=(x1181+((new_r00*sj3))+(((-1.0)*new_r10*x1182)));
evalcond[2]=(x1180+((new_r01*sj3))+(((-1.0)*new_r11*x1182)));
evalcond[3]=(((new_r11*sj3))+(((-1.0)*x1184))+((cj3*new_r01)));
evalcond[4]=(((sj3*x1181))+new_r00+((cj3*x1180)));
evalcond[5]=(x1183+(((-1.0)*x1185))+new_r01);
evalcond[6]=(x1183+(((-1.0)*x1185))+new_r10);
evalcond[7]=((((-1.0)*x1180*x1182))+new_r11+(((-1.0)*sj3*x1184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1186=IKsin(j5);
IkReal x1187=IKcos(j5);
IkReal x1188=((1.0)*x1187);
evalcond[0]=(x1186+new_r00);
evalcond[1]=(x1187+new_r01);
evalcond[2]=(((sj4*x1186))+new_r21);
evalcond[3]=(((cj4*x1186))+new_r11);
evalcond[4]=((((-1.0)*sj4*x1188))+new_r20);
evalcond[5]=((((-1.0)*cj4*x1188))+new_r10);
evalcond[6]=(x1186+((cj4*new_r11))+((new_r21*sj4)));
evalcond[7]=(((new_r20*sj4))+((cj4*new_r10))+(((-1.0)*x1188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1189=IKsin(j5);
IkReal x1190=IKcos(j5);
IkReal x1191=((1.0)*cj4);
IkReal x1192=((1.0)*x1190);
evalcond[0]=(((sj4*x1189))+new_r21);
evalcond[1]=(x1189+(((-1.0)*new_r00)));
evalcond[2]=(x1190+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*sj4*x1192))+new_r20);
evalcond[4]=(((cj4*x1189))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x1190*x1191))+(((-1.0)*new_r10)));
evalcond[6]=(x1189+(((-1.0)*new_r11*x1191))+((new_r21*sj4)));
evalcond[7]=(((new_r20*sj4))+(((-1.0)*x1192))+(((-1.0)*new_r10*x1191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1193=IKcos(j5);
IkReal x1194=IKsin(j5);
IkReal x1195=((1.0)*x1193);
evalcond[0]=(((new_r02*x1193))+new_r20);
evalcond[1]=(x1194+(((-1.0)*new_r10)));
evalcond[2]=(x1193+(((-1.0)*new_r11)));
evalcond[3]=(((cj4*x1194))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x1194))+new_r21);
evalcond[5]=((((-1.0)*cj4*x1195))+new_r00);
evalcond[6]=(x1194+((cj4*new_r01))+((new_r21*sj4)));
evalcond[7]=(((new_r20*sj4))+((cj4*new_r00))+(((-1.0)*x1195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1196=IKsin(j5);
IkReal x1197=IKcos(j5);
IkReal x1198=((1.0)*new_r00);
IkReal x1199=((1.0)*new_r01);
IkReal x1200=((1.0)*x1197);
evalcond[0]=(x1196+new_r10);
evalcond[1]=(x1197+new_r11);
evalcond[2]=(((new_r02*x1196))+new_r21);
evalcond[3]=((((-1.0)*new_r02*x1200))+new_r20);
evalcond[4]=(((cj4*x1196))+(((-1.0)*x1199)));
evalcond[5]=((((-1.0)*x1198))+(((-1.0)*cj4*x1200)));
evalcond[6]=(x1196+(((-1.0)*cj4*x1199))+((new_r21*sj4)));
evalcond[7]=((((-1.0)*cj4*x1198))+((new_r20*sj4))+(((-1.0)*x1200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1202=IKPowWithIntegerCheck(sj4,-1);
if(!x1202.valid){
continue;
}
IkReal x1201=x1202.value;
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(cj3,-1);
if(!x1203.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1201)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1201*(x1203.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1201))+IKsqr((x1201*(x1203.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21*x1201), (x1201*(x1203.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x1204=IKsin(j5);
IkReal x1205=IKcos(j5);
IkReal x1206=(cj3*new_r00);
IkReal x1207=(cj3*cj4);
IkReal x1208=(cj4*sj3);
IkReal x1209=((1.0)*cj3);
IkReal x1210=(sj3*x1204);
IkReal x1211=((1.0)*x1205);
evalcond[0]=(((sj4*x1204))+new_r21);
evalcond[1]=((((-1.0)*sj4*x1211))+new_r20);
evalcond[2]=(x1204+(((-1.0)*new_r10*x1209))+((new_r00*sj3)));
evalcond[3]=(x1205+(((-1.0)*new_r11*x1209))+((new_r01*sj3)));
evalcond[4]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x1204)));
evalcond[5]=(((x1204*x1207))+((sj3*x1205))+new_r01);
evalcond[6]=(x1206+((new_r10*sj3))+(((-1.0)*cj4*x1211)));
evalcond[7]=(x1210+(((-1.0)*x1207*x1211))+new_r00);
evalcond[8]=(((x1204*x1208))+(((-1.0)*x1205*x1209))+new_r11);
evalcond[9]=((((-1.0)*x1204*x1209))+(((-1.0)*x1208*x1211))+new_r10);
evalcond[10]=(((new_r11*x1208))+x1204+((new_r01*x1207))+((new_r21*sj4)));
evalcond[11]=(((new_r10*x1208))+((new_r20*sj4))+(((-1.0)*x1211))+((cj4*x1206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1213=IKPowWithIntegerCheck(sj4,-1);
if(!x1213.valid){
continue;
}
IkReal x1212=x1213.value;
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(sj3,-1);
if(!x1214.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1212)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1212*(x1214.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1212))+IKsqr((x1212*(x1214.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21*x1212), (x1212*(x1214.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x1215=IKsin(j5);
IkReal x1216=IKcos(j5);
IkReal x1217=(cj3*new_r00);
IkReal x1218=(cj3*cj4);
IkReal x1219=(cj4*sj3);
IkReal x1220=((1.0)*cj3);
IkReal x1221=(sj3*x1215);
IkReal x1222=((1.0)*x1216);
evalcond[0]=(((sj4*x1215))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*sj4*x1222)));
evalcond[2]=(x1215+((new_r00*sj3))+(((-1.0)*new_r10*x1220)));
evalcond[3]=(x1216+((new_r01*sj3))+(((-1.0)*new_r11*x1220)));
evalcond[4]=(((new_r11*sj3))+((cj4*x1215))+((cj3*new_r01)));
evalcond[5]=(((sj3*x1216))+new_r01+((x1215*x1218)));
evalcond[6]=(x1217+((new_r10*sj3))+(((-1.0)*cj4*x1222)));
evalcond[7]=(x1221+(((-1.0)*x1218*x1222))+new_r00);
evalcond[8]=((((-1.0)*x1216*x1220))+new_r11+((x1215*x1219)));
evalcond[9]=((((-1.0)*x1215*x1220))+new_r10+(((-1.0)*x1219*x1222)));
evalcond[10]=(x1215+((new_r11*x1219))+((new_r01*x1218))+((new_r21*sj4)));
evalcond[11]=(((new_r10*x1219))+((new_r20*sj4))+(((-1.0)*x1222))+((cj4*x1217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1223 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1223.valid){
continue;
}
CheckValue<IkReal> x1224=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1224.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1223.value)+(((1.5707963267949)*(x1224.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x1225=IKsin(j5);
IkReal x1226=IKcos(j5);
IkReal x1227=(cj3*new_r00);
IkReal x1228=(cj3*cj4);
IkReal x1229=(cj4*sj3);
IkReal x1230=((1.0)*cj3);
IkReal x1231=(sj3*x1225);
IkReal x1232=((1.0)*x1226);
evalcond[0]=(((sj4*x1225))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*sj4*x1232)));
evalcond[2]=(x1225+((new_r00*sj3))+(((-1.0)*new_r10*x1230)));
evalcond[3]=(x1226+((new_r01*sj3))+(((-1.0)*new_r11*x1230)));
evalcond[4]=(((new_r11*sj3))+((cj4*x1225))+((cj3*new_r01)));
evalcond[5]=(((sj3*x1226))+((x1225*x1228))+new_r01);
evalcond[6]=(x1227+((new_r10*sj3))+(((-1.0)*cj4*x1232)));
evalcond[7]=(x1231+(((-1.0)*x1228*x1232))+new_r00);
evalcond[8]=((((-1.0)*x1226*x1230))+((x1225*x1229))+new_r11);
evalcond[9]=((((-1.0)*x1225*x1230))+(((-1.0)*x1229*x1232))+new_r10);
evalcond[10]=(x1225+((new_r11*x1229))+((new_r01*x1228))+((new_r21*sj4)));
evalcond[11]=(((new_r20*sj4))+(((-1.0)*x1232))+((cj4*x1227))+((new_r10*x1229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1233 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1233.valid){
continue;
}
CheckValue<IkReal> x1234=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1234.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1233.value)+(((1.5707963267949)*(x1234.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=(((sj4*(IKsin(j5))))+new_r21);
evalcond[1]=((((-1.0)*sj4*(IKcos(j5))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=new_r12;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x1235=((1.0)*new_r11);
IkReal x1236=((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r10*x1235)));
j3eval[0]=x1236;
j3eval[1]=((IKabs((((new_r10*sj5))+((new_r01*sj5)))))+(IKabs((((new_r00*sj5))+(((-1.0)*sj5*x1235))))));
j3eval[2]=IKsign(x1236);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x1237=((((-1.0)*(new_r01*new_r01)))+(((-1.0)*(new_r11*new_r11))));
j3eval[0]=x1237;
j3eval[1]=((IKabs((((new_r11*sj5))+((cj5*new_r01)))))+(IKabs((((new_r01*sj5))+(((-1.0)*cj5*new_r11))))));
j3eval[2]=IKsign(x1237);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x1238=((1.0)*new_r11);
IkReal x1239=((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*x1238)));
j3eval[0]=x1239;
j3eval[1]=IKsign(x1239);
j3eval[2]=((IKabs(((1.0)+(((-1.0)*(cj5*cj5)))+(((-1.0)*new_r00*x1238)))))+(IKabs((((new_r00*new_r01))+((cj5*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1240=((-1.0)*new_r01);
IkReal x1242 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1242)==0){
continue;
}
IkReal x1241=pow(x1242,-0.5);
CheckValue<IkReal> x1243 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1240),IKFAST_ATAN2_MAGTHRESH);
if(!x1243.valid){
continue;
}
IkReal gconst24=((-1.0)*(x1243.value));
IkReal gconst25=(new_r11*x1241);
IkReal gconst26=(x1240*x1241);
CheckValue<IkReal> x1244 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1244.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1244.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x1245=((-1.0)*new_r01);
CheckValue<IkReal> x1248 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1245),IKFAST_ATAN2_MAGTHRESH);
if(!x1248.valid){
continue;
}
IkReal x1246=((-1.0)*(x1248.value));
IkReal x1247=x1241;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst25;
cj5=gconst26;
j5=x1246;
IkReal gconst24=x1246;
IkReal gconst25=(new_r11*x1247);
IkReal gconst26=(x1245*x1247);
IkReal x1249=new_r11*new_r11;
IkReal x1250=(new_r10*new_r11);
IkReal x1251=((((-1.0)*new_r00*new_r01))+(((-1.0)*x1250)));
IkReal x1252=x1241;
IkReal x1253=(new_r11*x1252);
j3eval[0]=x1251;
j3eval[1]=IKsign(x1251);
j3eval[2]=((IKabs((((new_r01*x1253))+((x1250*x1252)))))+(IKabs((((new_r00*x1253))+(((-1.0)*x1249*x1252))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1254=((-1.0)*new_r01);
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1254),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
IkReal x1255=((-1.0)*(x1257.value));
IkReal x1256=x1241;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst25;
cj5=gconst26;
j5=x1255;
IkReal gconst24=x1255;
IkReal gconst25=(new_r11*x1256);
IkReal gconst26=(x1254*x1256);
IkReal x1258=new_r11*new_r11;
CheckValue<IkReal> x1261=IKPowWithIntegerCheck((x1258+(new_r01*new_r01)),-1);
if(!x1261.valid){
continue;
}
IkReal x1259=x1261.value;
IkReal x1260=(x1258*x1259);
j3eval[0]=((IKabs((x1260+((new_r01*new_r10)))))+(IKabs((((new_r01*new_r11*x1259))+((new_r00*x1259*(new_r01*new_r01*new_r01)))+((new_r00*new_r01*x1260))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1262=((-1.0)*new_r01);
CheckValue<IkReal> x1265 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1262),IKFAST_ATAN2_MAGTHRESH);
if(!x1265.valid){
continue;
}
IkReal x1263=((-1.0)*(x1265.value));
IkReal x1264=x1241;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst25;
cj5=gconst26;
j5=x1263;
IkReal gconst24=x1263;
IkReal gconst25=(new_r11*x1264);
IkReal gconst26=(x1262*x1264);
IkReal x1266=new_r01*new_r01;
IkReal x1267=new_r11*new_r11;
CheckValue<IkReal> x1274=IKPowWithIntegerCheck((x1267+x1266),-1);
if(!x1274.valid){
continue;
}
IkReal x1268=x1274.value;
IkReal x1269=(x1267*x1268);
CheckValue<IkReal> x1275=IKPowWithIntegerCheck(((((-1.0)*x1267))+(((-1.0)*x1266))),-1);
if(!x1275.valid){
continue;
}
IkReal x1270=x1275.value;
IkReal x1271=((1.0)*x1270);
IkReal x1272=(new_r11*x1271);
IkReal x1273=(new_r01*x1271);
j3eval[0]=((IKabs(((((-1.0)*new_r01*x1272*(new_r11*new_r11)))+(((-1.0)*x1272*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x1272)))))+(IKabs((((x1266*x1269))+((x1268*(x1266*x1266)))+(((-1.0)*x1269))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1276=IKPowWithIntegerCheck(gconst26,-1);
if(!x1276.valid){
continue;
}
sj3array[0]=(new_r10*(x1276.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1277=IKcos(j3);
IkReal x1278=IKsin(j3);
IkReal x1279=((-1.0)*x1277);
evalcond[0]=(new_r01*x1277);
evalcond[1]=(new_r10*x1279);
evalcond[2]=(gconst26*x1279);
evalcond[3]=(((new_r01*x1278))+gconst26);
evalcond[4]=(new_r01+((gconst26*x1278)));
evalcond[5]=(((new_r10*x1278))+(((-1.0)*gconst26)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst25;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x1280=((-1.0)*new_r01);
CheckValue<IkReal> x1282 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1280),IKFAST_ATAN2_MAGTHRESH);
if(!x1282.valid){
continue;
}
IkReal x1281=((-1.0)*(x1282.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst25;
cj5=gconst26;
j5=x1281;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst24=x1281;
IkReal gconst25=new_r11;
IkReal gconst26=x1280;
j3eval[0]=-1.0;
j3eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x1283=((-1.0)*new_r01);
CheckValue<IkReal> x1285 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1283),IKFAST_ATAN2_MAGTHRESH);
if(!x1285.valid){
continue;
}
IkReal x1284=((-1.0)*(x1285.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst25;
cj5=gconst26;
j5=x1284;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst24=x1284;
IkReal gconst25=new_r11;
IkReal gconst26=x1283;
j3eval[0]=-1.0;
j3eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x1286=((-1.0)*new_r01);
CheckValue<IkReal> x1288 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x1286),IKFAST_ATAN2_MAGTHRESH);
if(!x1288.valid){
continue;
}
IkReal x1287=((-1.0)*(x1288.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst25;
cj5=gconst26;
j5=x1287;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst24=x1287;
IkReal gconst25=new_r11;
IkReal gconst26=x1286;
j3eval[0]=1.0;
j3eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j3eval[2]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1289=((1.0)*new_r01);
CheckValue<IkReal> x1290=IKPowWithIntegerCheck(IKsign((((gconst25*new_r11))+(((-1.0)*gconst26*x1289)))),-1);
if(!x1290.valid){
continue;
}
CheckValue<IkReal> x1291 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst25*gconst25))))),IkReal((((gconst25*gconst26))+(((-1.0)*new_r11*x1289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1291.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1290.value)))+(x1291.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1292=IKcos(j3);
IkReal x1293=IKsin(j3);
IkReal x1294=(gconst25*x1293);
IkReal x1295=((1.0)*x1292);
IkReal x1296=(gconst26*x1293);
IkReal x1297=(gconst26*x1295);
evalcond[0]=(gconst25+((new_r11*x1293))+((new_r01*x1292)));
evalcond[1]=(x1296+((gconst25*x1292))+new_r01);
evalcond[2]=(x1294+(((-1.0)*x1297)));
evalcond[3]=((((-1.0)*new_r11*x1295))+gconst26+((new_r01*x1293)));
evalcond[4]=(x1294+(((-1.0)*x1297))+new_r11);
evalcond[5]=((((-1.0)*x1296))+(((-1.0)*gconst25*x1295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1298 = IKatan2WithCheck(IkReal((gconst26*new_r01)),IkReal((gconst25*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1298.valid){
continue;
}
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst25*gconst25)))+(((-1.0)*(gconst26*gconst26))))),-1);
if(!x1299.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1298.value)+(((1.5707963267949)*(x1299.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1300=IKcos(j3);
IkReal x1301=IKsin(j3);
IkReal x1302=(gconst25*x1301);
IkReal x1303=((1.0)*x1300);
IkReal x1304=(gconst26*x1301);
IkReal x1305=(gconst26*x1303);
evalcond[0]=(gconst25+((new_r11*x1301))+((new_r01*x1300)));
evalcond[1]=(x1304+new_r01+((gconst25*x1300)));
evalcond[2]=(x1302+(((-1.0)*x1305)));
evalcond[3]=(gconst26+((new_r01*x1301))+(((-1.0)*new_r11*x1303)));
evalcond[4]=(x1302+(((-1.0)*x1305))+new_r11);
evalcond[5]=((((-1.0)*gconst25*x1303))+(((-1.0)*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1306 = IKatan2WithCheck(IkReal(gconst25*gconst25),IkReal(((-1.0)*gconst25*gconst26)),IKFAST_ATAN2_MAGTHRESH);
if(!x1306.valid){
continue;
}
CheckValue<IkReal> x1307=IKPowWithIntegerCheck(IKsign((((gconst26*new_r01))+(((-1.0)*gconst25*new_r11)))),-1);
if(!x1307.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1306.value)+(((1.5707963267949)*(x1307.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1308=IKcos(j3);
IkReal x1309=IKsin(j3);
IkReal x1310=(gconst25*x1309);
IkReal x1311=((1.0)*x1308);
IkReal x1312=(gconst26*x1309);
IkReal x1313=(gconst26*x1311);
evalcond[0]=(gconst25+((new_r11*x1309))+((new_r01*x1308)));
evalcond[1]=(x1312+new_r01+((gconst25*x1308)));
evalcond[2]=(x1310+(((-1.0)*x1313)));
evalcond[3]=((((-1.0)*new_r11*x1311))+gconst26+((new_r01*x1309)));
evalcond[4]=(x1310+(((-1.0)*x1313))+new_r11);
evalcond[5]=((((-1.0)*gconst25*x1311))+(((-1.0)*x1312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x1315 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1315.valid){
continue;
}
IkReal x1314=((-1.0)*(x1315.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst25;
cj5=gconst26;
j5=x1314;
new_r01=0;
new_r10=0;
IkReal gconst24=x1314;
IkReal x1316 = new_r11*new_r11;
if(IKabs(x1316)==0){
continue;
}
IkReal gconst25=(new_r11*(pow(x1316,-0.5)));
IkReal gconst26=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x1318 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1318.valid){
continue;
}
IkReal x1317=((-1.0)*(x1318.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst25;
cj5=gconst26;
j5=x1317;
new_r01=0;
new_r10=0;
IkReal gconst24=x1317;
IkReal x1319 = new_r11*new_r11;
if(IKabs(x1319)==0){
continue;
}
IkReal gconst25=(new_r11*(pow(x1319,-0.5)));
IkReal gconst26=0;
j3eval[0]=new_r11;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1320=IKPowWithIntegerCheck(gconst25,-1);
if(!x1320.valid){
continue;
}
sj3array[0]=((-1.0)*new_r00*(x1320.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1321=IKcos(j3);
IkReal x1322=IKsin(j3);
evalcond[0]=(gconst25*x1321);
evalcond[1]=(new_r00*x1321);
evalcond[2]=((-1.0)*new_r11*x1321);
evalcond[3]=(((new_r00*x1322))+gconst25);
evalcond[4]=(gconst25+((new_r11*x1322)));
evalcond[5]=(new_r11+((gconst25*x1322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1323=IKPowWithIntegerCheck(new_r11,-1);
if(!x1323.valid){
continue;
}
sj3array[0]=((-1.0)*gconst25*(x1323.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1324=IKcos(j3);
IkReal x1325=IKsin(j3);
IkReal x1326=(gconst25*x1325);
evalcond[0]=(gconst25*x1324);
evalcond[1]=(new_r00*x1324);
evalcond[2]=((-1.0)*new_r11*x1324);
evalcond[3]=(((new_r00*x1325))+gconst25);
evalcond[4]=(x1326+new_r00);
evalcond[5]=(x1326+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1327=IKPowWithIntegerCheck(new_r00,-1);
if(!x1327.valid){
continue;
}
sj3array[0]=((-1.0)*gconst25*(x1327.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1328=IKcos(j3);
IkReal x1329=IKsin(j3);
IkReal x1330=(gconst25*x1329);
evalcond[0]=(gconst25*x1328);
evalcond[1]=(new_r00*x1328);
evalcond[2]=((-1.0)*new_r11*x1328);
evalcond[3]=(gconst25+((new_r11*x1329)));
evalcond[4]=(x1330+new_r00);
evalcond[5]=(x1330+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x1331=((-1.0)*new_r01);
CheckValue<IkReal> x1333 = IKatan2WithCheck(IkReal(0),IkReal(x1331),IKFAST_ATAN2_MAGTHRESH);
if(!x1333.valid){
continue;
}
IkReal x1332=((-1.0)*(x1333.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst25;
cj5=gconst26;
j5=x1332;
new_r11=0;
IkReal gconst24=x1332;
IkReal gconst25=0;
IkReal x1334 = new_r01*new_r01;
if(IKabs(x1334)==0){
continue;
}
IkReal gconst26=(x1331*(pow(x1334,-0.5)));
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1335=((-1.0)*new_r01);
CheckValue<IkReal> x1337 = IKatan2WithCheck(IkReal(0),IkReal(x1335),IKFAST_ATAN2_MAGTHRESH);
if(!x1337.valid){
continue;
}
IkReal x1336=((-1.0)*(x1337.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst25;
cj5=gconst26;
j5=x1336;
new_r11=0;
IkReal gconst24=x1336;
IkReal gconst25=0;
IkReal x1338 = new_r01*new_r01;
if(IKabs(x1338)==0){
continue;
}
IkReal gconst26=(x1335*(pow(x1338,-0.5)));
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1339=((-1.0)*new_r01);
CheckValue<IkReal> x1341 = IKatan2WithCheck(IkReal(0),IkReal(x1339),IKFAST_ATAN2_MAGTHRESH);
if(!x1341.valid){
continue;
}
IkReal x1340=((-1.0)*(x1341.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst25;
cj5=gconst26;
j5=x1340;
new_r11=0;
IkReal gconst24=x1340;
IkReal gconst25=0;
IkReal x1342 = new_r01*new_r01;
if(IKabs(x1342)==0){
continue;
}
IkReal gconst26=(x1339*(pow(x1342,-0.5)));
j3eval[0]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1343=IKPowWithIntegerCheck(new_r01,-1);
if(!x1343.valid){
continue;
}
CheckValue<IkReal> x1344=IKPowWithIntegerCheck(gconst26,-1);
if(!x1344.valid){
continue;
}
if( IKabs(((-1.0)*gconst26*(x1343.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x1344.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst26*(x1343.value)))+IKsqr((new_r00*(x1344.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst26*(x1343.value)), (new_r00*(x1344.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1345=IKcos(j3);
IkReal x1346=IKsin(j3);
IkReal x1347=((1.0)*gconst26);
evalcond[0]=(new_r01*x1345);
evalcond[1]=((-1.0)*gconst26*x1345);
evalcond[2]=(gconst26+((new_r01*x1346)));
evalcond[3]=(((gconst26*x1346))+new_r01);
evalcond[4]=(new_r00+(((-1.0)*x1345*x1347)));
evalcond[5]=((((-1.0)*x1346*x1347))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x1345))+((new_r00*x1346)));
evalcond[7]=((((-1.0)*x1347))+((new_r00*x1345))+((new_r10*x1346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1348 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1348.valid){
continue;
}
CheckValue<IkReal> x1349=IKPowWithIntegerCheck(IKsign(gconst26),-1);
if(!x1349.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1348.value)+(((1.5707963267949)*(x1349.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1350=IKcos(j3);
IkReal x1351=IKsin(j3);
IkReal x1352=((1.0)*gconst26);
evalcond[0]=(new_r01*x1350);
evalcond[1]=((-1.0)*gconst26*x1350);
evalcond[2]=(gconst26+((new_r01*x1351)));
evalcond[3]=(((gconst26*x1351))+new_r01);
evalcond[4]=((((-1.0)*x1350*x1352))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*x1351*x1352)));
evalcond[6]=((((-1.0)*new_r10*x1350))+((new_r00*x1351)));
evalcond[7]=(((new_r10*x1351))+(((-1.0)*x1352))+((new_r00*x1350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1353=IKPowWithIntegerCheck(IKsign(gconst26),-1);
if(!x1353.valid){
continue;
}
CheckValue<IkReal> x1354 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1354.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1353.value)))+(x1354.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1355=IKcos(j3);
IkReal x1356=IKsin(j3);
IkReal x1357=((1.0)*gconst26);
evalcond[0]=(new_r01*x1355);
evalcond[1]=((-1.0)*gconst26*x1355);
evalcond[2]=(gconst26+((new_r01*x1356)));
evalcond[3]=(((gconst26*x1356))+new_r01);
evalcond[4]=((((-1.0)*x1355*x1357))+new_r00);
evalcond[5]=((((-1.0)*x1356*x1357))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x1355))+((new_r00*x1356)));
evalcond[7]=(((new_r10*x1356))+(((-1.0)*x1357))+((new_r00*x1355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1358=((1.0)*new_r01);
CheckValue<IkReal> x1359 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst25*gconst25))))),IkReal(((((-1.0)*new_r11*x1358))+((gconst25*gconst26)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1359.valid){
continue;
}
CheckValue<IkReal> x1360=IKPowWithIntegerCheck(IKsign((((gconst25*new_r11))+(((-1.0)*gconst26*x1358)))),-1);
if(!x1360.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1359.value)+(((1.5707963267949)*(x1360.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1361=IKcos(j3);
IkReal x1362=IKsin(j3);
IkReal x1363=((1.0)*gconst26);
IkReal x1364=(gconst25*x1362);
IkReal x1365=((1.0)*x1361);
IkReal x1366=(x1361*x1363);
evalcond[0]=(gconst25+((new_r01*x1361))+((new_r11*x1362)));
evalcond[1]=(((gconst25*x1361))+((gconst26*x1362))+new_r01);
evalcond[2]=(gconst25+(((-1.0)*new_r10*x1365))+((new_r00*x1362)));
evalcond[3]=(gconst26+(((-1.0)*new_r11*x1365))+((new_r01*x1362)));
evalcond[4]=(x1364+new_r00+(((-1.0)*x1366)));
evalcond[5]=(x1364+new_r11+(((-1.0)*x1366)));
evalcond[6]=(((new_r10*x1362))+((new_r00*x1361))+(((-1.0)*x1363)));
evalcond[7]=((((-1.0)*gconst25*x1365))+(((-1.0)*x1362*x1363))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1367=((1.0)*gconst25);
CheckValue<IkReal> x1368=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*x1367))+(((-1.0)*gconst26*new_r10)))),-1);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369 = IKatan2WithCheck(IkReal((((new_r01*new_r10))+(gconst25*gconst25))),IkReal(((((-1.0)*gconst26*x1367))+((new_r00*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1369.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1368.value)))+(x1369.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1370=IKcos(j3);
IkReal x1371=IKsin(j3);
IkReal x1372=((1.0)*gconst26);
IkReal x1373=(gconst25*x1371);
IkReal x1374=((1.0)*x1370);
IkReal x1375=(x1370*x1372);
evalcond[0]=(gconst25+((new_r11*x1371))+((new_r01*x1370)));
evalcond[1]=(((gconst25*x1370))+new_r01+((gconst26*x1371)));
evalcond[2]=(gconst25+((new_r00*x1371))+(((-1.0)*new_r10*x1374)));
evalcond[3]=((((-1.0)*new_r11*x1374))+gconst26+((new_r01*x1371)));
evalcond[4]=(x1373+(((-1.0)*x1375))+new_r00);
evalcond[5]=(x1373+(((-1.0)*x1375))+new_r11);
evalcond[6]=((((-1.0)*x1372))+((new_r10*x1371))+((new_r00*x1370)));
evalcond[7]=((((-1.0)*x1371*x1372))+(((-1.0)*gconst25*x1374))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1376=((1.0)*new_r11);
CheckValue<IkReal> x1377=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r10*x1376)))),-1);
if(!x1377.valid){
continue;
}
CheckValue<IkReal> x1378 = IKatan2WithCheck(IkReal((((gconst25*new_r01))+((gconst25*new_r10)))),IkReal((((gconst25*new_r00))+(((-1.0)*gconst25*x1376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1378.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1377.value)))+(x1378.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1379=IKcos(j3);
IkReal x1380=IKsin(j3);
IkReal x1381=((1.0)*gconst26);
IkReal x1382=(gconst25*x1380);
IkReal x1383=((1.0)*x1379);
IkReal x1384=(x1379*x1381);
evalcond[0]=(((new_r11*x1380))+gconst25+((new_r01*x1379)));
evalcond[1]=(((gconst25*x1379))+((gconst26*x1380))+new_r01);
evalcond[2]=(gconst25+(((-1.0)*new_r10*x1383))+((new_r00*x1380)));
evalcond[3]=(gconst26+((new_r01*x1380))+(((-1.0)*new_r11*x1383)));
evalcond[4]=((((-1.0)*x1384))+x1382+new_r00);
evalcond[5]=((((-1.0)*x1384))+x1382+new_r11);
evalcond[6]=((((-1.0)*x1381))+((new_r10*x1380))+((new_r00*x1379)));
evalcond[7]=((((-1.0)*x1380*x1381))+new_r10+(((-1.0)*gconst25*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1385=((-1.0)*new_r11);
IkReal x1387 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1387)==0){
continue;
}
IkReal x1386=pow(x1387,-0.5);
CheckValue<IkReal> x1388 = IKatan2WithCheck(IkReal(x1385),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1388.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x1388.value))));
IkReal gconst28=(x1385*x1386);
IkReal gconst29=((1.0)*new_r01*x1386);
CheckValue<IkReal> x1389 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1389.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1389.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x1390=((-1.0)*new_r11);
CheckValue<IkReal> x1393 = IKatan2WithCheck(IkReal(x1390),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1393.valid){
continue;
}
IkReal x1391=((1.0)*(x1393.value));
IkReal x1392=x1386;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1391)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1391)));
IkReal gconst28=(x1390*x1392);
IkReal gconst29=((1.0)*new_r01*x1392);
IkReal x1394=new_r11*new_r11;
IkReal x1395=((1.0)*new_r01);
IkReal x1396=((1.0)*new_r10);
IkReal x1397=((((-1.0)*new_r00*x1395))+(((-1.0)*new_r11*x1396)));
IkReal x1398=x1386;
IkReal x1399=(new_r11*x1398);
j3eval[0]=x1397;
j3eval[1]=((IKabs((((x1394*x1398))+(((-1.0)*new_r00*x1399)))))+(IKabs(((((-1.0)*x1395*x1399))+(((-1.0)*x1396*x1399))))));
j3eval[2]=IKsign(x1397);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1400=((-1.0)*new_r11);
CheckValue<IkReal> x1403 = IKatan2WithCheck(IkReal(x1400),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1403.valid){
continue;
}
IkReal x1401=((1.0)*(x1403.value));
IkReal x1402=x1386;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1401)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1401)));
IkReal gconst28=(x1400*x1402);
IkReal gconst29=((1.0)*new_r01*x1402);
IkReal x1404=new_r11*new_r11;
IkReal x1405=new_r01*new_r01*new_r01;
CheckValue<IkReal> x1409=IKPowWithIntegerCheck(((new_r01*new_r01)+x1404),-1);
if(!x1409.valid){
continue;
}
IkReal x1406=x1409.value;
IkReal x1407=(x1404*x1406);
IkReal x1408=(x1405*x1406);
j3eval[0]=((IKabs((((new_r00*x1408))+((new_r00*new_r01*x1407))+((new_r01*new_r11*x1406)))))+(IKabs((((new_r10*x1408))+x1407+((new_r01*new_r10*x1407))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1410=((-1.0)*new_r11);
CheckValue<IkReal> x1413 = IKatan2WithCheck(IkReal(x1410),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1413.valid){
continue;
}
IkReal x1411=((1.0)*(x1413.value));
IkReal x1412=x1386;
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1411)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1411)));
IkReal gconst28=(x1410*x1412);
IkReal gconst29=((1.0)*new_r01*x1412);
IkReal x1414=new_r01*new_r01;
IkReal x1415=new_r11*new_r11;
CheckValue<IkReal> x1422=IKPowWithIntegerCheck((x1414+x1415),-1);
if(!x1422.valid){
continue;
}
IkReal x1416=x1422.value;
IkReal x1417=(x1415*x1416);
CheckValue<IkReal> x1423=IKPowWithIntegerCheck(((((-1.0)*x1414))+(((-1.0)*x1415))),-1);
if(!x1423.valid){
continue;
}
IkReal x1418=x1423.value;
IkReal x1419=((1.0)*x1418);
IkReal x1420=(new_r11*x1419);
IkReal x1421=(new_r01*x1419);
j3eval[0]=((IKabs(((((-1.0)*new_r01*x1420))+(((-1.0)*new_r01*x1420*(new_r11*new_r11)))+(((-1.0)*x1420*(new_r01*new_r01*new_r01))))))+(IKabs((((x1416*(x1414*x1414)))+((x1414*x1417))+(((-1.0)*x1417))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1424=IKPowWithIntegerCheck(gconst29,-1);
if(!x1424.valid){
continue;
}
sj3array[0]=(new_r10*(x1424.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1425=IKcos(j3);
IkReal x1426=IKsin(j3);
IkReal x1427=((-1.0)*x1425);
evalcond[0]=(new_r01*x1425);
evalcond[1]=(new_r10*x1427);
evalcond[2]=(gconst29*x1427);
evalcond[3]=(gconst29+((new_r01*x1426)));
evalcond[4]=(((gconst29*x1426))+new_r01);
evalcond[5]=((((-1.0)*gconst29))+((new_r10*x1426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst28;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x1428=((-1.0)*new_r11);
CheckValue<IkReal> x1430 = IKatan2WithCheck(IkReal(x1428),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1430.valid){
continue;
}
IkReal x1429=((1.0)*(x1430.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1429)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1429)));
IkReal gconst28=x1428;
IkReal gconst29=((1.0)*new_r01);
j3eval[0]=1.0;
j3eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r01*new_r01))))))+(IKabs(((1.0)*new_r01*new_r11))));
j3eval[2]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[4];
IkReal x1431=((-1.0)*new_r11);
CheckValue<IkReal> x1433 = IKatan2WithCheck(IkReal(x1431),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1433.valid){
continue;
}
IkReal x1432=((1.0)*(x1433.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1432)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1432)));
IkReal gconst28=x1431;
IkReal gconst29=((1.0)*new_r01);
j3eval[0]=-1.0;
j3eval[1]=new_r01;
j3eval[2]=1.0;
j3eval[3]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  || IKabs(j3eval[3]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x1434=((-1.0)*new_r11);
CheckValue<IkReal> x1436 = IKatan2WithCheck(IkReal(x1434),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1436.valid){
continue;
}
IkReal x1435=((1.0)*(x1436.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1435)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1435)));
IkReal gconst28=x1434;
IkReal gconst29=((1.0)*new_r01);
j3eval[0]=-1.0;
j3eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01)))))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1437=((1.0)*new_r01);
CheckValue<IkReal> x1438 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst28*gconst28))))),IkReal((((gconst28*gconst29))+(((-1.0)*new_r11*x1437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1438.valid){
continue;
}
CheckValue<IkReal> x1439=IKPowWithIntegerCheck(IKsign((((gconst28*new_r11))+(((-1.0)*gconst29*x1437)))),-1);
if(!x1439.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1438.value)+(((1.5707963267949)*(x1439.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1440=IKsin(j3);
IkReal x1441=IKcos(j3);
IkReal x1442=(gconst28*x1440);
IkReal x1443=((1.0)*x1441);
IkReal x1444=(gconst29*x1440);
IkReal x1445=(gconst29*x1443);
evalcond[0]=(((new_r11*x1440))+gconst28+((new_r01*x1441)));
evalcond[1]=(x1444+new_r01+((gconst28*x1441)));
evalcond[2]=(x1442+(((-1.0)*x1445)));
evalcond[3]=(gconst29+((new_r01*x1440))+(((-1.0)*new_r11*x1443)));
evalcond[4]=(x1442+(((-1.0)*x1445))+new_r11);
evalcond[5]=((((-1.0)*gconst28*x1443))+(((-1.0)*x1444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1446 = IKatan2WithCheck(IkReal((gconst29*new_r01)),IkReal((gconst28*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1446.valid){
continue;
}
CheckValue<IkReal> x1447=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst28*gconst28)))+(((-1.0)*(gconst29*gconst29))))),-1);
if(!x1447.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1446.value)+(((1.5707963267949)*(x1447.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1448=IKsin(j3);
IkReal x1449=IKcos(j3);
IkReal x1450=(gconst28*x1448);
IkReal x1451=((1.0)*x1449);
IkReal x1452=(gconst29*x1448);
IkReal x1453=(gconst29*x1451);
evalcond[0]=(((new_r11*x1448))+gconst28+((new_r01*x1449)));
evalcond[1]=(x1452+new_r01+((gconst28*x1449)));
evalcond[2]=((((-1.0)*x1453))+x1450);
evalcond[3]=(gconst29+((new_r01*x1448))+(((-1.0)*new_r11*x1451)));
evalcond[4]=((((-1.0)*x1453))+x1450+new_r11);
evalcond[5]=((((-1.0)*gconst28*x1451))+(((-1.0)*x1452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1454=IKPowWithIntegerCheck(IKsign((((gconst29*new_r01))+(((-1.0)*gconst28*new_r11)))),-1);
if(!x1454.valid){
continue;
}
CheckValue<IkReal> x1455 = IKatan2WithCheck(IkReal(gconst28*gconst28),IkReal(((-1.0)*gconst28*gconst29)),IKFAST_ATAN2_MAGTHRESH);
if(!x1455.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1454.value)))+(x1455.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1456=IKsin(j3);
IkReal x1457=IKcos(j3);
IkReal x1458=(gconst28*x1456);
IkReal x1459=((1.0)*x1457);
IkReal x1460=(gconst29*x1456);
IkReal x1461=(gconst29*x1459);
evalcond[0]=(gconst28+((new_r01*x1457))+((new_r11*x1456)));
evalcond[1]=(x1460+new_r01+((gconst28*x1457)));
evalcond[2]=((((-1.0)*x1461))+x1458);
evalcond[3]=(gconst29+((new_r01*x1456))+(((-1.0)*new_r11*x1459)));
evalcond[4]=((((-1.0)*x1461))+x1458+new_r11);
evalcond[5]=((((-1.0)*gconst28*x1459))+(((-1.0)*x1460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x1462=((-1.0)*new_r11);
CheckValue<IkReal> x1464 = IKatan2WithCheck(IkReal(x1462),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1464.valid){
continue;
}
IkReal x1463=((1.0)*(x1464.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1463)));
new_r01=0;
new_r10=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1463)));
IkReal x1465 = new_r11*new_r11;
if(IKabs(x1465)==0){
continue;
}
IkReal gconst28=(x1462*(pow(x1465,-0.5)));
IkReal gconst29=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1466=((-1.0)*new_r11);
CheckValue<IkReal> x1468 = IKatan2WithCheck(IkReal(x1466),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1468.valid){
continue;
}
IkReal x1467=((1.0)*(x1468.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1467)));
new_r01=0;
new_r10=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1467)));
IkReal x1469 = new_r11*new_r11;
if(IKabs(x1469)==0){
continue;
}
IkReal gconst28=(x1466*(pow(x1469,-0.5)));
IkReal gconst29=0;
j3eval[0]=new_r11;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1470=IKPowWithIntegerCheck(gconst28,-1);
if(!x1470.valid){
continue;
}
sj3array[0]=((-1.0)*new_r00*(x1470.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1471=IKcos(j3);
IkReal x1472=IKsin(j3);
evalcond[0]=(gconst28*x1471);
evalcond[1]=(new_r00*x1471);
evalcond[2]=((-1.0)*new_r11*x1471);
evalcond[3]=(gconst28+((new_r00*x1472)));
evalcond[4]=(((new_r11*x1472))+gconst28);
evalcond[5]=(new_r11+((gconst28*x1472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(new_r11,-1);
if(!x1473.valid){
continue;
}
sj3array[0]=((-1.0)*gconst28*(x1473.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1474=IKcos(j3);
IkReal x1475=IKsin(j3);
IkReal x1476=(gconst28*x1475);
evalcond[0]=(gconst28*x1474);
evalcond[1]=(new_r00*x1474);
evalcond[2]=((-1.0)*new_r11*x1474);
evalcond[3]=(gconst28+((new_r00*x1475)));
evalcond[4]=(x1476+new_r00);
evalcond[5]=(x1476+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1477=IKPowWithIntegerCheck(new_r00,-1);
if(!x1477.valid){
continue;
}
sj3array[0]=((-1.0)*gconst28*(x1477.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1478=IKcos(j3);
IkReal x1479=IKsin(j3);
IkReal x1480=(gconst28*x1479);
evalcond[0]=(gconst28*x1478);
evalcond[1]=(new_r00*x1478);
evalcond[2]=((-1.0)*new_r11*x1478);
evalcond[3]=(((new_r11*x1479))+gconst28);
evalcond[4]=(x1480+new_r00);
evalcond[5]=(x1480+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x1482 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1482.valid){
continue;
}
IkReal x1481=((1.0)*(x1482.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1481)));
new_r11=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1481)));
IkReal gconst28=0;
IkReal x1483 = new_r01*new_r01;
if(IKabs(x1483)==0){
continue;
}
IkReal gconst29=((1.0)*new_r01*(pow(x1483,-0.5)));
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x1485 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1485.valid){
continue;
}
IkReal x1484=((1.0)*(x1485.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1484)));
new_r11=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1484)));
IkReal gconst28=0;
IkReal x1486 = new_r01*new_r01;
if(IKabs(x1486)==0){
continue;
}
IkReal gconst29=((1.0)*new_r01*(pow(x1486,-0.5)));
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x1488 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1488.valid){
continue;
}
IkReal x1487=((1.0)*(x1488.value));
sj4=0;
cj4=1.0;
j4=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x1487)));
new_r11=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x1487)));
IkReal gconst28=0;
IkReal x1489 = new_r01*new_r01;
if(IKabs(x1489)==0){
continue;
}
IkReal gconst29=((1.0)*new_r01*(pow(x1489,-0.5)));
j3eval[0]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1490=IKPowWithIntegerCheck(new_r01,-1);
if(!x1490.valid){
continue;
}
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(gconst29,-1);
if(!x1491.valid){
continue;
}
if( IKabs(((-1.0)*gconst29*(x1490.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x1491.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst29*(x1490.value)))+IKsqr((new_r00*(x1491.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst29*(x1490.value)), (new_r00*(x1491.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1492=IKcos(j3);
IkReal x1493=IKsin(j3);
IkReal x1494=((1.0)*gconst29);
IkReal x1495=(gconst29*x1492);
evalcond[0]=(new_r01*x1492);
evalcond[1]=((-1.0)*x1495);
evalcond[2]=(gconst29+((new_r01*x1493)));
evalcond[3]=(((gconst29*x1493))+new_r01);
evalcond[4]=((((-1.0)*x1492*x1494))+new_r00);
evalcond[5]=((((-1.0)*x1493*x1494))+new_r10);
evalcond[6]=(((new_r00*x1493))+(((-1.0)*new_r10*x1492)));
evalcond[7]=((((-1.0)*x1494))+((new_r00*x1492))+((new_r10*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1496 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1496.valid){
continue;
}
CheckValue<IkReal> x1497=IKPowWithIntegerCheck(IKsign(gconst29),-1);
if(!x1497.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1496.value)+(((1.5707963267949)*(x1497.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1498=IKcos(j3);
IkReal x1499=IKsin(j3);
IkReal x1500=((1.0)*gconst29);
IkReal x1501=(gconst29*x1498);
evalcond[0]=(new_r01*x1498);
evalcond[1]=((-1.0)*x1501);
evalcond[2]=(gconst29+((new_r01*x1499)));
evalcond[3]=(((gconst29*x1499))+new_r01);
evalcond[4]=((((-1.0)*x1498*x1500))+new_r00);
evalcond[5]=((((-1.0)*x1499*x1500))+new_r10);
evalcond[6]=(((new_r00*x1499))+(((-1.0)*new_r10*x1498)));
evalcond[7]=((((-1.0)*x1500))+((new_r00*x1498))+((new_r10*x1499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(gconst29),-1);
if(!x1503.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1502.value)+(((1.5707963267949)*(x1503.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1504=IKcos(j3);
IkReal x1505=IKsin(j3);
IkReal x1506=((1.0)*gconst29);
IkReal x1507=(gconst29*x1504);
evalcond[0]=(new_r01*x1504);
evalcond[1]=((-1.0)*x1507);
evalcond[2]=(gconst29+((new_r01*x1505)));
evalcond[3]=(((gconst29*x1505))+new_r01);
evalcond[4]=((((-1.0)*x1504*x1506))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*x1505*x1506)));
evalcond[6]=(((new_r00*x1505))+(((-1.0)*new_r10*x1504)));
evalcond[7]=(((new_r10*x1505))+(((-1.0)*x1506))+((new_r00*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1508=((1.0)*new_r01);
CheckValue<IkReal> x1509=IKPowWithIntegerCheck(IKsign((((gconst28*new_r11))+(((-1.0)*gconst29*x1508)))),-1);
if(!x1509.valid){
continue;
}
CheckValue<IkReal> x1510 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst28*gconst28))))),IkReal(((((-1.0)*new_r11*x1508))+((gconst28*gconst29)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1510.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1509.value)))+(x1510.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1511=IKsin(j3);
IkReal x1512=IKcos(j3);
IkReal x1513=((1.0)*gconst29);
IkReal x1514=(gconst28*x1511);
IkReal x1515=((1.0)*x1512);
IkReal x1516=(x1512*x1513);
evalcond[0]=(gconst28+((new_r01*x1512))+((new_r11*x1511)));
evalcond[1]=(((gconst28*x1512))+((gconst29*x1511))+new_r01);
evalcond[2]=((((-1.0)*new_r10*x1515))+gconst28+((new_r00*x1511)));
evalcond[3]=((((-1.0)*new_r11*x1515))+gconst29+((new_r01*x1511)));
evalcond[4]=((((-1.0)*x1516))+x1514+new_r00);
evalcond[5]=((((-1.0)*x1516))+x1514+new_r11);
evalcond[6]=(((new_r10*x1511))+(((-1.0)*x1513))+((new_r00*x1512)));
evalcond[7]=(new_r10+(((-1.0)*gconst28*x1515))+(((-1.0)*x1511*x1513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1517=((1.0)*gconst28);
CheckValue<IkReal> x1518=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst29*new_r10))+(((-1.0)*new_r00*x1517)))),-1);
if(!x1518.valid){
continue;
}
CheckValue<IkReal> x1519 = IKatan2WithCheck(IkReal(((gconst28*gconst28)+((new_r01*new_r10)))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst29*x1517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1519.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1518.value)))+(x1519.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1520=IKsin(j3);
IkReal x1521=IKcos(j3);
IkReal x1522=((1.0)*gconst29);
IkReal x1523=(gconst28*x1520);
IkReal x1524=((1.0)*x1521);
IkReal x1525=(x1521*x1522);
evalcond[0]=(gconst28+((new_r01*x1521))+((new_r11*x1520)));
evalcond[1]=(((gconst29*x1520))+((gconst28*x1521))+new_r01);
evalcond[2]=(gconst28+((new_r00*x1520))+(((-1.0)*new_r10*x1524)));
evalcond[3]=((((-1.0)*new_r11*x1524))+gconst29+((new_r01*x1520)));
evalcond[4]=((((-1.0)*x1525))+x1523+new_r00);
evalcond[5]=((((-1.0)*x1525))+x1523+new_r11);
evalcond[6]=((((-1.0)*x1522))+((new_r00*x1521))+((new_r10*x1520)));
evalcond[7]=((((-1.0)*gconst28*x1524))+new_r10+(((-1.0)*x1520*x1522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1526=((1.0)*new_r11);
CheckValue<IkReal> x1527 = IKatan2WithCheck(IkReal((((gconst28*new_r01))+((gconst28*new_r10)))),IkReal((((gconst28*new_r00))+(((-1.0)*gconst28*x1526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1527.valid){
continue;
}
CheckValue<IkReal> x1528=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r10*x1526)))),-1);
if(!x1528.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1527.value)+(((1.5707963267949)*(x1528.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1529=IKsin(j3);
IkReal x1530=IKcos(j3);
IkReal x1531=((1.0)*gconst29);
IkReal x1532=(gconst28*x1529);
IkReal x1533=((1.0)*x1530);
IkReal x1534=(x1530*x1531);
evalcond[0]=(gconst28+((new_r01*x1530))+((new_r11*x1529)));
evalcond[1]=(((gconst28*x1530))+((gconst29*x1529))+new_r01);
evalcond[2]=((((-1.0)*new_r10*x1533))+gconst28+((new_r00*x1529)));
evalcond[3]=(gconst29+((new_r01*x1529))+(((-1.0)*new_r11*x1533)));
evalcond[4]=((((-1.0)*x1534))+x1532+new_r00);
evalcond[5]=((((-1.0)*x1534))+x1532+new_r11);
evalcond[6]=((((-1.0)*x1531))+((new_r00*x1530))+((new_r10*x1529)));
evalcond[7]=((((-1.0)*x1529*x1531))+(((-1.0)*gconst28*x1533))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1535=IKsin(j3);
IkReal x1536=IKcos(j3);
IkReal x1537=((1.0)*x1536);
evalcond[0]=(x1535+new_r01);
evalcond[1]=((((-1.0)*x1537))+new_r00);
evalcond[2]=((((-1.0)*x1537))+new_r11);
evalcond[3]=((((-1.0)*x1535))+new_r10);
evalcond[4]=(((new_r01*x1536))+((new_r11*x1535)));
evalcond[5]=((((-1.0)*new_r10*x1537))+((new_r00*x1535)));
evalcond[6]=((-1.0)+((new_r00*x1536))+((new_r10*x1535)));
evalcond[7]=((1.0)+((new_r01*x1535))+(((-1.0)*new_r11*x1537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1538=IKcos(j3);
IkReal x1539=IKsin(j3);
IkReal x1540=((1.0)*x1538);
evalcond[0]=(x1538+new_r00);
evalcond[1]=(x1538+new_r11);
evalcond[2]=(x1539+new_r10);
evalcond[3]=((((-1.0)*x1539))+new_r01);
evalcond[4]=(((new_r01*x1538))+((new_r11*x1539)));
evalcond[5]=((((-1.0)*new_r10*x1540))+((new_r00*x1539)));
evalcond[6]=((1.0)+((new_r00*x1538))+((new_r10*x1539)));
evalcond[7]=((-1.0)+(((-1.0)*new_r11*x1540))+((new_r01*x1539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r11=0;
new_r00=0;
j3eval[0]=new_r01;
j3eval[1]=IKsign(new_r01);
j3eval[2]=((IKabs(cj5))+(IKabs(sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=0;
cj4=1.0;
j4=0;
new_r11=0;
new_r00=0;
j3eval[0]=new_r01;
j3eval[1]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=0;
cj4=1.0;
j4=0;
new_r11=0;
new_r00=0;
j3eval[0]=new_r01;
j3eval[1]=sj5;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
sj3array[0]=new_r10;
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1541=IKcos(j3);
IkReal x1542=IKsin(j3);
IkReal x1543=((-1.0)*x1541);
evalcond[0]=(new_r01*x1541);
evalcond[1]=(x1542+new_r01);
evalcond[2]=x1543;
evalcond[3]=(new_r10*x1543);
evalcond[4]=((1.0)+((new_r01*x1542)));
evalcond[5]=((-1.0)+((new_r10*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
sj3array[0]=new_r01;
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1544=IKcos(j3);
IkReal x1545=IKsin(j3);
evalcond[0]=x1544;
evalcond[1]=(new_r01*x1544);
evalcond[2]=(x1545+new_r10);
evalcond[3]=((-1.0)*new_r10*x1544);
evalcond[4]=((-1.0)+((new_r01*x1545)));
evalcond[5]=((1.0)+((new_r10*x1545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1547=IKPowWithIntegerCheck(new_r01,-1);
if(!x1547.valid){
continue;
}
IkReal x1546=x1547.value;
CheckValue<IkReal> x1548=IKPowWithIntegerCheck(sj5,-1);
if(!x1548.valid){
continue;
}
CheckValue<IkReal> x1549=IKPowWithIntegerCheck(x1546,-2);
if(!x1549.valid){
continue;
}
if( IKabs(((-1.0)*cj5*x1546)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1546*(x1548.value)*(((((-1.0)*(x1549.value)))+(cj5*cj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj5*x1546))+IKsqr((x1546*(x1548.value)*(((((-1.0)*(x1549.value)))+(cj5*cj5)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*cj5*x1546), (x1546*(x1548.value)*(((((-1.0)*(x1549.value)))+(cj5*cj5)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1550=IKcos(j3);
IkReal x1551=IKsin(j3);
IkReal x1552=((1.0)*cj5);
IkReal x1553=(sj5*x1550);
evalcond[0]=(((new_r01*x1551))+cj5);
evalcond[1]=(sj5+((new_r01*x1550)));
evalcond[2]=(sj5+(((-1.0)*new_r10*x1550)));
evalcond[3]=(((new_r10*x1551))+(((-1.0)*x1552)));
evalcond[4]=(x1553+new_r01+((cj5*x1551)));
evalcond[5]=((((-1.0)*x1550*x1552))+((sj5*x1551)));
evalcond[6]=((((-1.0)*x1553))+(((-1.0)*x1551*x1552))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(new_r01,-1);
if(!x1554.valid){
continue;
}
CheckValue<IkReal> x1555=IKPowWithIntegerCheck(new_r10,-1);
if(!x1555.valid){
continue;
}
if( IKabs(((-1.0)*cj5*(x1554.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj5*(x1555.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj5*(x1554.value)))+IKsqr((sj5*(x1555.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*cj5*(x1554.value)), (sj5*(x1555.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1556=IKcos(j3);
IkReal x1557=IKsin(j3);
IkReal x1558=((1.0)*cj5);
IkReal x1559=(sj5*x1556);
evalcond[0]=(((new_r01*x1557))+cj5);
evalcond[1]=(sj5+((new_r01*x1556)));
evalcond[2]=(sj5+(((-1.0)*new_r10*x1556)));
evalcond[3]=(((new_r10*x1557))+(((-1.0)*x1558)));
evalcond[4]=(x1559+new_r01+((cj5*x1557)));
evalcond[5]=((((-1.0)*x1556*x1558))+((sj5*x1557)));
evalcond[6]=((((-1.0)*x1559))+(((-1.0)*x1557*x1558))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1560=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x1560.valid){
continue;
}
CheckValue<IkReal> x1561 = IKatan2WithCheck(IkReal(((-1.0)*cj5)),IkReal(((-1.0)*sj5)),IKFAST_ATAN2_MAGTHRESH);
if(!x1561.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1560.value)))+(x1561.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1562=IKcos(j3);
IkReal x1563=IKsin(j3);
IkReal x1564=((1.0)*cj5);
IkReal x1565=(sj5*x1562);
evalcond[0]=(((new_r01*x1563))+cj5);
evalcond[1]=(((new_r01*x1562))+sj5);
evalcond[2]=(sj5+(((-1.0)*new_r10*x1562)));
evalcond[3]=(((new_r10*x1563))+(((-1.0)*x1564)));
evalcond[4]=(((cj5*x1563))+x1565+new_r01);
evalcond[5]=((((-1.0)*x1562*x1564))+((sj5*x1563)));
evalcond[6]=((((-1.0)*x1563*x1564))+new_r10+(((-1.0)*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj4=0;
cj4=1.0;
j4=0;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1567 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1567.valid){
continue;
}
IkReal x1566=x1567.value;
j3array[0]=((-1.0)*x1566);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x1566)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r00*(IKsin(j3))))+(((-1.0)*new_r10*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj4=0;
cj4=1.0;
j4=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1569 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1569.valid){
continue;
}
IkReal x1568=x1569.value;
j3array[0]=((-1.0)*x1568);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x1568)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r01*(IKsin(j3))))+(((-1.0)*new_r11*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r01=0;
new_r10=0;
j3eval[0]=new_r11;
j3eval[1]=IKsign(new_r11);
j3eval[2]=((IKabs(cj5))+(IKabs(sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r01=0;
new_r10=0;
j3eval[0]=new_r00;
j3eval[1]=((IKabs(cj5))+(IKabs(sj5)));
j3eval[2]=IKsign(new_r00);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=0;
cj4=1.0;
j4=0;
new_r01=0;
new_r10=0;
j3eval[0]=new_r00;
j3eval[1]=new_r11;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1570=IKPowWithIntegerCheck(new_r00,-1);
if(!x1570.valid){
continue;
}
CheckValue<IkReal> x1571=IKPowWithIntegerCheck(new_r11,-1);
if(!x1571.valid){
continue;
}
if( IKabs(((-1.0)*sj5*(x1570.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj5*(x1571.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj5*(x1570.value)))+IKsqr((cj5*(x1571.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*sj5*(x1570.value)), (cj5*(x1571.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1572=IKsin(j3);
IkReal x1573=IKcos(j3);
IkReal x1574=(sj5*x1572);
IkReal x1575=((1.0)*x1573);
IkReal x1576=(cj5*x1575);
evalcond[0]=(((new_r00*x1572))+sj5);
evalcond[1]=(sj5+((new_r11*x1572)));
evalcond[2]=((((-1.0)*new_r11*x1575))+cj5);
evalcond[3]=(((new_r00*x1573))+(((-1.0)*cj5)));
evalcond[4]=(((cj5*x1572))+((sj5*x1573)));
evalcond[5]=(x1574+new_r00+(((-1.0)*x1576)));
evalcond[6]=(x1574+new_r11+(((-1.0)*x1576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1577=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x1577.valid){
continue;
}
CheckValue<IkReal> x1578 = IKatan2WithCheck(IkReal(((-1.0)*sj5)),IkReal(cj5),IKFAST_ATAN2_MAGTHRESH);
if(!x1578.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1577.value)))+(x1578.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1579=IKsin(j3);
IkReal x1580=IKcos(j3);
IkReal x1581=(sj5*x1579);
IkReal x1582=((1.0)*x1580);
IkReal x1583=(cj5*x1582);
evalcond[0]=(((new_r00*x1579))+sj5);
evalcond[1]=(sj5+((new_r11*x1579)));
evalcond[2]=(cj5+(((-1.0)*new_r11*x1582)));
evalcond[3]=(((new_r00*x1580))+(((-1.0)*cj5)));
evalcond[4]=(((cj5*x1579))+((sj5*x1580)));
evalcond[5]=((((-1.0)*x1583))+x1581+new_r00);
evalcond[6]=((((-1.0)*x1583))+x1581+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1584=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x1584.valid){
continue;
}
CheckValue<IkReal> x1585 = IKatan2WithCheck(IkReal(((-1.0)*sj5)),IkReal(cj5),IKFAST_ATAN2_MAGTHRESH);
if(!x1585.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1584.value)))+(x1585.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1586=IKsin(j3);
IkReal x1587=IKcos(j3);
IkReal x1588=(sj5*x1586);
IkReal x1589=((1.0)*x1587);
IkReal x1590=(cj5*x1589);
evalcond[0]=(sj5+((new_r00*x1586)));
evalcond[1]=(sj5+((new_r11*x1586)));
evalcond[2]=(cj5+(((-1.0)*new_r11*x1589)));
evalcond[3]=(((new_r00*x1587))+(((-1.0)*cj5)));
evalcond[4]=(((cj5*x1586))+((sj5*x1587)));
evalcond[5]=((((-1.0)*x1590))+x1588+new_r00);
evalcond[6]=((((-1.0)*x1590))+x1588+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1591=((1.0)*new_r11);
CheckValue<IkReal> x1592 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+((cj5*sj5)))),IkReal(((1.0)+(((-1.0)*(cj5*cj5)))+(((-1.0)*new_r00*x1591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1592.valid){
continue;
}
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*x1591)))),-1);
if(!x1593.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1592.value)+(((1.5707963267949)*(x1593.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1594=IKcos(j3);
IkReal x1595=IKsin(j3);
IkReal x1596=(sj5*x1595);
IkReal x1597=(cj5*x1595);
IkReal x1598=(sj5*x1594);
IkReal x1599=((1.0)*x1594);
IkReal x1600=(cj5*x1599);
evalcond[0]=(sj5+((new_r01*x1594))+((new_r11*x1595)));
evalcond[1]=(x1597+x1598+new_r01);
evalcond[2]=(sj5+((new_r00*x1595))+(((-1.0)*new_r10*x1599)));
evalcond[3]=(((new_r01*x1595))+cj5+(((-1.0)*new_r11*x1599)));
evalcond[4]=((((-1.0)*x1600))+x1596+new_r00);
evalcond[5]=((((-1.0)*x1600))+x1596+new_r11);
evalcond[6]=(((new_r10*x1595))+((new_r00*x1594))+(((-1.0)*cj5)));
evalcond[7]=(new_r10+(((-1.0)*x1598))+(((-1.0)*x1597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1601 = IKatan2WithCheck(IkReal((((new_r11*sj5))+((cj5*new_r01)))),IkReal((((new_r01*sj5))+(((-1.0)*cj5*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1601.valid){
continue;
}
CheckValue<IkReal> x1602=IKPowWithIntegerCheck(IKsign(((((-1.0)*(new_r01*new_r01)))+(((-1.0)*(new_r11*new_r11))))),-1);
if(!x1602.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1601.value)+(((1.5707963267949)*(x1602.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1603=IKcos(j3);
IkReal x1604=IKsin(j3);
IkReal x1605=(sj5*x1604);
IkReal x1606=(cj5*x1604);
IkReal x1607=(sj5*x1603);
IkReal x1608=((1.0)*x1603);
IkReal x1609=(cj5*x1608);
evalcond[0]=(sj5+((new_r11*x1604))+((new_r01*x1603)));
evalcond[1]=(x1607+x1606+new_r01);
evalcond[2]=(sj5+(((-1.0)*new_r10*x1608))+((new_r00*x1604)));
evalcond[3]=(cj5+(((-1.0)*new_r11*x1608))+((new_r01*x1604)));
evalcond[4]=((((-1.0)*x1609))+x1605+new_r00);
evalcond[5]=((((-1.0)*x1609))+x1605+new_r11);
evalcond[6]=(((new_r10*x1604))+((new_r00*x1603))+(((-1.0)*cj5)));
evalcond[7]=((((-1.0)*x1607))+(((-1.0)*x1606))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1610=((1.0)*new_r11);
CheckValue<IkReal> x1611 = IKatan2WithCheck(IkReal((((new_r10*sj5))+((new_r01*sj5)))),IkReal((((new_r00*sj5))+(((-1.0)*sj5*x1610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1611.valid){
continue;
}
CheckValue<IkReal> x1612=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1610))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1612.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1611.value)+(((1.5707963267949)*(x1612.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1613=IKcos(j3);
IkReal x1614=IKsin(j3);
IkReal x1615=(sj5*x1614);
IkReal x1616=(cj5*x1614);
IkReal x1617=(sj5*x1613);
IkReal x1618=((1.0)*x1613);
IkReal x1619=(cj5*x1618);
evalcond[0]=(sj5+((new_r11*x1614))+((new_r01*x1613)));
evalcond[1]=(x1616+x1617+new_r01);
evalcond[2]=((((-1.0)*new_r10*x1618))+sj5+((new_r00*x1614)));
evalcond[3]=((((-1.0)*new_r11*x1618))+cj5+((new_r01*x1614)));
evalcond[4]=(x1615+(((-1.0)*x1619))+new_r00);
evalcond[5]=(x1615+(((-1.0)*x1619))+new_r11);
evalcond[6]=(((new_r10*x1614))+((new_r00*x1613))+(((-1.0)*cj5)));
evalcond[7]=((((-1.0)*x1617))+(((-1.0)*x1616))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1620=((1.0)*new_r10);
IkReal x1621=((((-1.0)*new_r11*x1620))+(((-1.0)*new_r00*new_r01)));
j3eval[0]=x1621;
j3eval[1]=((IKabs((((cj5*new_r11))+((cj5*new_r00)))))+(IKabs((((cj5*new_r01))+(((-1.0)*cj5*x1620))))));
j3eval[2]=IKsign(x1621);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1622=((1.0)*new_r10);
IkReal x1623=((((-1.0)*cj5*new_r00))+(((-1.0)*sj5*x1622)));
j3eval[0]=x1623;
j3eval[1]=IKsign(x1623);
j3eval[2]=((IKabs(((cj5*cj5)+(((-1.0)*new_r01*x1622)))))+(IKabs((((new_r00*new_r01))+((cj5*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1624=((1.0)*new_r00);
IkReal x1625=(((cj5*new_r10))+(((-1.0)*sj5*x1624)));
j3eval[0]=x1625;
j3eval[1]=((IKabs(((((-1.0)*(cj5*cj5)))+(new_r00*new_r00))))+(IKabs(((((-1.0)*new_r10*x1624))+((cj5*sj5))))));
j3eval[2]=IKsign(x1625);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1626=((-1.0)*new_r00);
IkReal x1628 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x1628)==0){
continue;
}
IkReal x1627=pow(x1628,-0.5);
CheckValue<IkReal> x1629 = IKatan2WithCheck(IkReal(new_r10),IkReal(x1626),IKFAST_ATAN2_MAGTHRESH);
if(!x1629.valid){
continue;
}
IkReal gconst30=((-1.0)*(x1629.value));
IkReal gconst31=((-1.0)*new_r10*x1627);
IkReal gconst32=(x1626*x1627);
CheckValue<IkReal> x1630 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1630.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x1630.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x1631=((-1.0)*new_r00);
CheckValue<IkReal> x1634 = IKatan2WithCheck(IkReal(new_r10),IkReal(x1631),IKFAST_ATAN2_MAGTHRESH);
if(!x1634.valid){
continue;
}
IkReal x1632=((-1.0)*(x1634.value));
IkReal x1633=x1627;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x1632;
IkReal gconst30=x1632;
IkReal gconst31=((-1.0)*new_r10*x1633);
IkReal gconst32=(x1631*x1633);
IkReal x1635=new_r00*new_r00;
IkReal x1636=((1.0)*new_r11);
IkReal x1637=((1.0)*new_r00*new_r01);
IkReal x1638=((((-1.0)*x1637))+(((-1.0)*new_r10*x1636)));
IkReal x1639=x1627;
IkReal x1640=(new_r00*x1639);
j3eval[0]=x1638;
j3eval[1]=((IKabs((((new_r10*x1640))+(((-1.0)*x1637*x1639)))))+(IKabs(((((-1.0)*x1635*x1639))+(((-1.0)*x1636*x1640))))));
j3eval[2]=IKsign(x1638);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1641=((-1.0)*new_r00);
CheckValue<IkReal> x1644 = IKatan2WithCheck(IkReal(new_r10),IkReal(x1641),IKFAST_ATAN2_MAGTHRESH);
if(!x1644.valid){
continue;
}
IkReal x1642=((-1.0)*(x1644.value));
IkReal x1643=x1627;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x1642;
IkReal gconst30=x1642;
IkReal gconst31=((-1.0)*new_r10*x1643);
IkReal gconst32=(x1641*x1643);
IkReal x1645=new_r10*new_r10;
IkReal x1646=new_r00*new_r00;
CheckValue<IkReal> x1649=IKPowWithIntegerCheck((x1645+x1646),-1);
if(!x1649.valid){
continue;
}
IkReal x1647=x1649.value;
IkReal x1648=(new_r00*x1647);
j3eval[0]=((IKabs((((x1646*x1647))+(((-1.0)*new_r01*new_r10)))))+(IKabs((((new_r01*x1648*(new_r00*new_r00)))+((new_r10*x1648))+((new_r01*x1645*x1648))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1650=((-1.0)*new_r00);
CheckValue<IkReal> x1653 = IKatan2WithCheck(IkReal(new_r10),IkReal(x1650),IKFAST_ATAN2_MAGTHRESH);
if(!x1653.valid){
continue;
}
IkReal x1651=((-1.0)*(x1653.value));
IkReal x1652=x1627;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x1651;
IkReal gconst30=x1651;
IkReal gconst31=((-1.0)*new_r10*x1652);
IkReal gconst32=(x1650*x1652);
IkReal x1654=new_r00*new_r00;
IkReal x1655=new_r10*new_r10;
CheckValue<IkReal> x1659=IKPowWithIntegerCheck((x1654+x1655),-1);
if(!x1659.valid){
continue;
}
IkReal x1656=x1659.value;
IkReal x1657=(new_r10*x1656);
IkReal x1658=((1.0)*x1656);
j3eval[0]=((IKabs((((x1657*(new_r00*new_r00*new_r00)))+((new_r00*x1657*(new_r10*new_r10)))+((new_r00*x1657)))))+(IKabs((((x1654*x1656))+(((-1.0)*x1654*x1655*x1658))+(((-1.0)*x1658*(x1655*x1655)))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x1661 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1661.valid){
continue;
}
IkReal x1660=((-1.0)*(x1661.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x1660;
new_r11=0;
new_r00=0;
IkReal gconst30=x1660;
IkReal x1662 = new_r10*new_r10;
if(IKabs(x1662)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r10*(pow(x1662,-0.5)));
IkReal gconst32=0;
j3eval[0]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1663=IKPowWithIntegerCheck(gconst31,-1);
if(!x1663.valid){
continue;
}
cj3array[0]=(new_r01*(x1663.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1664=IKsin(j3);
IkReal x1665=IKcos(j3);
IkReal x1666=((1.0)*gconst31);
evalcond[0]=(new_r01*x1664);
evalcond[1]=(new_r10*x1664);
evalcond[2]=(gconst31*x1664);
evalcond[3]=((((-1.0)*new_r10*x1665))+gconst31);
evalcond[4]=(new_r10+(((-1.0)*x1665*x1666)));
evalcond[5]=(((new_r01*x1665))+(((-1.0)*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1667=IKPowWithIntegerCheck(new_r10,-1);
if(!x1667.valid){
continue;
}
cj3array[0]=(gconst31*(x1667.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1668=IKsin(j3);
IkReal x1669=IKcos(j3);
IkReal x1670=((1.0)*gconst31);
IkReal x1671=(x1669*x1670);
evalcond[0]=(new_r01*x1668);
evalcond[1]=(new_r10*x1668);
evalcond[2]=(gconst31*x1668);
evalcond[3]=(new_r01+(((-1.0)*x1671)));
evalcond[4]=(new_r10+(((-1.0)*x1671)));
evalcond[5]=(((new_r01*x1669))+(((-1.0)*x1670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst32;
evalcond[2]=gconst31;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x1672=((-1.0)*new_r00);
CheckValue<IkReal> x1674 = IKatan2WithCheck(IkReal(new_r10),IkReal(x1672),IKFAST_ATAN2_MAGTHRESH);
if(!x1674.valid){
continue;
}
IkReal x1673=((-1.0)*(x1674.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x1673;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst30=x1673;
IkReal gconst31=((-1.0)*new_r10);
IkReal gconst32=x1672;
j3eval[0]=1.0;
j3eval[1]=1.0;
j3eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x1675=((-1.0)*new_r00);
CheckValue<IkReal> x1677 = IKatan2WithCheck(IkReal(new_r10),IkReal(x1675),IKFAST_ATAN2_MAGTHRESH);
if(!x1677.valid){
continue;
}
IkReal x1676=((-1.0)*(x1677.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x1676;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst30=x1676;
IkReal gconst31=((-1.0)*new_r10);
IkReal gconst32=x1675;
j3eval[0]=-1.0;
j3eval[1]=-1.0;
j3eval[2]=((IKabs(((-1.0)+(new_r10*new_r10))))+(IKabs((new_r00*new_r10))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x1678=((-1.0)*new_r00);
CheckValue<IkReal> x1680 = IKatan2WithCheck(IkReal(new_r10),IkReal(x1678),IKFAST_ATAN2_MAGTHRESH);
if(!x1680.valid){
continue;
}
IkReal x1679=((-1.0)*(x1680.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x1679;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst30=x1679;
IkReal gconst31=((-1.0)*new_r10);
IkReal gconst32=x1678;
j3eval[0]=1.0;
j3eval[1]=1.0;
j3eval[2]=((((0.5)*(IKabs(((1.0)+(((-2.0)*(new_r10*new_r10))))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1681 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst31*gconst32)))),IkReal(((gconst32*gconst32)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1681.valid){
continue;
}
CheckValue<IkReal> x1682=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*new_r00))+(((-1.0)*gconst31*new_r10)))),-1);
if(!x1682.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1681.value)+(((1.5707963267949)*(x1682.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1683=IKsin(j3);
IkReal x1684=IKcos(j3);
IkReal x1685=((1.0)*gconst31);
IkReal x1686=(gconst32*x1683);
IkReal x1687=(gconst32*x1684);
IkReal x1688=(x1684*x1685);
evalcond[0]=((((-1.0)*x1688))+x1686);
evalcond[1]=(((new_r00*x1684))+gconst32+((new_r10*x1683)));
evalcond[2]=(((gconst31*x1683))+x1687+new_r00);
evalcond[3]=(((new_r00*x1683))+(((-1.0)*new_r10*x1684))+gconst31);
evalcond[4]=((((-1.0)*x1687))+(((-1.0)*x1683*x1685)));
evalcond[5]=((((-1.0)*x1688))+x1686+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1689=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst32*gconst32)))+(((-1.0)*(gconst31*gconst31))))),-1);
if(!x1689.valid){
continue;
}
CheckValue<IkReal> x1690 = IKatan2WithCheck(IkReal((gconst31*new_r00)),IkReal((gconst32*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1690.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1689.value)))+(x1690.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1691=IKsin(j3);
IkReal x1692=IKcos(j3);
IkReal x1693=((1.0)*gconst31);
IkReal x1694=(gconst32*x1691);
IkReal x1695=(gconst32*x1692);
IkReal x1696=(x1692*x1693);
evalcond[0]=((((-1.0)*x1696))+x1694);
evalcond[1]=(gconst32+((new_r10*x1691))+((new_r00*x1692)));
evalcond[2]=(((gconst31*x1691))+x1695+new_r00);
evalcond[3]=(gconst31+(((-1.0)*new_r10*x1692))+((new_r00*x1691)));
evalcond[4]=((((-1.0)*x1695))+(((-1.0)*x1691*x1693)));
evalcond[5]=((((-1.0)*x1696))+x1694+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1697 = IKatan2WithCheck(IkReal((gconst31*gconst32)),IkReal(gconst32*gconst32),IKFAST_ATAN2_MAGTHRESH);
if(!x1697.valid){
continue;
}
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*new_r00))+(((-1.0)*gconst31*new_r10)))),-1);
if(!x1698.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1697.value)+(((1.5707963267949)*(x1698.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1699=IKsin(j3);
IkReal x1700=IKcos(j3);
IkReal x1701=((1.0)*gconst31);
IkReal x1702=(gconst32*x1699);
IkReal x1703=(gconst32*x1700);
IkReal x1704=(x1700*x1701);
evalcond[0]=(x1702+(((-1.0)*x1704)));
evalcond[1]=(((new_r00*x1700))+gconst32+((new_r10*x1699)));
evalcond[2]=(x1703+((gconst31*x1699))+new_r00);
evalcond[3]=(gconst31+(((-1.0)*new_r10*x1700))+((new_r00*x1699)));
evalcond[4]=((((-1.0)*x1703))+(((-1.0)*x1699*x1701)));
evalcond[5]=(x1702+(((-1.0)*x1704))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x1705=((-1.0)*new_r00);
CheckValue<IkReal> x1707 = IKatan2WithCheck(IkReal(0),IkReal(x1705),IKFAST_ATAN2_MAGTHRESH);
if(!x1707.valid){
continue;
}
IkReal x1706=((-1.0)*(x1707.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x1706;
new_r01=0;
new_r10=0;
IkReal gconst30=x1706;
IkReal gconst31=0;
IkReal x1708 = new_r00*new_r00;
if(IKabs(x1708)==0){
continue;
}
IkReal gconst32=(x1705*(pow(x1708,-0.5)));
j3eval[0]=new_r11;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1709=IKPowWithIntegerCheck(gconst32,-1);
if(!x1709.valid){
continue;
}
cj3array[0]=(new_r11*(x1709.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1710=IKsin(j3);
IkReal x1711=IKcos(j3);
evalcond[0]=(new_r00*x1710);
evalcond[1]=(new_r11*x1710);
evalcond[2]=(gconst32*x1710);
evalcond[3]=(gconst32+((new_r00*x1711)));
evalcond[4]=(((gconst32*x1711))+new_r00);
evalcond[5]=((((-1.0)*new_r11*x1711))+gconst32);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1712=IKPowWithIntegerCheck(new_r11,-1);
if(!x1712.valid){
continue;
}
cj3array[0]=(gconst32*(x1712.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1713=IKsin(j3);
IkReal x1714=IKcos(j3);
IkReal x1715=(gconst32*x1714);
evalcond[0]=(new_r00*x1713);
evalcond[1]=(new_r11*x1713);
evalcond[2]=(gconst32*x1713);
evalcond[3]=(gconst32+((new_r00*x1714)));
evalcond[4]=(x1715+new_r00);
evalcond[5]=((((-1.0)*x1715))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x1717 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1717.valid){
continue;
}
IkReal x1716=((-1.0)*(x1717.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x1716;
new_r00=0;
IkReal gconst30=x1716;
IkReal x1718 = new_r10*new_r10;
if(IKabs(x1718)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r10*(pow(x1718,-0.5)));
IkReal gconst32=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
IkReal x1719=((-1.0)*(x1720.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x1719;
new_r00=0;
IkReal gconst30=x1719;
IkReal x1721 = new_r10*new_r10;
if(IKabs(x1721)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r10*(pow(x1721,-0.5)));
IkReal gconst32=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x1723 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1723.valid){
continue;
}
IkReal x1722=((-1.0)*(x1723.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x1722;
new_r00=0;
IkReal gconst30=x1722;
IkReal x1724 = new_r10*new_r10;
if(IKabs(x1724)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r10*(pow(x1724,-0.5)));
IkReal gconst32=0;
j3eval[0]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1725=IKPowWithIntegerCheck(gconst31,-1);
if(!x1725.valid){
continue;
}
CheckValue<IkReal> x1726=IKPowWithIntegerCheck(new_r10,-1);
if(!x1726.valid){
continue;
}
if( IKabs((new_r11*(x1725.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst31*(x1726.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x1725.value)))+IKsqr((gconst31*(x1726.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((new_r11*(x1725.value)), (gconst31*(x1726.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1727=IKsin(j3);
IkReal x1728=IKcos(j3);
IkReal x1729=((1.0)*gconst31);
IkReal x1730=((1.0)*x1728);
IkReal x1731=(x1728*x1729);
evalcond[0]=(new_r10*x1727);
evalcond[1]=(gconst31*x1727);
evalcond[2]=((((-1.0)*new_r10*x1730))+gconst31);
evalcond[3]=(new_r01+(((-1.0)*x1731)));
evalcond[4]=(new_r11+(((-1.0)*x1727*x1729)));
evalcond[5]=(new_r10+(((-1.0)*x1731)));
evalcond[6]=((((-1.0)*new_r11*x1730))+((new_r01*x1727)));
evalcond[7]=(((new_r11*x1727))+(((-1.0)*x1729))+((new_r01*x1728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1732=IKPowWithIntegerCheck(IKsign(gconst31),-1);
if(!x1732.valid){
continue;
}
CheckValue<IkReal> x1733 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1733.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1732.value)))+(x1733.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1734=IKsin(j3);
IkReal x1735=IKcos(j3);
IkReal x1736=((1.0)*gconst31);
IkReal x1737=((1.0)*x1735);
IkReal x1738=(x1735*x1736);
evalcond[0]=(new_r10*x1734);
evalcond[1]=(gconst31*x1734);
evalcond[2]=((((-1.0)*new_r10*x1737))+gconst31);
evalcond[3]=(new_r01+(((-1.0)*x1738)));
evalcond[4]=((((-1.0)*x1734*x1736))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x1738)));
evalcond[6]=((((-1.0)*new_r11*x1737))+((new_r01*x1734)));
evalcond[7]=(((new_r11*x1734))+(((-1.0)*x1736))+((new_r01*x1735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1739=IKPowWithIntegerCheck(IKsign(gconst31),-1);
if(!x1739.valid){
continue;
}
CheckValue<IkReal> x1740 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1740.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1739.value)))+(x1740.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1741=IKsin(j3);
IkReal x1742=IKcos(j3);
IkReal x1743=((1.0)*gconst31);
IkReal x1744=((1.0)*x1742);
IkReal x1745=(x1742*x1743);
evalcond[0]=(new_r10*x1741);
evalcond[1]=(gconst31*x1741);
evalcond[2]=(gconst31+(((-1.0)*new_r10*x1744)));
evalcond[3]=((((-1.0)*x1745))+new_r01);
evalcond[4]=((((-1.0)*x1741*x1743))+new_r11);
evalcond[5]=((((-1.0)*x1745))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x1744))+((new_r01*x1741)));
evalcond[7]=((((-1.0)*x1743))+((new_r01*x1742))+((new_r11*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1746 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst31*gconst32)))),IkReal(((gconst32*gconst32)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1746.valid){
continue;
}
CheckValue<IkReal> x1747=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*new_r00))+(((-1.0)*gconst31*new_r10)))),-1);
if(!x1747.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1746.value)+(((1.5707963267949)*(x1747.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1748=IKsin(j3);
IkReal x1749=IKcos(j3);
IkReal x1750=((1.0)*gconst31);
IkReal x1751=(gconst32*x1748);
IkReal x1752=((1.0)*x1749);
IkReal x1753=(x1749*x1750);
evalcond[0]=(gconst32+((new_r10*x1748))+((new_r00*x1749)));
evalcond[1]=(((gconst32*x1749))+((gconst31*x1748))+new_r00);
evalcond[2]=(gconst31+(((-1.0)*new_r10*x1752))+((new_r00*x1748)));
evalcond[3]=(gconst32+(((-1.0)*new_r11*x1752))+((new_r01*x1748)));
evalcond[4]=(x1751+(((-1.0)*x1753))+new_r01);
evalcond[5]=(x1751+(((-1.0)*x1753))+new_r10);
evalcond[6]=((((-1.0)*x1750))+((new_r01*x1749))+((new_r11*x1748)));
evalcond[7]=((((-1.0)*x1748*x1750))+(((-1.0)*gconst32*x1752))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1754=((1.0)*new_r10);
CheckValue<IkReal> x1755=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*new_r00))+(((-1.0)*gconst31*x1754)))),-1);
if(!x1755.valid){
continue;
}
CheckValue<IkReal> x1756 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+((gconst31*gconst32)))),IkReal(((((-1.0)*new_r01*x1754))+(gconst32*gconst32))),IKFAST_ATAN2_MAGTHRESH);
if(!x1756.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1755.value)))+(x1756.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1757=IKsin(j3);
IkReal x1758=IKcos(j3);
IkReal x1759=((1.0)*gconst31);
IkReal x1760=(gconst32*x1757);
IkReal x1761=((1.0)*x1758);
IkReal x1762=(x1758*x1759);
evalcond[0]=(gconst32+((new_r00*x1758))+((new_r10*x1757)));
evalcond[1]=(((gconst32*x1758))+((gconst31*x1757))+new_r00);
evalcond[2]=(gconst31+((new_r00*x1757))+(((-1.0)*new_r10*x1761)));
evalcond[3]=(gconst32+((new_r01*x1757))+(((-1.0)*new_r11*x1761)));
evalcond[4]=((((-1.0)*x1762))+x1760+new_r01);
evalcond[5]=((((-1.0)*x1762))+x1760+new_r10);
evalcond[6]=((((-1.0)*x1759))+((new_r01*x1758))+((new_r11*x1757)));
evalcond[7]=((((-1.0)*gconst32*x1761))+(((-1.0)*x1757*x1759))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1763=((1.0)*new_r10);
CheckValue<IkReal> x1764 = IKatan2WithCheck(IkReal((((gconst32*new_r11))+((gconst32*new_r00)))),IkReal(((((-1.0)*gconst32*x1763))+((gconst32*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1764.valid){
continue;
}
CheckValue<IkReal> x1765=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r11*x1763)))),-1);
if(!x1765.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1764.value)+(((1.5707963267949)*(x1765.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1766=IKsin(j3);
IkReal x1767=IKcos(j3);
IkReal x1768=((1.0)*gconst31);
IkReal x1769=(gconst32*x1766);
IkReal x1770=((1.0)*x1767);
IkReal x1771=(x1767*x1768);
evalcond[0]=(((new_r00*x1767))+((new_r10*x1766))+gconst32);
evalcond[1]=(((gconst31*x1766))+((gconst32*x1767))+new_r00);
evalcond[2]=(((new_r00*x1766))+gconst31+(((-1.0)*new_r10*x1770)));
evalcond[3]=(((new_r01*x1766))+gconst32+(((-1.0)*new_r11*x1770)));
evalcond[4]=(x1769+(((-1.0)*x1771))+new_r01);
evalcond[5]=(x1769+(((-1.0)*x1771))+new_r10);
evalcond[6]=((((-1.0)*x1768))+((new_r11*x1766))+((new_r01*x1767)));
evalcond[7]=((((-1.0)*gconst32*x1770))+(((-1.0)*x1766*x1768))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1774 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x1774)==0){
continue;
}
IkReal x1772=pow(x1774,-0.5);
IkReal x1773=((1.0)*x1772);
CheckValue<IkReal> x1775 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1775.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x1775.value))));
IkReal gconst34=(new_r10*x1773);
IkReal gconst35=(new_r00*x1773);
CheckValue<IkReal> x1776 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1776.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x1776.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
CheckValue<IkReal> x1780 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1780.valid){
continue;
}
IkReal x1777=((1.0)*(x1780.value));
IkReal x1778=x1772;
IkReal x1779=((1.0)*x1778);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x1777)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x1777)));
IkReal gconst34=(new_r10*x1779);
IkReal gconst35=(new_r00*x1779);
IkReal x1781=new_r00*new_r00;
IkReal x1782=((1.0)*new_r00);
IkReal x1783=((((-1.0)*new_r01*x1782))+(((-1.0)*new_r10*new_r11)));
IkReal x1784=x1772;
IkReal x1785=(new_r00*x1784);
j3eval[0]=x1783;
j3eval[1]=((IKabs((((new_r11*x1785))+((x1781*x1784)))))+(IKabs(((((-1.0)*new_r10*x1782*x1784))+((new_r01*x1785))))));
j3eval[2]=IKsign(x1783);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x1789 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1789.valid){
continue;
}
IkReal x1786=((1.0)*(x1789.value));
IkReal x1787=x1772;
IkReal x1788=((1.0)*x1787);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x1786)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x1786)));
IkReal gconst34=(new_r10*x1788);
IkReal gconst35=(new_r00*x1788);
IkReal x1790=new_r10*new_r10;
IkReal x1791=new_r00*new_r00;
IkReal x1792=((1.0)*new_r01);
CheckValue<IkReal> x1796=IKPowWithIntegerCheck((x1791+x1790),-1);
if(!x1796.valid){
continue;
}
IkReal x1793=x1796.value;
IkReal x1794=(new_r10*x1793);
IkReal x1795=(new_r01*x1793);
j3eval[0]=((IKabs((((x1795*(new_r00*new_r00*new_r00)))+((new_r00*x1790*x1795))+((new_r00*x1794)))))+(IKabs(((((-1.0)*x1792*x1794*(new_r10*new_r10)))+(((-1.0)*x1791*x1792*x1794))+((x1791*x1793))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x1800 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1800.valid){
continue;
}
IkReal x1797=((1.0)*(x1800.value));
IkReal x1798=x1772;
IkReal x1799=((1.0)*x1798);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x1797)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x1797)));
IkReal gconst34=(new_r10*x1799);
IkReal gconst35=(new_r00*x1799);
IkReal x1801=new_r00*new_r00;
IkReal x1802=new_r10*new_r10;
CheckValue<IkReal> x1806=IKPowWithIntegerCheck((x1802+x1801),-1);
if(!x1806.valid){
continue;
}
IkReal x1803=x1806.value;
IkReal x1804=(new_r10*x1803);
IkReal x1805=((1.0)*x1803);
j3eval[0]=((IKabs((((x1801*x1803))+(((-1.0)*x1801*x1802*x1805))+(((-1.0)*x1805*(x1802*x1802))))))+(IKabs((((new_r00*x1804))+((new_r00*x1804*(new_r10*new_r10)))+((x1804*(new_r00*new_r00*new_r00)))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
IkReal x1807=((1.0)*(x1808.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x1807)));
new_r11=0;
new_r00=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x1807)));
IkReal x1809 = new_r10*new_r10;
if(IKabs(x1809)==0){
continue;
}
IkReal gconst34=((1.0)*new_r10*(pow(x1809,-0.5)));
IkReal gconst35=0;
j3eval[0]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1810=IKPowWithIntegerCheck(gconst34,-1);
if(!x1810.valid){
continue;
}
cj3array[0]=(new_r01*(x1810.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1811=IKsin(j3);
IkReal x1812=IKcos(j3);
IkReal x1813=((1.0)*gconst34);
evalcond[0]=(new_r01*x1811);
evalcond[1]=(new_r10*x1811);
evalcond[2]=(gconst34*x1811);
evalcond[3]=(gconst34+(((-1.0)*new_r10*x1812)));
evalcond[4]=((((-1.0)*x1812*x1813))+new_r10);
evalcond[5]=((((-1.0)*x1813))+((new_r01*x1812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1814=IKPowWithIntegerCheck(new_r10,-1);
if(!x1814.valid){
continue;
}
cj3array[0]=(gconst34*(x1814.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1815=IKsin(j3);
IkReal x1816=IKcos(j3);
IkReal x1817=((1.0)*gconst34);
IkReal x1818=(x1816*x1817);
evalcond[0]=(new_r01*x1815);
evalcond[1]=(new_r10*x1815);
evalcond[2]=(gconst34*x1815);
evalcond[3]=((((-1.0)*x1818))+new_r01);
evalcond[4]=((((-1.0)*x1818))+new_r10);
evalcond[5]=((((-1.0)*x1817))+((new_r01*x1816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst35;
evalcond[2]=gconst34;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
CheckValue<IkReal> x1820 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1820.valid){
continue;
}
IkReal x1819=((1.0)*(x1820.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x1819)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x1819)));
IkReal gconst34=((1.0)*new_r10);
IkReal gconst35=((1.0)*new_r00);
j3eval[0]=-1.0;
j3eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
CheckValue<IkReal> x1822 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1822.valid){
continue;
}
IkReal x1821=((1.0)*(x1822.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x1821)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x1821)));
IkReal gconst34=((1.0)*new_r10);
IkReal gconst35=((1.0)*new_r00);
j3eval[0]=-1.0;
j3eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
CheckValue<IkReal> x1824 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1824.valid){
continue;
}
IkReal x1823=((1.0)*(x1824.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x1823)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x1823)));
IkReal gconst34=((1.0)*new_r10);
IkReal gconst35=((1.0)*new_r00);
j3eval[0]=-1.0;
j3eval[1]=-1.0;
j3eval[2]=((IKabs(((1.0)+(((-2.0)*(new_r10*new_r10))))))+(IKabs(((2.0)*new_r00*new_r10))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1825=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*new_r10))+(((-1.0)*gconst35*new_r00)))),-1);
if(!x1825.valid){
continue;
}
CheckValue<IkReal> x1826 = IKatan2WithCheck(IkReal((((gconst34*gconst35))+((new_r00*new_r10)))),IkReal(((gconst35*gconst35)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1826.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1825.value)))+(x1826.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1827=IKsin(j3);
IkReal x1828=IKcos(j3);
IkReal x1829=(gconst35*x1827);
IkReal x1830=(gconst34*x1827);
IkReal x1831=(gconst35*x1828);
IkReal x1832=((1.0)*x1828);
IkReal x1833=(gconst34*x1832);
evalcond[0]=((((-1.0)*x1833))+x1829);
evalcond[1]=(((new_r10*x1827))+((new_r00*x1828))+gconst35);
evalcond[2]=(x1830+x1831+new_r00);
evalcond[3]=(((new_r00*x1827))+gconst34+(((-1.0)*new_r10*x1832)));
evalcond[4]=((((-1.0)*x1830))+(((-1.0)*x1831)));
evalcond[5]=((((-1.0)*x1833))+x1829+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1834 = IKatan2WithCheck(IkReal((gconst34*new_r00)),IkReal((gconst35*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1834.valid){
continue;
}
CheckValue<IkReal> x1835=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst34*gconst34)))+(((-1.0)*(gconst35*gconst35))))),-1);
if(!x1835.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1834.value)+(((1.5707963267949)*(x1835.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1836=IKsin(j3);
IkReal x1837=IKcos(j3);
IkReal x1838=(gconst35*x1836);
IkReal x1839=(gconst34*x1836);
IkReal x1840=(gconst35*x1837);
IkReal x1841=((1.0)*x1837);
IkReal x1842=(gconst34*x1841);
evalcond[0]=((((-1.0)*x1842))+x1838);
evalcond[1]=(((new_r00*x1837))+gconst35+((new_r10*x1836)));
evalcond[2]=(x1840+x1839+new_r00);
evalcond[3]=((((-1.0)*new_r10*x1841))+((new_r00*x1836))+gconst34);
evalcond[4]=((((-1.0)*x1839))+(((-1.0)*x1840)));
evalcond[5]=((((-1.0)*x1842))+x1838+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1843=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*new_r10))+(((-1.0)*gconst35*new_r00)))),-1);
if(!x1843.valid){
continue;
}
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal((gconst34*gconst35)),IkReal(gconst35*gconst35),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1843.value)))+(x1844.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1845=IKsin(j3);
IkReal x1846=IKcos(j3);
IkReal x1847=(gconst35*x1845);
IkReal x1848=(gconst34*x1845);
IkReal x1849=(gconst35*x1846);
IkReal x1850=((1.0)*x1846);
IkReal x1851=(gconst34*x1850);
evalcond[0]=(x1847+(((-1.0)*x1851)));
evalcond[1]=(gconst35+((new_r00*x1846))+((new_r10*x1845)));
evalcond[2]=(x1849+x1848+new_r00);
evalcond[3]=(gconst34+(((-1.0)*new_r10*x1850))+((new_r00*x1845)));
evalcond[4]=((((-1.0)*x1849))+(((-1.0)*x1848)));
evalcond[5]=(x1847+new_r10+(((-1.0)*x1851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
IkReal x1852=((1.0)*(x1853.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x1852)));
new_r01=0;
new_r10=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x1852)));
IkReal gconst34=0;
IkReal x1854 = new_r00*new_r00;
if(IKabs(x1854)==0){
continue;
}
IkReal gconst35=((1.0)*new_r00*(pow(x1854,-0.5)));
j3eval[0]=new_r11;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1855=IKPowWithIntegerCheck(gconst35,-1);
if(!x1855.valid){
continue;
}
cj3array[0]=(new_r11*(x1855.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1856=IKsin(j3);
IkReal x1857=IKcos(j3);
evalcond[0]=(new_r00*x1856);
evalcond[1]=(new_r11*x1856);
evalcond[2]=(gconst35*x1856);
evalcond[3]=(((new_r00*x1857))+gconst35);
evalcond[4]=(new_r00+((gconst35*x1857)));
evalcond[5]=(gconst35+(((-1.0)*new_r11*x1857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1858=IKPowWithIntegerCheck(new_r11,-1);
if(!x1858.valid){
continue;
}
cj3array[0]=(gconst35*(x1858.value));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1859=IKsin(j3);
IkReal x1860=IKcos(j3);
IkReal x1861=(gconst35*x1860);
evalcond[0]=(new_r00*x1859);
evalcond[1]=(new_r11*x1859);
evalcond[2]=(gconst35*x1859);
evalcond[3]=(gconst35+((new_r00*x1860)));
evalcond[4]=(x1861+new_r00);
evalcond[5]=(new_r11+(((-1.0)*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x1863 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1863.valid){
continue;
}
IkReal x1862=((1.0)*(x1863.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x1862)));
new_r00=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x1862)));
IkReal x1864 = new_r10*new_r10;
if(IKabs(x1864)==0){
continue;
}
IkReal gconst34=((1.0)*new_r10*(pow(x1864,-0.5)));
IkReal gconst35=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x1866 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1866.valid){
continue;
}
IkReal x1865=((1.0)*(x1866.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x1865)));
new_r00=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x1865)));
IkReal x1867 = new_r10*new_r10;
if(IKabs(x1867)==0){
continue;
}
IkReal gconst34=((1.0)*new_r10*(pow(x1867,-0.5)));
IkReal gconst35=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
IkReal x1868=((1.0)*(x1869.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x1868)));
new_r00=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x1868)));
IkReal x1870 = new_r10*new_r10;
if(IKabs(x1870)==0){
continue;
}
IkReal gconst34=((1.0)*new_r10*(pow(x1870,-0.5)));
IkReal gconst35=0;
j3eval[0]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1871=IKPowWithIntegerCheck(gconst34,-1);
if(!x1871.valid){
continue;
}
CheckValue<IkReal> x1872=IKPowWithIntegerCheck(new_r10,-1);
if(!x1872.valid){
continue;
}
if( IKabs((new_r11*(x1871.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst34*(x1872.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x1871.value)))+IKsqr((gconst34*(x1872.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((new_r11*(x1871.value)), (gconst34*(x1872.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1873=IKsin(j3);
IkReal x1874=IKcos(j3);
IkReal x1875=((1.0)*gconst34);
IkReal x1876=((1.0)*x1874);
IkReal x1877=(x1874*x1875);
evalcond[0]=(new_r10*x1873);
evalcond[1]=(gconst34*x1873);
evalcond[2]=((((-1.0)*new_r10*x1876))+gconst34);
evalcond[3]=((((-1.0)*x1877))+new_r01);
evalcond[4]=((((-1.0)*x1873*x1875))+new_r11);
evalcond[5]=((((-1.0)*x1877))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x1876))+((new_r01*x1873)));
evalcond[7]=((((-1.0)*x1875))+((new_r01*x1874))+((new_r11*x1873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1878 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1878.valid){
continue;
}
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign(gconst34),-1);
if(!x1879.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1878.value)+(((1.5707963267949)*(x1879.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1880=IKsin(j3);
IkReal x1881=IKcos(j3);
IkReal x1882=((1.0)*gconst34);
IkReal x1883=((1.0)*x1881);
IkReal x1884=(x1881*x1882);
evalcond[0]=(new_r10*x1880);
evalcond[1]=(gconst34*x1880);
evalcond[2]=(gconst34+(((-1.0)*new_r10*x1883)));
evalcond[3]=(new_r01+(((-1.0)*x1884)));
evalcond[4]=((((-1.0)*x1880*x1882))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x1884)));
evalcond[6]=(((new_r01*x1880))+(((-1.0)*new_r11*x1883)));
evalcond[7]=(((new_r11*x1880))+((new_r01*x1881))+(((-1.0)*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1885 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1885.valid){
continue;
}
CheckValue<IkReal> x1886=IKPowWithIntegerCheck(IKsign(gconst34),-1);
if(!x1886.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1885.value)+(((1.5707963267949)*(x1886.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1887=IKsin(j3);
IkReal x1888=IKcos(j3);
IkReal x1889=((1.0)*gconst34);
IkReal x1890=((1.0)*x1888);
IkReal x1891=(x1888*x1889);
evalcond[0]=(new_r10*x1887);
evalcond[1]=(gconst34*x1887);
evalcond[2]=(gconst34+(((-1.0)*new_r10*x1890)));
evalcond[3]=(new_r01+(((-1.0)*x1891)));
evalcond[4]=((((-1.0)*x1887*x1889))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x1891)));
evalcond[6]=((((-1.0)*new_r11*x1890))+((new_r01*x1887)));
evalcond[7]=(((new_r11*x1887))+((new_r01*x1888))+(((-1.0)*x1889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1892=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*new_r10))+(((-1.0)*gconst35*new_r00)))),-1);
if(!x1892.valid){
continue;
}
CheckValue<IkReal> x1893 = IKatan2WithCheck(IkReal((((gconst34*gconst35))+((new_r00*new_r10)))),IkReal(((gconst35*gconst35)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1893.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1892.value)))+(x1893.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1894=IKsin(j3);
IkReal x1895=IKcos(j3);
IkReal x1896=(gconst35*x1894);
IkReal x1897=((1.0)*x1895);
IkReal x1898=(gconst34*x1894);
IkReal x1899=(gconst34*x1897);
evalcond[0]=(((new_r10*x1894))+gconst35+((new_r00*x1895)));
evalcond[1]=(((gconst35*x1895))+x1898+new_r00);
evalcond[2]=(gconst34+((new_r00*x1894))+(((-1.0)*new_r10*x1897)));
evalcond[3]=(gconst35+(((-1.0)*new_r11*x1897))+((new_r01*x1894)));
evalcond[4]=(x1896+new_r01+(((-1.0)*x1899)));
evalcond[5]=(x1896+new_r10+(((-1.0)*x1899)));
evalcond[6]=(((new_r11*x1894))+((new_r01*x1895))+(((-1.0)*gconst34)));
evalcond[7]=((((-1.0)*x1898))+(((-1.0)*gconst35*x1897))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1900=((1.0)*new_r10);
CheckValue<IkReal> x1901=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*x1900))+(((-1.0)*gconst35*new_r00)))),-1);
if(!x1901.valid){
continue;
}
CheckValue<IkReal> x1902 = IKatan2WithCheck(IkReal((((gconst34*gconst35))+((new_r00*new_r01)))),IkReal(((gconst35*gconst35)+(((-1.0)*new_r01*x1900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1902.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1901.value)))+(x1902.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1903=IKsin(j3);
IkReal x1904=IKcos(j3);
IkReal x1905=(gconst35*x1903);
IkReal x1906=((1.0)*x1904);
IkReal x1907=(gconst34*x1903);
IkReal x1908=(gconst34*x1906);
evalcond[0]=(gconst35+((new_r10*x1903))+((new_r00*x1904)));
evalcond[1]=(x1907+((gconst35*x1904))+new_r00);
evalcond[2]=((((-1.0)*new_r10*x1906))+gconst34+((new_r00*x1903)));
evalcond[3]=((((-1.0)*new_r11*x1906))+gconst35+((new_r01*x1903)));
evalcond[4]=(x1905+new_r01+(((-1.0)*x1908)));
evalcond[5]=(x1905+new_r10+(((-1.0)*x1908)));
evalcond[6]=(((new_r11*x1903))+((new_r01*x1904))+(((-1.0)*gconst34)));
evalcond[7]=((((-1.0)*x1907))+(((-1.0)*gconst35*x1906))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1909=((1.0)*new_r10);
CheckValue<IkReal> x1910=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1909))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1910.valid){
continue;
}
CheckValue<IkReal> x1911 = IKatan2WithCheck(IkReal((((gconst35*new_r00))+((gconst35*new_r11)))),IkReal((((gconst35*new_r01))+(((-1.0)*gconst35*x1909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1911.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1910.value)))+(x1911.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1912=IKsin(j3);
IkReal x1913=IKcos(j3);
IkReal x1914=(gconst35*x1912);
IkReal x1915=((1.0)*x1913);
IkReal x1916=(gconst34*x1912);
IkReal x1917=(gconst34*x1915);
evalcond[0]=(gconst35+((new_r10*x1912))+((new_r00*x1913)));
evalcond[1]=(x1916+((gconst35*x1913))+new_r00);
evalcond[2]=((((-1.0)*new_r10*x1915))+gconst34+((new_r00*x1912)));
evalcond[3]=(gconst35+(((-1.0)*new_r11*x1915))+((new_r01*x1912)));
evalcond[4]=(x1914+new_r01+(((-1.0)*x1917)));
evalcond[5]=(x1914+new_r10+(((-1.0)*x1917)));
evalcond[6]=(((new_r11*x1912))+((new_r01*x1913))+(((-1.0)*gconst34)));
evalcond[7]=((((-1.0)*x1916))+new_r11+(((-1.0)*gconst35*x1915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1918=((-1.0)*new_r10);
IkReal x1920 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x1920)==0){
continue;
}
IkReal x1919=pow(x1920,-0.5);
CheckValue<IkReal> x1921 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1918),IKFAST_ATAN2_MAGTHRESH);
if(!x1921.valid){
continue;
}
IkReal gconst36=((-1.0)*(x1921.value));
IkReal gconst37=(new_r00*x1919);
IkReal gconst38=(x1918*x1919);
CheckValue<IkReal> x1922 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1922.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1922.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x1923=((-1.0)*new_r10);
CheckValue<IkReal> x1926 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1923),IKFAST_ATAN2_MAGTHRESH);
if(!x1926.valid){
continue;
}
IkReal x1924=((-1.0)*(x1926.value));
IkReal x1925=x1919;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x1924;
IkReal gconst36=x1924;
IkReal gconst37=(new_r00*x1925);
IkReal gconst38=(x1923*x1925);
IkReal x1927=new_r10*new_r10;
IkReal x1928=((1.0)*new_r00);
IkReal x1929=((1.0)*new_r10*new_r11);
IkReal x1930=((((-1.0)*new_r01*x1928))+(((-1.0)*x1929)));
IkReal x1931=x1919;
IkReal x1932=(new_r10*x1931);
j3eval[0]=x1930;
j3eval[1]=((IKabs(((((-1.0)*new_r01*x1932))+((x1927*x1931)))))+(IKabs(((((-1.0)*x1928*x1932))+(((-1.0)*x1929*x1931))))));
j3eval[2]=IKsign(x1930);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1933=((-1.0)*new_r10);
CheckValue<IkReal> x1936 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1933),IKFAST_ATAN2_MAGTHRESH);
if(!x1936.valid){
continue;
}
IkReal x1934=((-1.0)*(x1936.value));
IkReal x1935=x1919;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x1934;
IkReal gconst36=x1934;
IkReal gconst37=(new_r00*x1935);
IkReal gconst38=(x1933*x1935);
IkReal x1937=new_r10*new_r10;
CheckValue<IkReal> x1940=IKPowWithIntegerCheck((x1937+(new_r00*new_r00)),-1);
if(!x1940.valid){
continue;
}
IkReal x1938=x1940.value;
IkReal x1939=(new_r00*x1938);
j3eval[0]=((IKabs((((new_r00*new_r11))+((x1937*x1938)))))+(IKabs((((new_r01*x1937*x1939))+((new_r10*x1939))+((new_r01*x1939*(new_r00*new_r00)))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1941=((-1.0)*new_r10);
CheckValue<IkReal> x1944 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1941),IKFAST_ATAN2_MAGTHRESH);
if(!x1944.valid){
continue;
}
IkReal x1942=((-1.0)*(x1944.value));
IkReal x1943=x1919;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x1942;
IkReal gconst36=x1942;
IkReal gconst37=(new_r00*x1943);
IkReal gconst38=(x1941*x1943);
IkReal x1945=new_r10*new_r10;
IkReal x1946=new_r00*new_r00;
CheckValue<IkReal> x1950=IKPowWithIntegerCheck((x1946+x1945),-1);
if(!x1950.valid){
continue;
}
IkReal x1947=x1950.value;
IkReal x1948=(new_r10*x1947);
IkReal x1949=(x1945*x1947);
j3eval[0]=((IKabs((x1949+(((-1.0)*x1946*x1949))+(((-1.0)*x1947*(x1946*x1946))))))+(IKabs((((new_r00*x1948))+((x1948*(new_r00*new_r00*new_r00)))+((new_r00*x1948*(new_r10*new_r10)))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x1951=((-1.0)*new_r10);
CheckValue<IkReal> x1953 = IKatan2WithCheck(IkReal(0),IkReal(x1951),IKFAST_ATAN2_MAGTHRESH);
if(!x1953.valid){
continue;
}
IkReal x1952=((-1.0)*(x1953.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x1952;
new_r11=0;
new_r00=0;
IkReal gconst36=x1952;
IkReal gconst37=0;
IkReal x1954 = new_r10*new_r10;
if(IKabs(x1954)==0){
continue;
}
IkReal gconst38=(x1951*(pow(x1954,-0.5)));
j3eval[0]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1955=IKPowWithIntegerCheck(gconst38,-1);
if(!x1955.valid){
continue;
}
sj3array[0]=((-1.0)*new_r01*(x1955.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1956=IKcos(j3);
IkReal x1957=IKsin(j3);
evalcond[0]=(new_r01*x1956);
evalcond[1]=(gconst38*x1956);
evalcond[2]=((-1.0)*new_r10*x1956);
evalcond[3]=(((new_r01*x1957))+gconst38);
evalcond[4]=(((new_r10*x1957))+gconst38);
evalcond[5]=(((gconst38*x1957))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(new_r01,-1);
if(!x1958.valid){
continue;
}
sj3array[0]=((-1.0)*gconst38*(x1958.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1959=IKcos(j3);
IkReal x1960=IKsin(j3);
IkReal x1961=(gconst38*x1960);
evalcond[0]=(new_r01*x1959);
evalcond[1]=(gconst38*x1959);
evalcond[2]=((-1.0)*new_r10*x1959);
evalcond[3]=(x1961+new_r01);
evalcond[4]=(gconst38+((new_r10*x1960)));
evalcond[5]=(x1961+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst38;
evalcond[2]=gconst37;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x1962=((-1.0)*new_r10);
CheckValue<IkReal> x1964 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1962),IKFAST_ATAN2_MAGTHRESH);
if(!x1964.valid){
continue;
}
IkReal x1963=((-1.0)*(x1964.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x1963;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst36=x1963;
IkReal gconst37=new_r00;
IkReal gconst38=x1962;
j3eval[0]=-1.0;
j3eval[1]=-1.0;
j3eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x1965=((-1.0)*new_r10);
CheckValue<IkReal> x1967 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1965),IKFAST_ATAN2_MAGTHRESH);
if(!x1967.valid){
continue;
}
IkReal x1966=((-1.0)*(x1967.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x1966;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst36=x1966;
IkReal gconst37=new_r00;
IkReal gconst38=x1965;
j3eval[0]=-1.0;
j3eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x1968=((-1.0)*new_r10);
CheckValue<IkReal> x1970 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1968),IKFAST_ATAN2_MAGTHRESH);
if(!x1970.valid){
continue;
}
IkReal x1969=((-1.0)*(x1970.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x1969;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst36=x1969;
IkReal gconst37=new_r00;
IkReal gconst38=x1968;
j3eval[0]=1.0;
j3eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r10*new_r10))))))))+(IKabs((new_r00*new_r10))));
j3eval[2]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1971=((1.0)*gconst38);
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal(((((-1.0)*(new_r00*new_r00)))+(gconst38*gconst38))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst37*x1971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
CheckValue<IkReal> x1973=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1971))+((gconst37*new_r00)))),-1);
if(!x1973.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1972.value)+(((1.5707963267949)*(x1973.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1974=IKsin(j3);
IkReal x1975=IKcos(j3);
IkReal x1976=(gconst38*x1974);
IkReal x1977=((1.0)*x1975);
IkReal x1978=(gconst37*x1974);
IkReal x1979=(gconst37*x1977);
evalcond[0]=((((-1.0)*x1979))+x1976);
evalcond[1]=(((new_r10*x1974))+((new_r00*x1975))+gconst38);
evalcond[2]=(((gconst38*x1975))+x1978+new_r00);
evalcond[3]=((((-1.0)*new_r10*x1977))+((new_r00*x1974))+gconst37);
evalcond[4]=((((-1.0)*gconst38*x1977))+(((-1.0)*x1978)));
evalcond[5]=((((-1.0)*x1979))+x1976+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1980 = IKatan2WithCheck(IkReal((gconst37*new_r00)),IkReal((gconst38*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1980.valid){
continue;
}
CheckValue<IkReal> x1981=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst38*gconst38)))+(((-1.0)*(gconst37*gconst37))))),-1);
if(!x1981.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1980.value)+(((1.5707963267949)*(x1981.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1982=IKsin(j3);
IkReal x1983=IKcos(j3);
IkReal x1984=(gconst38*x1982);
IkReal x1985=((1.0)*x1983);
IkReal x1986=(gconst37*x1982);
IkReal x1987=(gconst37*x1985);
evalcond[0]=((((-1.0)*x1987))+x1984);
evalcond[1]=(((new_r00*x1983))+gconst38+((new_r10*x1982)));
evalcond[2]=(x1986+new_r00+((gconst38*x1983)));
evalcond[3]=((((-1.0)*new_r10*x1985))+((new_r00*x1982))+gconst37);
evalcond[4]=((((-1.0)*gconst38*x1985))+(((-1.0)*x1986)));
evalcond[5]=((((-1.0)*x1987))+x1984+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1988=IKPowWithIntegerCheck(IKsign((((gconst38*new_r10))+(((-1.0)*gconst37*new_r00)))),-1);
if(!x1988.valid){
continue;
}
CheckValue<IkReal> x1989 = IKatan2WithCheck(IkReal(gconst37*gconst37),IkReal((gconst37*gconst38)),IKFAST_ATAN2_MAGTHRESH);
if(!x1989.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1988.value)))+(x1989.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1990=IKsin(j3);
IkReal x1991=IKcos(j3);
IkReal x1992=(gconst38*x1990);
IkReal x1993=((1.0)*x1991);
IkReal x1994=(gconst37*x1990);
IkReal x1995=(gconst37*x1993);
evalcond[0]=(x1992+(((-1.0)*x1995)));
evalcond[1]=(((new_r00*x1991))+gconst38+((new_r10*x1990)));
evalcond[2]=(x1994+new_r00+((gconst38*x1991)));
evalcond[3]=(((new_r00*x1990))+gconst37+(((-1.0)*new_r10*x1993)));
evalcond[4]=((((-1.0)*gconst38*x1993))+(((-1.0)*x1994)));
evalcond[5]=(x1992+(((-1.0)*x1995))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1996=IKPowWithIntegerCheck(gconst37,-1);
if(!x1996.valid){
continue;
}
sj3array[0]=(new_r11*(x1996.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1997=IKcos(j3);
IkReal x1998=IKsin(j3);
IkReal x1999=((-1.0)*x1997);
evalcond[0]=(new_r00*x1997);
evalcond[1]=(new_r11*x1999);
evalcond[2]=(gconst37*x1999);
evalcond[3]=(((new_r00*x1998))+gconst37);
evalcond[4]=(((gconst37*x1998))+new_r00);
evalcond[5]=(((new_r11*x1998))+(((-1.0)*gconst37)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
IkReal x2000=((-1.0)*(x2001.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x2000;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst36=x2000;
IkReal x2002 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x2002)==0){
continue;
}
IkReal gconst37=(new_r00*(pow(x2002,-0.5)));
IkReal gconst38=0;
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x2004 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2004.valid){
continue;
}
IkReal x2003=((-1.0)*(x2004.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x2003;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst36=x2003;
IkReal x2005 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x2005)==0){
continue;
}
IkReal gconst37=(new_r00*(pow(x2005,-0.5)));
IkReal gconst38=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
CheckValue<IkReal> x2007 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2007.valid){
continue;
}
IkReal x2006=((-1.0)*(x2007.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x2006;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst36=x2006;
IkReal x2008 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x2008)==0){
continue;
}
IkReal gconst37=(new_r00*(pow(x2008,-0.5)));
IkReal gconst38=0;
j3eval[0]=new_r00;
j3eval[1]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2009=IKPowWithIntegerCheck(new_r00,-1);
if(!x2009.valid){
continue;
}
CheckValue<IkReal> x2010=IKPowWithIntegerCheck(new_r01,-1);
if(!x2010.valid){
continue;
}
if( IKabs(((-1.0)*gconst37*(x2009.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst37*(x2010.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst37*(x2009.value)))+IKsqr((gconst37*(x2010.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst37*(x2009.value)), (gconst37*(x2010.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2011=IKsin(j3);
IkReal x2012=IKcos(j3);
IkReal x2013=((1.0)*gconst37);
IkReal x2014=(gconst37*x2011);
evalcond[0]=(new_r01*x2011);
evalcond[1]=(new_r00*x2012);
evalcond[2]=((-1.0)*x2014);
evalcond[3]=((-1.0)*gconst37*x2012);
evalcond[4]=(gconst37+((new_r00*x2011)));
evalcond[5]=(x2014+new_r00);
evalcond[6]=((((-1.0)*x2012*x2013))+new_r01);
evalcond[7]=((((-1.0)*x2013))+((new_r01*x2012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2015=IKPowWithIntegerCheck(new_r00,-1);
if(!x2015.valid){
continue;
}
CheckValue<IkReal> x2016=IKPowWithIntegerCheck(gconst37,-1);
if(!x2016.valid){
continue;
}
if( IKabs(((-1.0)*gconst37*(x2015.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x2016.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst37*(x2015.value)))+IKsqr((new_r01*(x2016.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst37*(x2015.value)), (new_r01*(x2016.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2017=IKsin(j3);
IkReal x2018=IKcos(j3);
IkReal x2019=((1.0)*gconst37);
IkReal x2020=(gconst37*x2017);
evalcond[0]=(new_r01*x2017);
evalcond[1]=(new_r00*x2018);
evalcond[2]=((-1.0)*x2020);
evalcond[3]=((-1.0)*gconst37*x2018);
evalcond[4]=(gconst37+((new_r00*x2017)));
evalcond[5]=(x2020+new_r00);
evalcond[6]=(new_r01+(((-1.0)*x2018*x2019)));
evalcond[7]=((((-1.0)*x2019))+((new_r01*x2018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2021=IKPowWithIntegerCheck(IKsign(gconst37),-1);
if(!x2021.valid){
continue;
}
CheckValue<IkReal> x2022 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2022.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2021.value)))+(x2022.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2023=IKsin(j3);
IkReal x2024=IKcos(j3);
IkReal x2025=((1.0)*gconst37);
IkReal x2026=(gconst37*x2023);
evalcond[0]=(new_r01*x2023);
evalcond[1]=(new_r00*x2024);
evalcond[2]=((-1.0)*x2026);
evalcond[3]=((-1.0)*gconst37*x2024);
evalcond[4]=(((new_r00*x2023))+gconst37);
evalcond[5]=(x2026+new_r00);
evalcond[6]=((((-1.0)*x2024*x2025))+new_r01);
evalcond[7]=(((new_r01*x2024))+(((-1.0)*x2025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r10);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x2028 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2028.valid){
continue;
}
IkReal x2027=((-1.0)*(x2028.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x2027;
new_r10=0;
IkReal gconst36=x2027;
IkReal x2029 = new_r00*new_r00;
if(IKabs(x2029)==0){
continue;
}
IkReal gconst37=(new_r00*(pow(x2029,-0.5)));
IkReal gconst38=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x2031 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2031.valid){
continue;
}
IkReal x2030=((-1.0)*(x2031.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x2030;
new_r10=0;
IkReal gconst36=x2030;
IkReal x2032 = new_r00*new_r00;
if(IKabs(x2032)==0){
continue;
}
IkReal gconst37=(new_r00*(pow(x2032,-0.5)));
IkReal gconst38=0;
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
CheckValue<IkReal> x2034 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2034.valid){
continue;
}
IkReal x2033=((-1.0)*(x2034.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x2033;
new_r10=0;
IkReal gconst36=x2033;
IkReal x2035 = new_r00*new_r00;
if(IKabs(x2035)==0){
continue;
}
IkReal gconst37=(new_r00*(pow(x2035,-0.5)));
IkReal gconst38=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2036=IKPowWithIntegerCheck(new_r00,-1);
if(!x2036.valid){
continue;
}
CheckValue<IkReal> x2037=IKPowWithIntegerCheck(gconst37,-1);
if(!x2037.valid){
continue;
}
if( IKabs(((-1.0)*gconst37*(x2036.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x2037.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst37*(x2036.value)))+IKsqr((new_r01*(x2037.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst37*(x2036.value)), (new_r01*(x2037.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2038=IKcos(j3);
IkReal x2039=IKsin(j3);
IkReal x2040=((1.0)*gconst37);
IkReal x2041=((1.0)*x2038);
evalcond[0]=(new_r00*x2038);
evalcond[1]=((-1.0)*gconst37*x2038);
evalcond[2]=(((new_r00*x2039))+gconst37);
evalcond[3]=(((gconst37*x2039))+new_r00);
evalcond[4]=(new_r01+(((-1.0)*x2038*x2040)));
evalcond[5]=((((-1.0)*x2039*x2040))+new_r11);
evalcond[6]=(((new_r01*x2039))+(((-1.0)*new_r11*x2041)));
evalcond[7]=(((new_r01*x2038))+(((-1.0)*x2040))+((new_r11*x2039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2042=IKPowWithIntegerCheck(IKsign(gconst37),-1);
if(!x2042.valid){
continue;
}
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2042.value)))+(x2043.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2044=IKcos(j3);
IkReal x2045=IKsin(j3);
IkReal x2046=((1.0)*gconst37);
IkReal x2047=((1.0)*x2044);
evalcond[0]=(new_r00*x2044);
evalcond[1]=((-1.0)*gconst37*x2044);
evalcond[2]=(gconst37+((new_r00*x2045)));
evalcond[3]=(((gconst37*x2045))+new_r00);
evalcond[4]=((((-1.0)*x2044*x2046))+new_r01);
evalcond[5]=((((-1.0)*x2045*x2046))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x2047))+((new_r01*x2045)));
evalcond[7]=((((-1.0)*x2046))+((new_r11*x2045))+((new_r01*x2044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2048=IKPowWithIntegerCheck(IKsign(gconst37),-1);
if(!x2048.valid){
continue;
}
CheckValue<IkReal> x2049 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2049.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2048.value)))+(x2049.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2050=IKcos(j3);
IkReal x2051=IKsin(j3);
IkReal x2052=((1.0)*gconst37);
IkReal x2053=((1.0)*x2050);
evalcond[0]=(new_r00*x2050);
evalcond[1]=((-1.0)*gconst37*x2050);
evalcond[2]=(((new_r00*x2051))+gconst37);
evalcond[3]=(((gconst37*x2051))+new_r00);
evalcond[4]=((((-1.0)*x2050*x2052))+new_r01);
evalcond[5]=((((-1.0)*x2051*x2052))+new_r11);
evalcond[6]=(((new_r01*x2051))+(((-1.0)*new_r11*x2053)));
evalcond[7]=(((new_r01*x2050))+((new_r11*x2051))+(((-1.0)*x2052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2054=((1.0)*gconst38);
CheckValue<IkReal> x2055=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x2054))+((gconst37*new_r00)))),-1);
if(!x2055.valid){
continue;
}
CheckValue<IkReal> x2056 = IKatan2WithCheck(IkReal(((((-1.0)*(new_r00*new_r00)))+(gconst38*gconst38))),IkReal(((((-1.0)*gconst37*x2054))+((new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2056.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2055.value)))+(x2056.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2057=IKcos(j3);
IkReal x2058=IKsin(j3);
IkReal x2059=(gconst38*x2058);
IkReal x2060=((1.0)*x2057);
IkReal x2061=(gconst37*x2058);
IkReal x2062=(gconst37*x2060);
evalcond[0]=(((new_r00*x2057))+((new_r10*x2058))+gconst38);
evalcond[1]=(x2061+((gconst38*x2057))+new_r00);
evalcond[2]=(((new_r00*x2058))+gconst37+(((-1.0)*new_r10*x2060)));
evalcond[3]=(((new_r01*x2058))+gconst38+(((-1.0)*new_r11*x2060)));
evalcond[4]=(x2059+(((-1.0)*x2062))+new_r01);
evalcond[5]=(x2059+(((-1.0)*x2062))+new_r10);
evalcond[6]=(((new_r01*x2057))+((new_r11*x2058))+(((-1.0)*gconst37)));
evalcond[7]=((((-1.0)*x2061))+(((-1.0)*gconst38*x2060))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2063=((1.0)*gconst37);
CheckValue<IkReal> x2064 = IKatan2WithCheck(IkReal((((new_r00*new_r11))+(gconst38*gconst38))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst38*x2063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2064.valid){
continue;
}
CheckValue<IkReal> x2065=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*new_r01))+(((-1.0)*new_r11*x2063)))),-1);
if(!x2065.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2064.value)+(((1.5707963267949)*(x2065.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2066=IKcos(j3);
IkReal x2067=IKsin(j3);
IkReal x2068=(gconst38*x2067);
IkReal x2069=((1.0)*x2066);
IkReal x2070=(gconst37*x2067);
IkReal x2071=(gconst37*x2069);
evalcond[0]=(gconst38+((new_r10*x2067))+((new_r00*x2066)));
evalcond[1]=(x2070+((gconst38*x2066))+new_r00);
evalcond[2]=(gconst37+(((-1.0)*new_r10*x2069))+((new_r00*x2067)));
evalcond[3]=(gconst38+(((-1.0)*new_r11*x2069))+((new_r01*x2067)));
evalcond[4]=(x2068+(((-1.0)*x2071))+new_r01);
evalcond[5]=(x2068+(((-1.0)*x2071))+new_r10);
evalcond[6]=(((new_r01*x2066))+((new_r11*x2067))+(((-1.0)*gconst37)));
evalcond[7]=((((-1.0)*gconst38*x2069))+(((-1.0)*x2070))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2072=((1.0)*new_r10);
CheckValue<IkReal> x2073 = IKatan2WithCheck(IkReal((((gconst38*new_r00))+((gconst38*new_r11)))),IkReal(((((-1.0)*gconst38*x2072))+((gconst38*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2073.valid){
continue;
}
CheckValue<IkReal> x2074=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x2072))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x2074.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2073.value)+(((1.5707963267949)*(x2074.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2075=IKcos(j3);
IkReal x2076=IKsin(j3);
IkReal x2077=(gconst38*x2076);
IkReal x2078=((1.0)*x2075);
IkReal x2079=(gconst37*x2076);
IkReal x2080=(gconst37*x2078);
evalcond[0]=(gconst38+((new_r00*x2075))+((new_r10*x2076)));
evalcond[1]=(x2079+((gconst38*x2075))+new_r00);
evalcond[2]=(gconst37+(((-1.0)*new_r10*x2078))+((new_r00*x2076)));
evalcond[3]=(gconst38+(((-1.0)*new_r11*x2078))+((new_r01*x2076)));
evalcond[4]=(x2077+(((-1.0)*x2080))+new_r01);
evalcond[5]=(x2077+(((-1.0)*x2080))+new_r10);
evalcond[6]=(((new_r11*x2076))+((new_r01*x2075))+(((-1.0)*gconst37)));
evalcond[7]=((((-1.0)*gconst38*x2078))+(((-1.0)*x2079))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2081=((-1.0)*new_r00);
IkReal x2083 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x2083)==0){
continue;
}
IkReal x2082=pow(x2083,-0.5);
CheckValue<IkReal> x2084 = IKatan2WithCheck(IkReal(x2081),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2084.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x2084.value))));
IkReal gconst40=(x2081*x2082);
IkReal gconst41=((1.0)*new_r10*x2082);
CheckValue<IkReal> x2085 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2085.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2085.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x2086=((-1.0)*new_r00);
CheckValue<IkReal> x2089 = IKatan2WithCheck(IkReal(x2086),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2089.valid){
continue;
}
IkReal x2087=((1.0)*(x2089.value));
IkReal x2088=x2082;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2087)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2087)));
IkReal gconst40=(x2086*x2088);
IkReal gconst41=((1.0)*new_r10*x2088);
IkReal x2090=new_r10*new_r10;
IkReal x2091=(new_r10*new_r11);
IkReal x2092=((((-1.0)*new_r00*new_r01))+(((-1.0)*x2091)));
IkReal x2093=x2082;
IkReal x2094=(new_r10*x2093);
j3eval[0]=x2092;
j3eval[1]=((IKabs((((x2091*x2093))+((new_r00*x2094)))))+(IKabs((((new_r01*x2094))+(((-1.0)*x2090*x2093))))));
j3eval[2]=IKsign(x2092);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x2095=((-1.0)*new_r00);
CheckValue<IkReal> x2098 = IKatan2WithCheck(IkReal(x2095),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2098.valid){
continue;
}
IkReal x2096=((1.0)*(x2098.value));
IkReal x2097=x2082;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2096)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2096)));
IkReal gconst40=(x2095*x2097);
IkReal gconst41=((1.0)*new_r10*x2097);
IkReal x2099=new_r10*new_r10;
IkReal x2100=new_r00*new_r00*new_r00;
CheckValue<IkReal> x2104=IKPowWithIntegerCheck((x2099+(new_r00*new_r00)),-1);
if(!x2104.valid){
continue;
}
IkReal x2101=x2104.value;
IkReal x2102=(x2099*x2101);
IkReal x2103=(x2100*x2101);
j3eval[0]=((IKabs((((new_r11*x2103))+x2102+((new_r00*new_r11*x2102)))))+(IKabs((((new_r00*new_r01*x2102))+((new_r00*new_r10*x2101))+((new_r01*x2103))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x2105=((-1.0)*new_r00);
CheckValue<IkReal> x2108 = IKatan2WithCheck(IkReal(x2105),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2108.valid){
continue;
}
IkReal x2106=((1.0)*(x2108.value));
IkReal x2107=x2082;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2106)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2106)));
IkReal gconst40=(x2105*x2107);
IkReal gconst41=((1.0)*new_r10*x2107);
IkReal x2109=new_r10*new_r10;
IkReal x2110=new_r00*new_r00;
CheckValue<IkReal> x2114=IKPowWithIntegerCheck((x2110+x2109),-1);
if(!x2114.valid){
continue;
}
IkReal x2111=x2114.value;
IkReal x2112=(new_r10*x2111);
IkReal x2113=(x2109*x2111);
j3eval[0]=((IKabs(((((-1.0)*x2110*x2113))+x2113+(((-1.0)*x2111*(x2110*x2110))))))+(IKabs((((new_r00*x2112))+((new_r00*x2112*(new_r10*new_r10)))+((x2112*(new_r00*new_r00*new_r00)))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
CheckValue<IkReal> x2116 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2116.valid){
continue;
}
IkReal x2115=((1.0)*(x2116.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2115)));
new_r11=0;
new_r00=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2115)));
IkReal gconst40=0;
IkReal x2117 = new_r10*new_r10;
if(IKabs(x2117)==0){
continue;
}
IkReal gconst41=((1.0)*new_r10*(pow(x2117,-0.5)));
j3eval[0]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x2118=IKPowWithIntegerCheck(gconst41,-1);
if(!x2118.valid){
continue;
}
sj3array[0]=((-1.0)*new_r01*(x2118.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2119=IKcos(j3);
IkReal x2120=IKsin(j3);
evalcond[0]=(new_r01*x2119);
evalcond[1]=(gconst41*x2119);
evalcond[2]=((-1.0)*new_r10*x2119);
evalcond[3]=(gconst41+((new_r01*x2120)));
evalcond[4]=(gconst41+((new_r10*x2120)));
evalcond[5]=(new_r10+((gconst41*x2120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x2121=IKPowWithIntegerCheck(new_r01,-1);
if(!x2121.valid){
continue;
}
sj3array[0]=((-1.0)*gconst41*(x2121.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2122=IKcos(j3);
IkReal x2123=IKsin(j3);
IkReal x2124=(gconst41*x2123);
evalcond[0]=(new_r01*x2122);
evalcond[1]=(gconst41*x2122);
evalcond[2]=((-1.0)*new_r10*x2122);
evalcond[3]=(x2124+new_r01);
evalcond[4]=(gconst41+((new_r10*x2123)));
evalcond[5]=(x2124+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst41;
evalcond[2]=gconst40;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
IkReal x2125=((-1.0)*new_r00);
CheckValue<IkReal> x2127 = IKatan2WithCheck(IkReal(x2125),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2127.valid){
continue;
}
IkReal x2126=((1.0)*(x2127.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2126)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2126)));
IkReal gconst40=x2125;
IkReal gconst41=((1.0)*new_r10);
j3eval[0]=1.0;
j3eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
j3eval[2]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x2128=((-1.0)*new_r00);
CheckValue<IkReal> x2130 = IKatan2WithCheck(IkReal(x2128),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2130.valid){
continue;
}
IkReal x2129=((1.0)*(x2130.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2129)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2129)));
IkReal gconst40=x2128;
IkReal gconst41=((1.0)*new_r10);
j3eval[0]=-1.0;
j3eval[1]=-1.0;
j3eval[2]=((IKabs(((1.0)*new_r00*new_r10)))+(IKabs(((-1.0)+(new_r10*new_r10)))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x2131=((-1.0)*new_r00);
CheckValue<IkReal> x2133 = IKatan2WithCheck(IkReal(x2131),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2133.valid){
continue;
}
IkReal x2132=((1.0)*(x2133.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2132)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2132)));
IkReal gconst40=x2131;
IkReal gconst41=((1.0)*new_r10);
j3eval[0]=-1.0;
j3eval[1]=((IKabs(((-1.0)+(((2.0)*(new_r10*new_r10))))))+(IKabs(((2.0)*new_r00*new_r10))));
j3eval[2]=-1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2134=((1.0)*gconst41);
CheckValue<IkReal> x2135=IKPowWithIntegerCheck(IKsign((((gconst40*new_r00))+(((-1.0)*new_r10*x2134)))),-1);
if(!x2135.valid){
continue;
}
CheckValue<IkReal> x2136 = IKatan2WithCheck(IkReal(((gconst41*gconst41)+(((-1.0)*(new_r00*new_r00))))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst40*x2134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2136.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2135.value)))+(x2136.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2137=IKsin(j3);
IkReal x2138=IKcos(j3);
IkReal x2139=(gconst41*x2137);
IkReal x2140=(gconst41*x2138);
IkReal x2141=(gconst40*x2137);
IkReal x2142=((1.0)*x2138);
IkReal x2143=(gconst40*x2142);
evalcond[0]=(x2139+(((-1.0)*x2143)));
evalcond[1]=(((new_r10*x2137))+gconst41+((new_r00*x2138)));
evalcond[2]=(x2141+x2140+new_r00);
evalcond[3]=(gconst40+(((-1.0)*new_r10*x2142))+((new_r00*x2137)));
evalcond[4]=((((-1.0)*x2141))+(((-1.0)*x2140)));
evalcond[5]=(x2139+(((-1.0)*x2143))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2144 = IKatan2WithCheck(IkReal((gconst40*new_r00)),IkReal((gconst41*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2144.valid){
continue;
}
CheckValue<IkReal> x2145=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst41*gconst41)))+(((-1.0)*(gconst40*gconst40))))),-1);
if(!x2145.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2144.value)+(((1.5707963267949)*(x2145.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2146=IKsin(j3);
IkReal x2147=IKcos(j3);
IkReal x2148=(gconst41*x2146);
IkReal x2149=(gconst41*x2147);
IkReal x2150=(gconst40*x2146);
IkReal x2151=((1.0)*x2147);
IkReal x2152=(gconst40*x2151);
evalcond[0]=(x2148+(((-1.0)*x2152)));
evalcond[1]=(((new_r00*x2147))+gconst41+((new_r10*x2146)));
evalcond[2]=(x2150+x2149+new_r00);
evalcond[3]=(((new_r00*x2146))+gconst40+(((-1.0)*new_r10*x2151)));
evalcond[4]=((((-1.0)*x2149))+(((-1.0)*x2150)));
evalcond[5]=(x2148+(((-1.0)*x2152))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2153 = IKatan2WithCheck(IkReal(gconst40*gconst40),IkReal((gconst40*gconst41)),IKFAST_ATAN2_MAGTHRESH);
if(!x2153.valid){
continue;
}
CheckValue<IkReal> x2154=IKPowWithIntegerCheck(IKsign((((gconst41*new_r10))+(((-1.0)*gconst40*new_r00)))),-1);
if(!x2154.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2153.value)+(((1.5707963267949)*(x2154.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2155=IKsin(j3);
IkReal x2156=IKcos(j3);
IkReal x2157=(gconst41*x2155);
IkReal x2158=(gconst41*x2156);
IkReal x2159=(gconst40*x2155);
IkReal x2160=((1.0)*x2156);
IkReal x2161=(gconst40*x2160);
evalcond[0]=(x2157+(((-1.0)*x2161)));
evalcond[1]=(((new_r00*x2156))+gconst41+((new_r10*x2155)));
evalcond[2]=(x2158+x2159+new_r00);
evalcond[3]=(((new_r00*x2155))+(((-1.0)*new_r10*x2160))+gconst40);
evalcond[4]=((((-1.0)*x2158))+(((-1.0)*x2159)));
evalcond[5]=(x2157+(((-1.0)*x2161))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x2162=IKPowWithIntegerCheck(gconst40,-1);
if(!x2162.valid){
continue;
}
sj3array[0]=(new_r11*(x2162.value));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2163=IKcos(j3);
IkReal x2164=IKsin(j3);
IkReal x2165=((-1.0)*x2163);
evalcond[0]=(new_r00*x2163);
evalcond[1]=(new_r11*x2165);
evalcond[2]=(gconst40*x2165);
evalcond[3]=(((new_r00*x2164))+gconst40);
evalcond[4]=(((gconst40*x2164))+new_r00);
evalcond[5]=((((-1.0)*gconst40))+((new_r11*x2164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x2166=((-1.0)*new_r00);
CheckValue<IkReal> x2168 = IKatan2WithCheck(IkReal(x2166),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2168.valid){
continue;
}
IkReal x2167=((1.0)*(x2168.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2167)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2167)));
IkReal x2169 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x2169)==0){
continue;
}
IkReal gconst40=(x2166*(pow(x2169,-0.5)));
IkReal gconst41=0;
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x2170=((-1.0)*new_r00);
CheckValue<IkReal> x2172 = IKatan2WithCheck(IkReal(x2170),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2172.valid){
continue;
}
IkReal x2171=((1.0)*(x2172.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2171)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2171)));
IkReal x2173 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x2173)==0){
continue;
}
IkReal gconst40=(x2170*(pow(x2173,-0.5)));
IkReal gconst41=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x2174=((-1.0)*new_r00);
CheckValue<IkReal> x2176 = IKatan2WithCheck(IkReal(x2174),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2176.valid){
continue;
}
IkReal x2175=((1.0)*(x2176.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2175)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2175)));
IkReal x2177 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x2177)==0){
continue;
}
IkReal gconst40=(x2174*(pow(x2177,-0.5)));
IkReal gconst41=0;
j3eval[0]=new_r00;
j3eval[1]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2178=IKPowWithIntegerCheck(new_r00,-1);
if(!x2178.valid){
continue;
}
CheckValue<IkReal> x2179=IKPowWithIntegerCheck(new_r01,-1);
if(!x2179.valid){
continue;
}
if( IKabs(((-1.0)*gconst40*(x2178.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst40*(x2179.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst40*(x2178.value)))+IKsqr((gconst40*(x2179.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst40*(x2178.value)), (gconst40*(x2179.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2180=IKsin(j3);
IkReal x2181=IKcos(j3);
IkReal x2182=((1.0)*gconst40);
IkReal x2183=(gconst40*x2180);
evalcond[0]=(new_r01*x2180);
evalcond[1]=(new_r00*x2181);
evalcond[2]=((-1.0)*x2183);
evalcond[3]=((-1.0)*gconst40*x2181);
evalcond[4]=(((new_r00*x2180))+gconst40);
evalcond[5]=(x2183+new_r00);
evalcond[6]=((((-1.0)*x2181*x2182))+new_r01);
evalcond[7]=(((new_r01*x2181))+(((-1.0)*x2182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2184=IKPowWithIntegerCheck(new_r00,-1);
if(!x2184.valid){
continue;
}
CheckValue<IkReal> x2185=IKPowWithIntegerCheck(gconst40,-1);
if(!x2185.valid){
continue;
}
if( IKabs(((-1.0)*gconst40*(x2184.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x2185.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst40*(x2184.value)))+IKsqr((new_r01*(x2185.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst40*(x2184.value)), (new_r01*(x2185.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2186=IKsin(j3);
IkReal x2187=IKcos(j3);
IkReal x2188=((1.0)*gconst40);
IkReal x2189=(gconst40*x2186);
evalcond[0]=(new_r01*x2186);
evalcond[1]=(new_r00*x2187);
evalcond[2]=((-1.0)*x2189);
evalcond[3]=((-1.0)*gconst40*x2187);
evalcond[4]=(((new_r00*x2186))+gconst40);
evalcond[5]=(x2189+new_r00);
evalcond[6]=((((-1.0)*x2187*x2188))+new_r01);
evalcond[7]=(((new_r01*x2187))+(((-1.0)*x2188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2190=IKPowWithIntegerCheck(IKsign(gconst40),-1);
if(!x2190.valid){
continue;
}
CheckValue<IkReal> x2191 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2191.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2190.value)))+(x2191.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2192=IKsin(j3);
IkReal x2193=IKcos(j3);
IkReal x2194=((1.0)*gconst40);
IkReal x2195=(gconst40*x2192);
evalcond[0]=(new_r01*x2192);
evalcond[1]=(new_r00*x2193);
evalcond[2]=((-1.0)*x2195);
evalcond[3]=((-1.0)*gconst40*x2193);
evalcond[4]=(((new_r00*x2192))+gconst40);
evalcond[5]=(x2195+new_r00);
evalcond[6]=((((-1.0)*x2193*x2194))+new_r01);
evalcond[7]=(((new_r01*x2193))+(((-1.0)*x2194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r10);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x2196=((-1.0)*new_r00);
CheckValue<IkReal> x2198 = IKatan2WithCheck(IkReal(x2196),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2198.valid){
continue;
}
IkReal x2197=((1.0)*(x2198.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2197)));
new_r10=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2197)));
IkReal x2199 = new_r00*new_r00;
if(IKabs(x2199)==0){
continue;
}
IkReal gconst40=(x2196*(pow(x2199,-0.5)));
IkReal gconst41=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x2200=((-1.0)*new_r00);
CheckValue<IkReal> x2202 = IKatan2WithCheck(IkReal(x2200),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2202.valid){
continue;
}
IkReal x2201=((1.0)*(x2202.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2201)));
new_r10=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2201)));
IkReal x2203 = new_r00*new_r00;
if(IKabs(x2203)==0){
continue;
}
IkReal gconst40=(x2200*(pow(x2203,-0.5)));
IkReal gconst41=0;
j3eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x2204=((-1.0)*new_r00);
CheckValue<IkReal> x2206 = IKatan2WithCheck(IkReal(x2204),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x2206.valid){
continue;
}
IkReal x2205=((1.0)*(x2206.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2205)));
new_r10=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2205)));
IkReal x2207 = new_r00*new_r00;
if(IKabs(x2207)==0){
continue;
}
IkReal gconst40=(x2204*(pow(x2207,-0.5)));
IkReal gconst41=0;
j3eval[0]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2208=IKPowWithIntegerCheck(new_r00,-1);
if(!x2208.valid){
continue;
}
CheckValue<IkReal> x2209=IKPowWithIntegerCheck(gconst40,-1);
if(!x2209.valid){
continue;
}
if( IKabs(((-1.0)*gconst40*(x2208.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x2209.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst40*(x2208.value)))+IKsqr((new_r01*(x2209.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*gconst40*(x2208.value)), (new_r01*(x2209.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2210=IKcos(j3);
IkReal x2211=IKsin(j3);
IkReal x2212=(gconst40*x2211);
IkReal x2213=((1.0)*x2210);
evalcond[0]=(new_r00*x2210);
evalcond[1]=((-1.0)*gconst40*x2210);
evalcond[2]=(gconst40+((new_r00*x2211)));
evalcond[3]=(x2212+new_r00);
evalcond[4]=((((-1.0)*gconst40*x2213))+new_r01);
evalcond[5]=((((-1.0)*x2212))+new_r11);
evalcond[6]=(((new_r01*x2211))+(((-1.0)*new_r11*x2213)));
evalcond[7]=((((-1.0)*gconst40))+((new_r01*x2210))+((new_r11*x2211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2214=IKPowWithIntegerCheck(IKsign(gconst40),-1);
if(!x2214.valid){
continue;
}
CheckValue<IkReal> x2215 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2215.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2214.value)))+(x2215.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2216=IKcos(j3);
IkReal x2217=IKsin(j3);
IkReal x2218=(gconst40*x2217);
IkReal x2219=((1.0)*x2216);
evalcond[0]=(new_r00*x2216);
evalcond[1]=((-1.0)*gconst40*x2216);
evalcond[2]=(gconst40+((new_r00*x2217)));
evalcond[3]=(x2218+new_r00);
evalcond[4]=((((-1.0)*gconst40*x2219))+new_r01);
evalcond[5]=((((-1.0)*x2218))+new_r11);
evalcond[6]=(((new_r01*x2217))+(((-1.0)*new_r11*x2219)));
evalcond[7]=((((-1.0)*gconst40))+((new_r01*x2216))+((new_r11*x2217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2220=IKPowWithIntegerCheck(IKsign(gconst40),-1);
if(!x2220.valid){
continue;
}
CheckValue<IkReal> x2221 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2220.value)))+(x2221.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2222=IKcos(j3);
IkReal x2223=IKsin(j3);
IkReal x2224=(gconst40*x2223);
IkReal x2225=((1.0)*x2222);
evalcond[0]=(new_r00*x2222);
evalcond[1]=((-1.0)*gconst40*x2222);
evalcond[2]=(((new_r00*x2223))+gconst40);
evalcond[3]=(x2224+new_r00);
evalcond[4]=((((-1.0)*gconst40*x2225))+new_r01);
evalcond[5]=((((-1.0)*x2224))+new_r11);
evalcond[6]=(((new_r01*x2223))+(((-1.0)*new_r11*x2225)));
evalcond[7]=((((-1.0)*gconst40))+((new_r01*x2222))+((new_r11*x2223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2226=((1.0)*gconst41);
CheckValue<IkReal> x2227=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x2226))+((gconst40*new_r00)))),-1);
if(!x2227.valid){
continue;
}
CheckValue<IkReal> x2228 = IKatan2WithCheck(IkReal(((gconst41*gconst41)+(((-1.0)*(new_r00*new_r00))))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst40*x2226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2228.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2227.value)))+(x2228.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2229=IKcos(j3);
IkReal x2230=IKsin(j3);
IkReal x2231=(gconst41*x2230);
IkReal x2232=(gconst40*x2230);
IkReal x2233=((1.0)*x2229);
IkReal x2234=(gconst40*x2233);
evalcond[0]=(((new_r00*x2229))+((new_r10*x2230))+gconst41);
evalcond[1]=(x2232+((gconst41*x2229))+new_r00);
evalcond[2]=(((new_r00*x2230))+(((-1.0)*new_r10*x2233))+gconst40);
evalcond[3]=((((-1.0)*new_r11*x2233))+((new_r01*x2230))+gconst41);
evalcond[4]=(x2231+(((-1.0)*x2234))+new_r01);
evalcond[5]=(x2231+(((-1.0)*x2234))+new_r10);
evalcond[6]=((((-1.0)*gconst40))+((new_r01*x2229))+((new_r11*x2230)));
evalcond[7]=((((-1.0)*x2232))+(((-1.0)*gconst41*x2233))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2235=((1.0)*gconst41);
CheckValue<IkReal> x2236=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r01*x2235))+(((-1.0)*gconst40*new_r11)))),-1);
if(!x2236.valid){
continue;
}
CheckValue<IkReal> x2237 = IKatan2WithCheck(IkReal(((gconst41*gconst41)+((new_r00*new_r11)))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst40*x2235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2237.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2236.value)))+(x2237.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2238=IKcos(j3);
IkReal x2239=IKsin(j3);
IkReal x2240=(gconst41*x2239);
IkReal x2241=(gconst40*x2239);
IkReal x2242=((1.0)*x2238);
IkReal x2243=(gconst40*x2242);
evalcond[0]=(((new_r00*x2238))+((new_r10*x2239))+gconst41);
evalcond[1]=(x2241+((gconst41*x2238))+new_r00);
evalcond[2]=(((new_r00*x2239))+gconst40+(((-1.0)*new_r10*x2242)));
evalcond[3]=(((new_r01*x2239))+gconst41+(((-1.0)*new_r11*x2242)));
evalcond[4]=(x2240+(((-1.0)*x2243))+new_r01);
evalcond[5]=(x2240+(((-1.0)*x2243))+new_r10);
evalcond[6]=((((-1.0)*gconst40))+((new_r01*x2238))+((new_r11*x2239)));
evalcond[7]=((((-1.0)*gconst41*x2242))+(((-1.0)*x2241))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2244=((1.0)*new_r10);
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal((((gconst41*new_r11))+((gconst41*new_r00)))),IkReal(((((-1.0)*gconst41*x2244))+((gconst41*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
CheckValue<IkReal> x2246=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x2244))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x2246.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2245.value)+(((1.5707963267949)*(x2246.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2247=IKcos(j3);
IkReal x2248=IKsin(j3);
IkReal x2249=(gconst41*x2248);
IkReal x2250=(gconst40*x2248);
IkReal x2251=((1.0)*x2247);
IkReal x2252=(gconst40*x2251);
evalcond[0]=(gconst41+((new_r10*x2248))+((new_r00*x2247)));
evalcond[1]=(x2250+((gconst41*x2247))+new_r00);
evalcond[2]=(gconst40+(((-1.0)*new_r10*x2251))+((new_r00*x2248)));
evalcond[3]=(gconst41+(((-1.0)*new_r11*x2251))+((new_r01*x2248)));
evalcond[4]=(x2249+(((-1.0)*x2252))+new_r01);
evalcond[5]=(x2249+(((-1.0)*x2252))+new_r10);
evalcond[6]=((((-1.0)*gconst40))+((new_r11*x2248))+((new_r01*x2247)));
evalcond[7]=((((-1.0)*gconst41*x2251))+(((-1.0)*x2250))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r00), new_r01);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2253=IKsin(j3);
IkReal x2254=IKcos(j3);
IkReal x2255=((1.0)*x2254);
evalcond[0]=(x2253+new_r00);
evalcond[1]=((((-1.0)*x2255))+new_r01);
evalcond[2]=((((-1.0)*x2253))+new_r11);
evalcond[3]=((((-1.0)*x2255))+new_r10);
evalcond[4]=(((new_r00*x2254))+((new_r10*x2253)));
evalcond[5]=((((-1.0)*new_r11*x2255))+((new_r01*x2253)));
evalcond[6]=((-1.0)+((new_r11*x2253))+((new_r01*x2254)));
evalcond[7]=((1.0)+((new_r00*x2253))+(((-1.0)*new_r10*x2255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2256=IKcos(j3);
IkReal x2257=IKsin(j3);
IkReal x2258=((1.0)*x2256);
evalcond[0]=(x2256+new_r01);
evalcond[1]=(x2257+new_r11);
evalcond[2]=(x2256+new_r10);
evalcond[3]=((((-1.0)*x2257))+new_r00);
evalcond[4]=(((new_r00*x2256))+((new_r10*x2257)));
evalcond[5]=((((-1.0)*new_r11*x2258))+((new_r01*x2257)));
evalcond[6]=((1.0)+((new_r11*x2257))+((new_r01*x2256)));
evalcond[7]=((-1.0)+((new_r00*x2257))+(((-1.0)*new_r10*x2258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r11=0;
new_r00=0;
j3eval[0]=new_r10;
j3eval[1]=IKsign(new_r10);
j3eval[2]=((IKabs(cj5))+(IKabs(sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r11=0;
new_r00=0;
j3eval[0]=new_r01;
j3eval[1]=IKsign(new_r01);
j3eval[2]=((IKabs(cj5))+(IKabs(sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r11=0;
new_r00=0;
j3eval[0]=new_r01;
j3eval[1]=new_r10;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2259=IKPowWithIntegerCheck(new_r01,-1);
if(!x2259.valid){
continue;
}
CheckValue<IkReal> x2260=IKPowWithIntegerCheck(new_r10,-1);
if(!x2260.valid){
continue;
}
if( IKabs(((-1.0)*cj5*(x2259.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj5*(x2260.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj5*(x2259.value)))+IKsqr((sj5*(x2260.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*cj5*(x2259.value)), (sj5*(x2260.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x2261=IKsin(j3);
IkReal x2262=IKcos(j3);
IkReal x2263=((1.0)*sj5);
IkReal x2264=(cj5*x2261);
IkReal x2265=(x2262*x2263);
evalcond[0]=(cj5+((new_r01*x2261)));
evalcond[1]=(((new_r10*x2261))+cj5);
evalcond[2]=(sj5+(((-1.0)*new_r10*x2262)));
evalcond[3]=(((new_r01*x2262))+(((-1.0)*x2263)));
evalcond[4]=(((cj5*x2262))+((sj5*x2261)));
evalcond[5]=(x2264+new_r01+(((-1.0)*x2265)));
evalcond[6]=(x2264+new_r10+(((-1.0)*x2265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2266=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x2266.valid){
continue;
}
CheckValue<IkReal> x2267 = IKatan2WithCheck(IkReal(((-1.0)*cj5)),IkReal(sj5),IKFAST_ATAN2_MAGTHRESH);
if(!x2267.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2266.value)))+(x2267.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x2268=IKsin(j3);
IkReal x2269=IKcos(j3);
IkReal x2270=((1.0)*sj5);
IkReal x2271=(cj5*x2268);
IkReal x2272=(x2269*x2270);
evalcond[0]=(cj5+((new_r01*x2268)));
evalcond[1]=(((new_r10*x2268))+cj5);
evalcond[2]=(sj5+(((-1.0)*new_r10*x2269)));
evalcond[3]=(((new_r01*x2269))+(((-1.0)*x2270)));
evalcond[4]=(((cj5*x2269))+((sj5*x2268)));
evalcond[5]=(x2271+(((-1.0)*x2272))+new_r01);
evalcond[6]=(x2271+(((-1.0)*x2272))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2273=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x2273.valid){
continue;
}
CheckValue<IkReal> x2274 = IKatan2WithCheck(IkReal(((-1.0)*cj5)),IkReal(sj5),IKFAST_ATAN2_MAGTHRESH);
if(!x2274.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2273.value)))+(x2274.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x2275=IKsin(j3);
IkReal x2276=IKcos(j3);
IkReal x2277=((1.0)*sj5);
IkReal x2278=(cj5*x2275);
IkReal x2279=(x2276*x2277);
evalcond[0]=(cj5+((new_r01*x2275)));
evalcond[1]=(((new_r10*x2275))+cj5);
evalcond[2]=(sj5+(((-1.0)*new_r10*x2276)));
evalcond[3]=(((new_r01*x2276))+(((-1.0)*x2277)));
evalcond[4]=(((cj5*x2276))+((sj5*x2275)));
evalcond[5]=(x2278+(((-1.0)*x2279))+new_r01);
evalcond[6]=(x2278+(((-1.0)*x2279))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x2281 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2281.valid){
continue;
}
IkReal x2280=x2281.value;
j3array[0]=((-1.0)*x2280);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x2280)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r00*(IKsin(j3))))+(((-1.0)*new_r10*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x2283 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2283.valid){
continue;
}
IkReal x2282=x2283.value;
j3array[0]=((-1.0)*x2282);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x2282)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r01*(IKsin(j3))))+(((-1.0)*new_r11*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r01=0;
new_r10=0;
j3eval[0]=new_r00;
j3eval[1]=IKsign(new_r00);
j3eval[2]=((IKabs(cj5))+(IKabs(sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r01=0;
new_r10=0;
j3eval[0]=new_r00;
j3eval[1]=new_r11;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2284=IKPowWithIntegerCheck(new_r00,-1);
if(!x2284.valid){
continue;
}
CheckValue<IkReal> x2285=IKPowWithIntegerCheck(new_r11,-1);
if(!x2285.valid){
continue;
}
if( IKabs(((-1.0)*sj5*(x2284.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj5*(x2285.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj5*(x2284.value)))+IKsqr((cj5*(x2285.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*sj5*(x2284.value)), (cj5*(x2285.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x2286=IKcos(j3);
IkReal x2287=IKsin(j3);
IkReal x2288=((1.0)*sj5);
IkReal x2289=(cj5*x2286);
IkReal x2290=((1.0)*x2286);
evalcond[0]=(sj5+((new_r00*x2287)));
evalcond[1]=(cj5+((new_r00*x2286)));
evalcond[2]=((((-1.0)*new_r11*x2290))+cj5);
evalcond[3]=((((-1.0)*x2288))+((new_r11*x2287)));
evalcond[4]=((((-1.0)*x2286*x2288))+((cj5*x2287)));
evalcond[5]=(x2289+((sj5*x2287))+new_r00);
evalcond[6]=((((-1.0)*x2289))+(((-1.0)*x2287*x2288))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2291 = IKatan2WithCheck(IkReal(((-1.0)*sj5)),IkReal(((-1.0)*cj5)),IKFAST_ATAN2_MAGTHRESH);
if(!x2291.valid){
continue;
}
CheckValue<IkReal> x2292=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x2292.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2291.value)+(((1.5707963267949)*(x2292.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x2293=IKcos(j3);
IkReal x2294=IKsin(j3);
IkReal x2295=((1.0)*sj5);
IkReal x2296=(cj5*x2293);
IkReal x2297=((1.0)*x2293);
evalcond[0]=(((new_r00*x2294))+sj5);
evalcond[1]=(((new_r00*x2293))+cj5);
evalcond[2]=((((-1.0)*new_r11*x2297))+cj5);
evalcond[3]=(((new_r11*x2294))+(((-1.0)*x2295)));
evalcond[4]=((((-1.0)*x2293*x2295))+((cj5*x2294)));
evalcond[5]=(x2296+((sj5*x2294))+new_r00);
evalcond[6]=((((-1.0)*x2296))+new_r11+(((-1.0)*x2294*x2295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2298=((1.0)*new_r00);
CheckValue<IkReal> x2299 = IKatan2WithCheck(IkReal(((((-1.0)*(cj5*cj5)))+(new_r00*new_r00))),IkReal((((cj5*sj5))+(((-1.0)*new_r10*x2298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2299.valid){
continue;
}
CheckValue<IkReal> x2300=IKPowWithIntegerCheck(IKsign((((cj5*new_r10))+(((-1.0)*sj5*x2298)))),-1);
if(!x2300.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2299.value)+(((1.5707963267949)*(x2300.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2301=IKsin(j3);
IkReal x2302=IKcos(j3);
IkReal x2303=((1.0)*sj5);
IkReal x2304=(cj5*x2301);
IkReal x2305=((1.0)*x2302);
IkReal x2306=(x2302*x2303);
evalcond[0]=(((new_r00*x2302))+cj5+((new_r10*x2301)));
evalcond[1]=(((cj5*x2302))+((sj5*x2301))+new_r00);
evalcond[2]=(((new_r00*x2301))+sj5+(((-1.0)*new_r10*x2305)));
evalcond[3]=(cj5+(((-1.0)*new_r11*x2305))+((new_r01*x2301)));
evalcond[4]=(x2304+(((-1.0)*x2306))+new_r01);
evalcond[5]=(x2304+(((-1.0)*x2306))+new_r10);
evalcond[6]=(((new_r11*x2301))+(((-1.0)*x2303))+((new_r01*x2302)));
evalcond[7]=((((-1.0)*x2301*x2303))+(((-1.0)*cj5*x2305))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2307=((1.0)*new_r10);
CheckValue<IkReal> x2308 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+((cj5*sj5)))),IkReal(((cj5*cj5)+(((-1.0)*new_r01*x2307)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2308.valid){
continue;
}
CheckValue<IkReal> x2309=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*new_r00))+(((-1.0)*sj5*x2307)))),-1);
if(!x2309.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2308.value)+(((1.5707963267949)*(x2309.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2310=IKsin(j3);
IkReal x2311=IKcos(j3);
IkReal x2312=((1.0)*sj5);
IkReal x2313=(cj5*x2310);
IkReal x2314=((1.0)*x2311);
IkReal x2315=(x2311*x2312);
evalcond[0]=(cj5+((new_r10*x2310))+((new_r00*x2311)));
evalcond[1]=(((sj5*x2310))+((cj5*x2311))+new_r00);
evalcond[2]=(sj5+(((-1.0)*new_r10*x2314))+((new_r00*x2310)));
evalcond[3]=(cj5+(((-1.0)*new_r11*x2314))+((new_r01*x2310)));
evalcond[4]=(x2313+new_r01+(((-1.0)*x2315)));
evalcond[5]=(x2313+new_r10+(((-1.0)*x2315)));
evalcond[6]=(((new_r11*x2310))+((new_r01*x2311))+(((-1.0)*x2312)));
evalcond[7]=((((-1.0)*x2310*x2312))+new_r11+(((-1.0)*cj5*x2314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2316=((1.0)*new_r10);
CheckValue<IkReal> x2317=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r11*x2316)))),-1);
if(!x2317.valid){
continue;
}
CheckValue<IkReal> x2318 = IKatan2WithCheck(IkReal((((cj5*new_r11))+((cj5*new_r00)))),IkReal((((cj5*new_r01))+(((-1.0)*cj5*x2316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2318.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2317.value)))+(x2318.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x2319=IKsin(j3);
IkReal x2320=IKcos(j3);
IkReal x2321=((1.0)*sj5);
IkReal x2322=(cj5*x2319);
IkReal x2323=((1.0)*x2320);
IkReal x2324=(x2320*x2321);
evalcond[0]=(cj5+((new_r10*x2319))+((new_r00*x2320)));
evalcond[1]=(((sj5*x2319))+((cj5*x2320))+new_r00);
evalcond[2]=(sj5+(((-1.0)*new_r10*x2323))+((new_r00*x2319)));
evalcond[3]=(cj5+(((-1.0)*new_r11*x2323))+((new_r01*x2319)));
evalcond[4]=(x2322+new_r01+(((-1.0)*x2324)));
evalcond[5]=(x2322+new_r10+(((-1.0)*x2324)));
evalcond[6]=(((new_r11*x2319))+((new_r01*x2320))+(((-1.0)*x2321)));
evalcond[7]=((((-1.0)*x2319*x2321))+(((-1.0)*cj5*x2323))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x2326 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2326.valid){
continue;
}
IkReal x2325=x2326.value;
j3array[0]=((-1.0)*x2325);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x2325)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x2327=IKsin(j3);
IkReal x2328=IKcos(j3);
IkReal x2329=(new_r00*x2328);
IkReal x2330=((1.0)*x2328);
IkReal x2331=(new_r10*x2327);
evalcond[0]=(((new_r11*x2327))+((new_r01*x2328)));
evalcond[1]=(x2331+x2329);
evalcond[2]=((((-1.0)*new_r10*x2330))+((new_r00*x2327)));
evalcond[3]=((((-1.0)*new_r11*x2330))+((new_r01*x2327)));
evalcond[4]=(((new_r22*x2329))+((new_r22*x2331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x2333 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2333.valid){
continue;
}
IkReal x2332=x2333.value;
j3array[0]=((-1.0)*x2332);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x2332)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x2334=IKsin(j3);
IkReal x2335=IKcos(j3);
IkReal x2336=(new_r22*x2335);
IkReal x2337=(new_r22*x2334);
IkReal x2338=((1.0)*x2335);
evalcond[0]=(((new_r11*x2334))+((new_r01*x2335)));
evalcond[1]=(((new_r00*x2334))+(((-1.0)*new_r10*x2338)));
evalcond[2]=((((-1.0)*new_r11*x2338))+((new_r01*x2334)));
evalcond[3]=(((new_r11*x2337))+((new_r01*x2336)));
evalcond[4]=(((new_r10*x2337))+((new_r00*x2336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x2340 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2340.valid){
continue;
}
IkReal x2339=x2340.value;
j3array[0]=((-1.0)*x2339);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x2339)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x2341=IKsin(j3);
IkReal x2342=IKcos(j3);
IkReal x2343=(new_r22*x2342);
IkReal x2344=(new_r22*x2341);
IkReal x2345=((1.0)*x2342);
evalcond[0]=(((new_r10*x2341))+((new_r00*x2342)));
evalcond[1]=((((-1.0)*new_r10*x2345))+((new_r00*x2341)));
evalcond[2]=((((-1.0)*new_r11*x2345))+((new_r01*x2341)));
evalcond[3]=(((new_r11*x2344))+((new_r01*x2343)));
evalcond[4]=(((new_r10*x2344))+((new_r00*x2343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2347=IKPowWithIntegerCheck(sj4,-1);
if(!x2347.valid){
continue;
}
IkReal x2346=x2347.value;
CheckValue<IkReal> x2348=IKPowWithIntegerCheck(new_r12,-1);
if(!x2348.valid){
continue;
}
if( IKabs((x2346*(x2348.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x2346)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2346*(x2348.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))))+IKsqr(((-1.0)*new_r02*x2346))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x2346*(x2348.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))), ((-1.0)*new_r02*x2346));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x2349=IKcos(j3);
IkReal x2350=IKsin(j3);
IkReal x2351=((1.0)*cj4);
IkReal x2352=((1.0)*cj5);
IkReal x2353=(cj4*x2349);
IkReal x2354=(sj4*x2350);
IkReal x2355=((1.0)*x2349);
IkReal x2356=(sj4*x2349);
IkReal x2357=(cj4*x2350);
IkReal x2358=(cj5*x2350);
evalcond[0]=(x2356+new_r02);
evalcond[1]=(x2354+new_r12);
evalcond[2]=((((-1.0)*new_r02*x2350))+((new_r12*x2349)));
evalcond[3]=(sj4+((new_r02*x2349))+((new_r12*x2350)));
evalcond[4]=(sj5+(((-1.0)*new_r10*x2355))+((new_r00*x2350)));
evalcond[5]=(cj5+(((-1.0)*new_r11*x2355))+((new_r01*x2350)));
evalcond[6]=(x2358+((sj5*x2353))+new_r01);
evalcond[7]=(((cj4*sj5))+((new_r11*x2350))+((new_r01*x2349)));
evalcond[8]=((((-1.0)*cj5*x2349*x2351))+((sj5*x2350))+new_r00);
evalcond[9]=(((sj5*x2357))+new_r11+(((-1.0)*x2349*x2352)));
evalcond[10]=(((new_r10*x2350))+(((-1.0)*cj5*x2351))+((new_r00*x2349)));
evalcond[11]=((((-1.0)*sj5*x2355))+new_r10+(((-1.0)*x2351*x2358)));
evalcond[12]=(((new_r22*sj4))+((new_r02*x2353))+((new_r12*x2357)));
evalcond[13]=((((-1.0)*new_r20*x2351))+((new_r10*x2354))+((new_r00*x2356)));
evalcond[14]=((((-1.0)*new_r21*x2351))+((new_r11*x2354))+((new_r01*x2356)));
evalcond[15]=(sj5+((new_r11*x2357))+((new_r21*sj4))+((new_r01*x2353)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x2351))+((new_r02*x2356))+((new_r12*x2354)));
evalcond[17]=(((new_r20*sj4))+((new_r10*x2357))+(((-1.0)*x2352))+((new_r00*x2353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2359=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x2359.valid){
continue;
}
CheckValue<IkReal> x2360 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2360.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2359.value)))+(x2360.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x2361=IKcos(j3);
IkReal x2362=IKsin(j3);
IkReal x2363=((1.0)*cj4);
IkReal x2364=((1.0)*cj5);
IkReal x2365=(cj4*x2361);
IkReal x2366=(sj4*x2362);
IkReal x2367=((1.0)*x2361);
IkReal x2368=(sj4*x2361);
IkReal x2369=(cj4*x2362);
IkReal x2370=(cj5*x2362);
evalcond[0]=(x2368+new_r02);
evalcond[1]=(x2366+new_r12);
evalcond[2]=(((new_r12*x2361))+(((-1.0)*new_r02*x2362)));
evalcond[3]=(sj4+((new_r12*x2362))+((new_r02*x2361)));
evalcond[4]=(((new_r00*x2362))+sj5+(((-1.0)*new_r10*x2367)));
evalcond[5]=(((new_r01*x2362))+cj5+(((-1.0)*new_r11*x2367)));
evalcond[6]=(x2370+((sj5*x2365))+new_r01);
evalcond[7]=(((new_r01*x2361))+((new_r11*x2362))+((cj4*sj5)));
evalcond[8]=((((-1.0)*cj5*x2361*x2363))+((sj5*x2362))+new_r00);
evalcond[9]=(((sj5*x2369))+(((-1.0)*x2361*x2364))+new_r11);
evalcond[10]=(((new_r00*x2361))+((new_r10*x2362))+(((-1.0)*cj5*x2363)));
evalcond[11]=((((-1.0)*sj5*x2367))+new_r10+(((-1.0)*x2363*x2370)));
evalcond[12]=(((new_r12*x2369))+((new_r02*x2365))+((new_r22*sj4)));
evalcond[13]=((((-1.0)*new_r20*x2363))+((new_r00*x2368))+((new_r10*x2366)));
evalcond[14]=(((new_r01*x2368))+(((-1.0)*new_r21*x2363))+((new_r11*x2366)));
evalcond[15]=(sj5+((new_r01*x2365))+((new_r11*x2369))+((new_r21*sj4)));
evalcond[16]=((1.0)+((new_r12*x2366))+((new_r02*x2368))+(((-1.0)*new_r22*x2363)));
evalcond[17]=(((new_r00*x2365))+((new_r20*sj4))+(((-1.0)*x2364))+((new_r10*x2369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 17;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "c84c6d72efefc7e76afd09e0702c8b28"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
